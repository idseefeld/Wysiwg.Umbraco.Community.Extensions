// This file is auto-generated by @hey-api/openapi-ts

export const AssemblySchema = {
    required: ['customAttributes', 'definedTypes', 'escapedCodeBase', 'exportedTypes', 'globalAssemblyCache', 'hostContext', 'imageRuntimeVersion', 'isCollectible', 'isDynamic', 'isFullyTrusted', 'location', 'manifestModule', 'modules', 'reflectionOnly', 'securityRuleSet'],
    type: 'object',
    properties: {
        definedTypes: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/TypeInfo'
                    }
                ]
            },
            readOnly: true
        },
        exportedTypes: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/Type'
                    }
                ]
            },
            readOnly: true
        },
        codeBase: {
            type: 'string',
            nullable: true,
            readOnly: true,
            deprecated: true
        },
        entryPoint: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/MethodInfo'
                }
            ],
            nullable: true,
            readOnly: true
        },
        fullName: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        imageRuntimeVersion: {
            type: 'string',
            readOnly: true
        },
        isDynamic: {
            type: 'boolean',
            readOnly: true
        },
        location: {
            type: 'string',
            readOnly: true
        },
        reflectionOnly: {
            type: 'boolean',
            readOnly: true
        },
        isCollectible: {
            type: 'boolean',
            readOnly: true
        },
        isFullyTrusted: {
            type: 'boolean',
            readOnly: true
        },
        customAttributes: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/CustomAttributeData'
                    }
                ]
            },
            readOnly: true
        },
        escapedCodeBase: {
            type: 'string',
            readOnly: true,
            deprecated: true
        },
        manifestModule: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/Module'
                }
            ],
            readOnly: true
        },
        modules: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/Module'
                    }
                ]
            },
            readOnly: true
        },
        globalAssemblyCache: {
            type: 'boolean',
            readOnly: true,
            deprecated: true
        },
        hostContext: {
            type: 'integer',
            format: 'int64',
            readOnly: true
        },
        securityRuleSet: {
            '$ref': '#/components/schemas/SecurityRuleSet'
        }
    },
    additionalProperties: false
} as const;

export const CallingConventionsSchema = {
    enum: ['Standard', 'VarArgs', 'Any', 'HasThis', 'ExplicitThis'],
    type: 'string'
} as const;

export const ConstructorInfoSchema = {
    required: ['attributes', 'callingConvention', 'containsGenericParameters', 'customAttributes', 'isAbstract', 'isAssembly', 'isCollectible', 'isConstructedGenericMethod', 'isConstructor', 'isFamily', 'isFamilyAndAssembly', 'isFamilyOrAssembly', 'isFinal', 'isGenericMethod', 'isGenericMethodDefinition', 'isHideBySig', 'isPrivate', 'isPublic', 'isSecurityCritical', 'isSecuritySafeCritical', 'isSecurityTransparent', 'isSpecialName', 'isStatic', 'isVirtual', 'memberType', 'metadataToken', 'methodHandle', 'methodImplementationFlags', 'module', 'name'],
    type: 'object',
    properties: {
        name: {
            type: 'string',
            readOnly: true
        },
        declaringType: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/Type'
                }
            ],
            nullable: true,
            readOnly: true
        },
        reflectedType: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/Type'
                }
            ],
            nullable: true,
            readOnly: true
        },
        module: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/Module'
                }
            ],
            readOnly: true
        },
        customAttributes: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/CustomAttributeData'
                    }
                ]
            },
            readOnly: true
        },
        isCollectible: {
            type: 'boolean',
            readOnly: true
        },
        metadataToken: {
            type: 'integer',
            format: 'int32',
            readOnly: true
        },
        attributes: {
            '$ref': '#/components/schemas/MethodAttributes'
        },
        methodImplementationFlags: {
            '$ref': '#/components/schemas/MethodImplAttributes'
        },
        callingConvention: {
            '$ref': '#/components/schemas/CallingConventions'
        },
        isAbstract: {
            type: 'boolean',
            readOnly: true
        },
        isConstructor: {
            type: 'boolean',
            readOnly: true
        },
        isFinal: {
            type: 'boolean',
            readOnly: true
        },
        isHideBySig: {
            type: 'boolean',
            readOnly: true
        },
        isSpecialName: {
            type: 'boolean',
            readOnly: true
        },
        isStatic: {
            type: 'boolean',
            readOnly: true
        },
        isVirtual: {
            type: 'boolean',
            readOnly: true
        },
        isAssembly: {
            type: 'boolean',
            readOnly: true
        },
        isFamily: {
            type: 'boolean',
            readOnly: true
        },
        isFamilyAndAssembly: {
            type: 'boolean',
            readOnly: true
        },
        isFamilyOrAssembly: {
            type: 'boolean',
            readOnly: true
        },
        isPrivate: {
            type: 'boolean',
            readOnly: true
        },
        isPublic: {
            type: 'boolean',
            readOnly: true
        },
        isConstructedGenericMethod: {
            type: 'boolean',
            readOnly: true
        },
        isGenericMethod: {
            type: 'boolean',
            readOnly: true
        },
        isGenericMethodDefinition: {
            type: 'boolean',
            readOnly: true
        },
        containsGenericParameters: {
            type: 'boolean',
            readOnly: true
        },
        methodHandle: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/RuntimeMethodHandle'
                }
            ],
            readOnly: true
        },
        isSecurityCritical: {
            type: 'boolean',
            readOnly: true
        },
        isSecuritySafeCritical: {
            type: 'boolean',
            readOnly: true
        },
        isSecurityTransparent: {
            type: 'boolean',
            readOnly: true
        },
        memberType: {
            '$ref': '#/components/schemas/MemberTypes'
        }
    },
    additionalProperties: false
} as const;

export const ContentTypeModelSchema = {
    required: ['alias', 'allowedAsRoot', 'compositionPropertyGroups', 'compositionPropertyTypes', 'contentTypeComposition', 'createDate', 'creatorId', 'defaultTemplateId', 'hasIdentity', 'id', 'isElement', 'key', 'level', 'noGroupPropertyTypes', 'parentId', 'path', 'propertyGroups', 'propertyTypes', 'removedContentTypes', 'sortOrder', 'supportsPublishing', 'trashed', 'updateDate', 'variations'],
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int32'
        },
        key: {
            type: 'string',
            format: 'uuid'
        },
        createDate: {
            type: 'string',
            format: 'date-time'
        },
        updateDate: {
            type: 'string',
            format: 'date-time'
        },
        deleteDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        hasIdentity: {
            type: 'boolean',
            readOnly: true
        },
        name: {
            type: 'string',
            nullable: true
        },
        creatorId: {
            type: 'integer',
            format: 'int32'
        },
        parentId: {
            type: 'integer',
            format: 'int32'
        },
        level: {
            type: 'integer',
            format: 'int32'
        },
        path: {
            type: 'string'
        },
        sortOrder: {
            type: 'integer',
            format: 'int32'
        },
        trashed: {
            type: 'boolean'
        },
        alias: {
            type: 'string'
        },
        description: {
            type: 'string',
            nullable: true
        },
        icon: {
            type: 'string',
            nullable: true
        },
        thumbnail: {
            type: 'string',
            nullable: true
        },
        allowedAsRoot: {
            type: 'boolean'
        },
        listView: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        isElement: {
            type: 'boolean'
        },
        allowedContentTypes: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/ContentTypeSortModel'
                    }
                ]
            },
            nullable: true
        },
        variations: {
            '$ref': '#/components/schemas/ContentVariationModel'
        },
        propertyGroups: {
            uniqueItems: true,
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/PropertyGroupModel'
                    }
                ]
            }
        },
        propertyTypes: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/PropertyTypeModel'
                    }
                ]
            },
            readOnly: true
        },
        noGroupPropertyTypes: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/PropertyTypeModel'
                    }
                ]
            }
        },
        removedContentTypes: {
            type: 'array',
            items: {
                type: 'integer',
                format: 'int32'
            },
            readOnly: true
        },
        contentTypeComposition: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/ContentTypeModel'
                    },
                    {
                        '$ref': '#/components/schemas/MediaTypeModel'
                    },
                    {
                        '$ref': '#/components/schemas/MemberTypeModel'
                    }
                ]
            }
        },
        compositionPropertyGroups: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/PropertyGroupModel'
                    }
                ]
            },
            readOnly: true
        },
        compositionPropertyTypes: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/PropertyTypeModel'
                    }
                ]
            },
            readOnly: true
        },
        supportsPublishing: {
            type: 'boolean',
            readOnly: true
        },
        defaultTemplate: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/TemplateModel'
                },
                {
                    '$ref': '#/components/schemas/TemplateOnDiskModel'
                }
            ],
            nullable: true,
            readOnly: true
        },
        defaultTemplateId: {
            type: 'integer',
            format: 'int32'
        },
        allowedTemplates: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/TemplateModel'
                    },
                    {
                        '$ref': '#/components/schemas/TemplateOnDiskModel'
                    }
                ]
            },
            nullable: true
        },
        historyCleanup: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/HistoryCleanupModel'
                }
            ],
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const ContentTypeSortModelSchema = {
    required: ['alias', 'key', 'sortOrder'],
    type: 'object',
    properties: {
        sortOrder: {
            type: 'integer',
            format: 'int32'
        },
        alias: {
            type: 'string'
        },
        key: {
            type: 'string',
            format: 'uuid'
        }
    },
    additionalProperties: false
} as const;

export const ContentVariationModelSchema = {
    enum: ['Nothing', 'Culture', 'Segment', 'CultureAndSegment'],
    type: 'string'
} as const;

export const CustomAttributeDataSchema = {
    required: ['attributeType', 'constructor', 'constructorArguments', 'namedArguments'],
    type: 'object',
    properties: {
        attributeType: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/Type'
                }
            ],
            readOnly: true
        },
        constructor: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ConstructorInfo'
                }
            ],
            readOnly: true
        },
        constructorArguments: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/CustomAttributeTypedArgument'
                    }
                ]
            },
            readOnly: true
        },
        namedArguments: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/CustomAttributeNamedArgument'
                    }
                ]
            },
            readOnly: true
        }
    },
    additionalProperties: false
} as const;

export const CustomAttributeNamedArgumentSchema = {
    required: ['isField', 'memberInfo', 'memberName', 'typedValue'],
    type: 'object',
    properties: {
        memberInfo: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/MemberInfo'
                }
            ]
        },
        typedValue: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/CustomAttributeTypedArgument'
                }
            ],
            readOnly: true
        },
        memberName: {
            type: 'string',
            readOnly: true
        },
        isField: {
            type: 'boolean',
            readOnly: true
        }
    },
    additionalProperties: false
} as const;

export const CustomAttributeTypedArgumentSchema = {
    required: ['argumentType'],
    type: 'object',
    properties: {
        argumentType: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/Type'
                }
            ]
        },
        value: {
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const EventAttributesSchema = {
    enum: ['None', 'SpecialName', 'RTSpecialName', 'ReservedMask'],
    type: 'string'
} as const;

export const EventInfoSchema = {
    required: ['attributes', 'customAttributes', 'isCollectible', 'isMulticast', 'isSpecialName', 'memberType', 'metadataToken', 'module', 'name'],
    type: 'object',
    properties: {
        name: {
            type: 'string',
            readOnly: true
        },
        declaringType: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/Type'
                }
            ],
            nullable: true,
            readOnly: true
        },
        reflectedType: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/Type'
                }
            ],
            nullable: true,
            readOnly: true
        },
        module: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/Module'
                }
            ],
            readOnly: true
        },
        customAttributes: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/CustomAttributeData'
                    }
                ]
            },
            readOnly: true
        },
        isCollectible: {
            type: 'boolean',
            readOnly: true
        },
        metadataToken: {
            type: 'integer',
            format: 'int32',
            readOnly: true
        },
        memberType: {
            '$ref': '#/components/schemas/MemberTypes'
        },
        attributes: {
            '$ref': '#/components/schemas/EventAttributes'
        },
        isSpecialName: {
            type: 'boolean',
            readOnly: true
        },
        addMethod: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/MethodInfo'
                }
            ],
            nullable: true,
            readOnly: true
        },
        removeMethod: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/MethodInfo'
                }
            ],
            nullable: true,
            readOnly: true
        },
        raiseMethod: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/MethodInfo'
                }
            ],
            nullable: true,
            readOnly: true
        },
        isMulticast: {
            type: 'boolean',
            readOnly: true
        },
        eventHandlerType: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/Type'
                }
            ],
            nullable: true,
            readOnly: true
        }
    },
    additionalProperties: false
} as const;

export const FieldAttributesSchema = {
    enum: ['PrivateScope', 'Private', 'FamANDAssem', 'Assembly', 'Family', 'FamORAssem', 'Public', 'FieldAccessMask', 'Static', 'InitOnly', 'Literal', 'NotSerialized', 'HasFieldRVA', 'SpecialName', 'RTSpecialName', 'HasFieldMarshal', 'PinvokeImpl', 'HasDefault', 'ReservedMask'],
    type: 'string'
} as const;

export const FieldInfoSchema = {
    required: ['attributes', 'customAttributes', 'fieldHandle', 'fieldType', 'isAssembly', 'isCollectible', 'isFamily', 'isFamilyAndAssembly', 'isFamilyOrAssembly', 'isInitOnly', 'isLiteral', 'isNotSerialized', 'isPinvokeImpl', 'isPrivate', 'isPublic', 'isSecurityCritical', 'isSecuritySafeCritical', 'isSecurityTransparent', 'isSpecialName', 'isStatic', 'memberType', 'metadataToken', 'module', 'name'],
    type: 'object',
    properties: {
        name: {
            type: 'string',
            readOnly: true
        },
        declaringType: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/Type'
                }
            ],
            nullable: true,
            readOnly: true
        },
        reflectedType: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/Type'
                }
            ],
            nullable: true,
            readOnly: true
        },
        module: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/Module'
                }
            ],
            readOnly: true
        },
        customAttributes: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/CustomAttributeData'
                    }
                ]
            },
            readOnly: true
        },
        isCollectible: {
            type: 'boolean',
            readOnly: true
        },
        metadataToken: {
            type: 'integer',
            format: 'int32',
            readOnly: true
        },
        memberType: {
            '$ref': '#/components/schemas/MemberTypes'
        },
        attributes: {
            '$ref': '#/components/schemas/FieldAttributes'
        },
        fieldType: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/Type'
                }
            ],
            readOnly: true
        },
        isInitOnly: {
            type: 'boolean',
            readOnly: true
        },
        isLiteral: {
            type: 'boolean',
            readOnly: true
        },
        isNotSerialized: {
            type: 'boolean',
            readOnly: true,
            deprecated: true
        },
        isPinvokeImpl: {
            type: 'boolean',
            readOnly: true
        },
        isSpecialName: {
            type: 'boolean',
            readOnly: true
        },
        isStatic: {
            type: 'boolean',
            readOnly: true
        },
        isAssembly: {
            type: 'boolean',
            readOnly: true
        },
        isFamily: {
            type: 'boolean',
            readOnly: true
        },
        isFamilyAndAssembly: {
            type: 'boolean',
            readOnly: true
        },
        isFamilyOrAssembly: {
            type: 'boolean',
            readOnly: true
        },
        isPrivate: {
            type: 'boolean',
            readOnly: true
        },
        isPublic: {
            type: 'boolean',
            readOnly: true
        },
        isSecurityCritical: {
            type: 'boolean',
            readOnly: true
        },
        isSecuritySafeCritical: {
            type: 'boolean',
            readOnly: true
        },
        isSecurityTransparent: {
            type: 'boolean',
            readOnly: true
        },
        fieldHandle: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/RuntimeFieldHandle'
                }
            ],
            readOnly: true
        }
    },
    additionalProperties: false
} as const;

export const Func_2Schema = {
    required: ['method'],
    type: 'object',
    properties: {
        target: {
            nullable: true,
            readOnly: true
        },
        method: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/MethodInfo'
                }
            ],
            readOnly: true
        }
    },
    additionalProperties: false
} as const;

export const GenericParameterAttributesSchema = {
    enum: ['None', 'Covariant', 'Contravariant', 'VarianceMask', 'ReferenceTypeConstraint', 'NotNullableValueTypeConstraint', 'DefaultConstructorConstraint', 'SpecialConstraintMask', 'AllowByRefLike'],
    type: 'string'
} as const;

export const HistoryCleanupModelSchema = {
    required: ['preventCleanup'],
    type: 'object',
    properties: {
        preventCleanup: {
            type: 'boolean'
        },
        keepAllVersionsNewerThanDays: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        keepLatestVersionPerDayForDays: {
            type: 'integer',
            format: 'int32',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const ICustomAttributeProviderSchema = {
    type: 'object',
    additionalProperties: false
} as const;

export const ImageCropperCropCoordinatesModelSchema = {
    required: ['x1', 'x2', 'y1', 'y2'],
    type: 'object',
    properties: {
        x1: {
            type: 'number',
            format: 'double'
        },
        y1: {
            type: 'number',
            format: 'double'
        },
        x2: {
            type: 'number',
            format: 'double'
        },
        y2: {
            type: 'number',
            format: 'double'
        }
    },
    additionalProperties: false
} as const;

export const ImageCropperCropModelSchema = {
    required: ['height', 'width'],
    type: 'object',
    properties: {
        alias: {
            type: 'string',
            nullable: true
        },
        width: {
            type: 'integer',
            format: 'int32'
        },
        height: {
            type: 'integer',
            format: 'int32'
        },
        coordinates: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ImageCropperCropCoordinatesModel'
                }
            ],
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const IntPtrSchema = {
    type: 'object',
    additionalProperties: false
} as const;

export const LayoutKindSchema = {
    enum: ['Sequential', 'Explicit', 'Auto'],
    type: 'string'
} as const;

export const Lazy_1Schema = {
    required: ['isValueCreated', 'value'],
    type: 'object',
    properties: {
        isValueCreated: {
            type: 'boolean',
            readOnly: true
        },
        value: {
            type: 'integer',
            format: 'int32',
            readOnly: true
        }
    },
    additionalProperties: false
} as const;

export const MediaTypeModelSchema = {
    required: ['alias', 'allowedAsRoot', 'compositionPropertyGroups', 'compositionPropertyTypes', 'contentTypeComposition', 'createDate', 'creatorId', 'hasIdentity', 'id', 'isElement', 'key', 'level', 'noGroupPropertyTypes', 'parentId', 'path', 'propertyGroups', 'propertyTypes', 'removedContentTypes', 'sortOrder', 'supportsPublishing', 'trashed', 'updateDate', 'variations'],
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int32'
        },
        key: {
            type: 'string',
            format: 'uuid'
        },
        createDate: {
            type: 'string',
            format: 'date-time'
        },
        updateDate: {
            type: 'string',
            format: 'date-time'
        },
        deleteDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        hasIdentity: {
            type: 'boolean',
            readOnly: true
        },
        name: {
            type: 'string',
            nullable: true
        },
        creatorId: {
            type: 'integer',
            format: 'int32'
        },
        parentId: {
            type: 'integer',
            format: 'int32'
        },
        level: {
            type: 'integer',
            format: 'int32'
        },
        path: {
            type: 'string'
        },
        sortOrder: {
            type: 'integer',
            format: 'int32'
        },
        trashed: {
            type: 'boolean'
        },
        description: {
            type: 'string',
            nullable: true
        },
        icon: {
            type: 'string',
            nullable: true
        },
        thumbnail: {
            type: 'string',
            nullable: true
        },
        allowedAsRoot: {
            type: 'boolean'
        },
        listView: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        isElement: {
            type: 'boolean'
        },
        allowedContentTypes: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/ContentTypeSortModel'
                    }
                ]
            },
            nullable: true
        },
        variations: {
            '$ref': '#/components/schemas/ContentVariationModel'
        },
        propertyGroups: {
            uniqueItems: true,
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/PropertyGroupModel'
                    }
                ]
            }
        },
        propertyTypes: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/PropertyTypeModel'
                    }
                ]
            },
            readOnly: true
        },
        noGroupPropertyTypes: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/PropertyTypeModel'
                    }
                ]
            }
        },
        removedContentTypes: {
            type: 'array',
            items: {
                type: 'integer',
                format: 'int32'
            },
            readOnly: true
        },
        contentTypeComposition: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/ContentTypeModel'
                    },
                    {
                        '$ref': '#/components/schemas/MediaTypeModel'
                    },
                    {
                        '$ref': '#/components/schemas/MemberTypeModel'
                    }
                ]
            }
        },
        compositionPropertyGroups: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/PropertyGroupModel'
                    }
                ]
            },
            readOnly: true
        },
        compositionPropertyTypes: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/PropertyTypeModel'
                    }
                ]
            },
            readOnly: true
        },
        supportsPublishing: {
            type: 'boolean',
            readOnly: true
        },
        alias: {
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const MemberInfoSchema = {
    required: ['customAttributes', 'isCollectible', 'memberType', 'metadataToken', 'module', 'name'],
    type: 'object',
    properties: {
        memberType: {
            '$ref': '#/components/schemas/MemberTypes'
        },
        name: {
            type: 'string',
            readOnly: true
        },
        declaringType: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/Type'
                }
            ],
            nullable: true,
            readOnly: true
        },
        reflectedType: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/Type'
                }
            ],
            nullable: true,
            readOnly: true
        },
        module: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/Module'
                }
            ],
            readOnly: true
        },
        customAttributes: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/CustomAttributeData'
                    }
                ]
            },
            readOnly: true
        },
        isCollectible: {
            type: 'boolean',
            readOnly: true
        },
        metadataToken: {
            type: 'integer',
            format: 'int32',
            readOnly: true
        }
    },
    additionalProperties: false
} as const;

export const MemberTypeModelSchema = {
    required: ['alias', 'allowedAsRoot', 'compositionPropertyGroups', 'compositionPropertyTypes', 'contentTypeComposition', 'createDate', 'creatorId', 'hasIdentity', 'id', 'isElement', 'key', 'level', 'noGroupPropertyTypes', 'parentId', 'path', 'propertyGroups', 'propertyTypes', 'removedContentTypes', 'sortOrder', 'supportsPublishing', 'trashed', 'updateDate', 'variations'],
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int32'
        },
        key: {
            type: 'string',
            format: 'uuid'
        },
        createDate: {
            type: 'string',
            format: 'date-time'
        },
        updateDate: {
            type: 'string',
            format: 'date-time'
        },
        deleteDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        hasIdentity: {
            type: 'boolean',
            readOnly: true
        },
        name: {
            type: 'string',
            nullable: true
        },
        creatorId: {
            type: 'integer',
            format: 'int32'
        },
        parentId: {
            type: 'integer',
            format: 'int32'
        },
        level: {
            type: 'integer',
            format: 'int32'
        },
        path: {
            type: 'string'
        },
        sortOrder: {
            type: 'integer',
            format: 'int32'
        },
        trashed: {
            type: 'boolean'
        },
        description: {
            type: 'string',
            nullable: true
        },
        icon: {
            type: 'string',
            nullable: true
        },
        thumbnail: {
            type: 'string',
            nullable: true
        },
        allowedAsRoot: {
            type: 'boolean'
        },
        listView: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        isElement: {
            type: 'boolean'
        },
        allowedContentTypes: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/ContentTypeSortModel'
                    }
                ]
            },
            nullable: true
        },
        propertyGroups: {
            uniqueItems: true,
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/PropertyGroupModel'
                    }
                ]
            }
        },
        propertyTypes: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/PropertyTypeModel'
                    }
                ]
            },
            readOnly: true
        },
        noGroupPropertyTypes: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/PropertyTypeModel'
                    }
                ]
            }
        },
        removedContentTypes: {
            type: 'array',
            items: {
                type: 'integer',
                format: 'int32'
            },
            readOnly: true
        },
        contentTypeComposition: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/ContentTypeModel'
                    },
                    {
                        '$ref': '#/components/schemas/MediaTypeModel'
                    },
                    {
                        '$ref': '#/components/schemas/MemberTypeModel'
                    }
                ]
            }
        },
        compositionPropertyGroups: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/PropertyGroupModel'
                    }
                ]
            },
            readOnly: true
        },
        compositionPropertyTypes: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/PropertyTypeModel'
                    }
                ]
            },
            readOnly: true
        },
        supportsPublishing: {
            type: 'boolean',
            readOnly: true
        },
        variations: {
            '$ref': '#/components/schemas/ContentVariationModel'
        },
        alias: {
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const MemberTypesSchema = {
    enum: ['Constructor', 'Event', 'Field', 'Method', 'Property', 'TypeInfo', 'Custom', 'NestedType', 'All'],
    type: 'string'
} as const;

export const MethodAttributesSchema = {
    enum: ['PrivateScope', 'ReuseSlot', 'Private', 'FamANDAssem', 'Assembly', 'Family', 'FamORAssem', 'Public', 'MemberAccessMask', 'UnmanagedExport', 'Static', 'Final', 'Virtual', 'HideBySig', 'NewSlot', 'VtableLayoutMask', 'CheckAccessOnOverride', 'Abstract', 'SpecialName', 'RTSpecialName', 'PinvokeImpl', 'HasSecurity', 'RequireSecObject', 'ReservedMask'],
    type: 'string'
} as const;

export const MethodBaseSchema = {
    required: ['attributes', 'callingConvention', 'containsGenericParameters', 'customAttributes', 'isAbstract', 'isAssembly', 'isCollectible', 'isConstructedGenericMethod', 'isConstructor', 'isFamily', 'isFamilyAndAssembly', 'isFamilyOrAssembly', 'isFinal', 'isGenericMethod', 'isGenericMethodDefinition', 'isHideBySig', 'isPrivate', 'isPublic', 'isSecurityCritical', 'isSecuritySafeCritical', 'isSecurityTransparent', 'isSpecialName', 'isStatic', 'isVirtual', 'memberType', 'metadataToken', 'methodHandle', 'methodImplementationFlags', 'module', 'name'],
    type: 'object',
    properties: {
        memberType: {
            '$ref': '#/components/schemas/MemberTypes'
        },
        name: {
            type: 'string',
            readOnly: true
        },
        declaringType: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/Type'
                }
            ],
            nullable: true,
            readOnly: true
        },
        reflectedType: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/Type'
                }
            ],
            nullable: true,
            readOnly: true
        },
        module: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/Module'
                }
            ],
            readOnly: true
        },
        customAttributes: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/CustomAttributeData'
                    }
                ]
            },
            readOnly: true
        },
        isCollectible: {
            type: 'boolean',
            readOnly: true
        },
        metadataToken: {
            type: 'integer',
            format: 'int32',
            readOnly: true
        },
        attributes: {
            '$ref': '#/components/schemas/MethodAttributes'
        },
        methodImplementationFlags: {
            '$ref': '#/components/schemas/MethodImplAttributes'
        },
        callingConvention: {
            '$ref': '#/components/schemas/CallingConventions'
        },
        isAbstract: {
            type: 'boolean',
            readOnly: true
        },
        isConstructor: {
            type: 'boolean',
            readOnly: true
        },
        isFinal: {
            type: 'boolean',
            readOnly: true
        },
        isHideBySig: {
            type: 'boolean',
            readOnly: true
        },
        isSpecialName: {
            type: 'boolean',
            readOnly: true
        },
        isStatic: {
            type: 'boolean',
            readOnly: true
        },
        isVirtual: {
            type: 'boolean',
            readOnly: true
        },
        isAssembly: {
            type: 'boolean',
            readOnly: true
        },
        isFamily: {
            type: 'boolean',
            readOnly: true
        },
        isFamilyAndAssembly: {
            type: 'boolean',
            readOnly: true
        },
        isFamilyOrAssembly: {
            type: 'boolean',
            readOnly: true
        },
        isPrivate: {
            type: 'boolean',
            readOnly: true
        },
        isPublic: {
            type: 'boolean',
            readOnly: true
        },
        isConstructedGenericMethod: {
            type: 'boolean',
            readOnly: true
        },
        isGenericMethod: {
            type: 'boolean',
            readOnly: true
        },
        isGenericMethodDefinition: {
            type: 'boolean',
            readOnly: true
        },
        containsGenericParameters: {
            type: 'boolean',
            readOnly: true
        },
        methodHandle: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/RuntimeMethodHandle'
                }
            ],
            readOnly: true
        },
        isSecurityCritical: {
            type: 'boolean',
            readOnly: true
        },
        isSecuritySafeCritical: {
            type: 'boolean',
            readOnly: true
        },
        isSecurityTransparent: {
            type: 'boolean',
            readOnly: true
        }
    },
    additionalProperties: false
} as const;

export const MethodImplAttributesSchema = {
    enum: ['IL', 'Managed', 'Native', 'OPTIL', 'CodeTypeMask', 'Runtime', 'ManagedMask', 'Unmanaged', 'NoInlining', 'ForwardRef', 'Synchronized', 'NoOptimization', 'PreserveSig', 'AggressiveInlining', 'AggressiveOptimization', 'InternalCall', 'MaxMethodImplVal'],
    type: 'string'
} as const;

export const MethodInfoSchema = {
    required: ['attributes', 'callingConvention', 'containsGenericParameters', 'customAttributes', 'isAbstract', 'isAssembly', 'isCollectible', 'isConstructedGenericMethod', 'isConstructor', 'isFamily', 'isFamilyAndAssembly', 'isFamilyOrAssembly', 'isFinal', 'isGenericMethod', 'isGenericMethodDefinition', 'isHideBySig', 'isPrivate', 'isPublic', 'isSecurityCritical', 'isSecuritySafeCritical', 'isSecurityTransparent', 'isSpecialName', 'isStatic', 'isVirtual', 'memberType', 'metadataToken', 'methodHandle', 'methodImplementationFlags', 'module', 'name', 'returnParameter', 'returnType', 'returnTypeCustomAttributes'],
    type: 'object',
    properties: {
        name: {
            type: 'string',
            readOnly: true
        },
        declaringType: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/Type'
                }
            ],
            nullable: true,
            readOnly: true
        },
        reflectedType: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/Type'
                }
            ],
            nullable: true,
            readOnly: true
        },
        module: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/Module'
                }
            ],
            readOnly: true
        },
        customAttributes: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/CustomAttributeData'
                    }
                ]
            },
            readOnly: true
        },
        isCollectible: {
            type: 'boolean',
            readOnly: true
        },
        metadataToken: {
            type: 'integer',
            format: 'int32',
            readOnly: true
        },
        attributes: {
            '$ref': '#/components/schemas/MethodAttributes'
        },
        methodImplementationFlags: {
            '$ref': '#/components/schemas/MethodImplAttributes'
        },
        callingConvention: {
            '$ref': '#/components/schemas/CallingConventions'
        },
        isAbstract: {
            type: 'boolean',
            readOnly: true
        },
        isConstructor: {
            type: 'boolean',
            readOnly: true
        },
        isFinal: {
            type: 'boolean',
            readOnly: true
        },
        isHideBySig: {
            type: 'boolean',
            readOnly: true
        },
        isSpecialName: {
            type: 'boolean',
            readOnly: true
        },
        isStatic: {
            type: 'boolean',
            readOnly: true
        },
        isVirtual: {
            type: 'boolean',
            readOnly: true
        },
        isAssembly: {
            type: 'boolean',
            readOnly: true
        },
        isFamily: {
            type: 'boolean',
            readOnly: true
        },
        isFamilyAndAssembly: {
            type: 'boolean',
            readOnly: true
        },
        isFamilyOrAssembly: {
            type: 'boolean',
            readOnly: true
        },
        isPrivate: {
            type: 'boolean',
            readOnly: true
        },
        isPublic: {
            type: 'boolean',
            readOnly: true
        },
        isConstructedGenericMethod: {
            type: 'boolean',
            readOnly: true
        },
        isGenericMethod: {
            type: 'boolean',
            readOnly: true
        },
        isGenericMethodDefinition: {
            type: 'boolean',
            readOnly: true
        },
        containsGenericParameters: {
            type: 'boolean',
            readOnly: true
        },
        methodHandle: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/RuntimeMethodHandle'
                }
            ],
            readOnly: true
        },
        isSecurityCritical: {
            type: 'boolean',
            readOnly: true
        },
        isSecuritySafeCritical: {
            type: 'boolean',
            readOnly: true
        },
        isSecurityTransparent: {
            type: 'boolean',
            readOnly: true
        },
        memberType: {
            '$ref': '#/components/schemas/MemberTypes'
        },
        returnParameter: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ParameterInfo'
                }
            ],
            readOnly: true
        },
        returnType: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/Type'
                }
            ],
            readOnly: true
        },
        returnTypeCustomAttributes: {
            '$ref': '#/components/schemas/ICustomAttributeProvider'
        }
    },
    additionalProperties: false
} as const;

export const ModuleSchema = {
    required: ['assembly', 'customAttributes', 'fullyQualifiedName', 'mdStreamVersion', 'metadataToken', 'moduleHandle', 'moduleVersionId', 'name', 'scopeName'],
    type: 'object',
    properties: {
        assembly: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/Assembly'
                }
            ],
            readOnly: true
        },
        fullyQualifiedName: {
            type: 'string',
            readOnly: true
        },
        name: {
            type: 'string',
            readOnly: true
        },
        mdStreamVersion: {
            type: 'integer',
            format: 'int32',
            readOnly: true
        },
        moduleVersionId: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        scopeName: {
            type: 'string',
            readOnly: true
        },
        moduleHandle: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ModuleHandle'
                }
            ],
            readOnly: true
        },
        customAttributes: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/CustomAttributeData'
                    }
                ]
            },
            readOnly: true
        },
        metadataToken: {
            type: 'integer',
            format: 'int32',
            readOnly: true
        }
    },
    additionalProperties: false
} as const;

export const ModuleHandleSchema = {
    required: ['mdStreamVersion'],
    type: 'object',
    properties: {
        mdStreamVersion: {
            type: 'integer',
            format: 'int32',
            readOnly: true
        }
    },
    additionalProperties: false
} as const;

export const ParameterAttributesSchema = {
    enum: ['None', 'In', 'Out', 'Lcid', 'Retval', 'Optional', 'HasDefault', 'HasFieldMarshal', 'Reserved3', 'Reserved4', 'ReservedMask'],
    type: 'string'
} as const;

export const ParameterInfoSchema = {
    required: ['attributes', 'customAttributes', 'hasDefaultValue', 'isIn', 'isLcid', 'isOptional', 'isOut', 'isRetval', 'member', 'metadataToken', 'parameterType', 'position'],
    type: 'object',
    properties: {
        attributes: {
            '$ref': '#/components/schemas/ParameterAttributes'
        },
        member: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/MemberInfo'
                }
            ],
            readOnly: true
        },
        name: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        parameterType: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/Type'
                }
            ],
            readOnly: true
        },
        position: {
            type: 'integer',
            format: 'int32',
            readOnly: true
        },
        isIn: {
            type: 'boolean',
            readOnly: true
        },
        isLcid: {
            type: 'boolean',
            readOnly: true
        },
        isOptional: {
            type: 'boolean',
            readOnly: true
        },
        isOut: {
            type: 'boolean',
            readOnly: true
        },
        isRetval: {
            type: 'boolean',
            readOnly: true
        },
        defaultValue: {
            nullable: true,
            readOnly: true
        },
        rawDefaultValue: {
            nullable: true,
            readOnly: true
        },
        hasDefaultValue: {
            type: 'boolean',
            readOnly: true
        },
        customAttributes: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/CustomAttributeData'
                    }
                ]
            },
            readOnly: true
        },
        metadataToken: {
            type: 'integer',
            format: 'int32',
            readOnly: true
        }
    },
    additionalProperties: false
} as const;

export const PropertyAttributesSchema = {
    enum: ['None', 'SpecialName', 'RTSpecialName', 'HasDefault', 'Reserved2', 'Reserved3', 'Reserved4', 'ReservedMask'],
    type: 'string'
} as const;

export const PropertyGroupModelSchema = {
    required: ['alias', 'createDate', 'hasIdentity', 'id', 'key', 'sortOrder', 'type', 'updateDate'],
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int32'
        },
        key: {
            type: 'string',
            format: 'uuid'
        },
        createDate: {
            type: 'string',
            format: 'date-time'
        },
        updateDate: {
            type: 'string',
            format: 'date-time'
        },
        deleteDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        hasIdentity: {
            type: 'boolean',
            readOnly: true
        },
        type: {
            '$ref': '#/components/schemas/PropertyGroupTypeModel'
        },
        name: {
            type: 'string',
            nullable: true
        },
        alias: {
            type: 'string'
        },
        sortOrder: {
            type: 'integer',
            format: 'int32'
        },
        propertyTypes: {
            uniqueItems: true,
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/PropertyTypeModel'
                    }
                ]
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const PropertyGroupTypeModelSchema = {
    enum: ['Group', 'Tab'],
    type: 'string'
} as const;

export const PropertyInfoSchema = {
    required: ['attributes', 'canRead', 'canWrite', 'customAttributes', 'isCollectible', 'isSpecialName', 'memberType', 'metadataToken', 'module', 'name', 'propertyType'],
    type: 'object',
    properties: {
        name: {
            type: 'string',
            readOnly: true
        },
        declaringType: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/Type'
                }
            ],
            nullable: true,
            readOnly: true
        },
        reflectedType: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/Type'
                }
            ],
            nullable: true,
            readOnly: true
        },
        module: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/Module'
                }
            ],
            readOnly: true
        },
        customAttributes: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/CustomAttributeData'
                    }
                ]
            },
            readOnly: true
        },
        isCollectible: {
            type: 'boolean',
            readOnly: true
        },
        metadataToken: {
            type: 'integer',
            format: 'int32',
            readOnly: true
        },
        memberType: {
            '$ref': '#/components/schemas/MemberTypes'
        },
        propertyType: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/Type'
                }
            ],
            readOnly: true
        },
        attributes: {
            '$ref': '#/components/schemas/PropertyAttributes'
        },
        isSpecialName: {
            type: 'boolean',
            readOnly: true
        },
        canRead: {
            type: 'boolean',
            readOnly: true
        },
        canWrite: {
            type: 'boolean',
            readOnly: true
        },
        getMethod: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/MethodInfo'
                }
            ],
            nullable: true,
            readOnly: true
        },
        setMethod: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/MethodInfo'
                }
            ],
            nullable: true,
            readOnly: true
        }
    },
    additionalProperties: false
} as const;

export const PropertyTypeModelSchema = {
    required: ['alias', 'createDate', 'dataTypeId', 'dataTypeKey', 'hasIdentity', 'id', 'key', 'labelOnTop', 'mandatory', 'name', 'propertyEditorAlias', 'sortOrder', 'supportsPublishing', 'updateDate', 'valueStorageType', 'variations'],
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int32'
        },
        key: {
            type: 'string',
            format: 'uuid'
        },
        createDate: {
            type: 'string',
            format: 'date-time'
        },
        updateDate: {
            type: 'string',
            format: 'date-time'
        },
        deleteDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        hasIdentity: {
            type: 'boolean',
            readOnly: true
        },
        supportsPublishing: {
            type: 'boolean'
        },
        name: {
            type: 'string'
        },
        alias: {
            type: 'string'
        },
        description: {
            type: 'string',
            nullable: true
        },
        dataTypeId: {
            type: 'integer',
            format: 'int32'
        },
        dataTypeKey: {
            type: 'string',
            format: 'uuid'
        },
        propertyEditorAlias: {
            type: 'string'
        },
        valueStorageType: {
            '$ref': '#/components/schemas/ValueStorageTypeModel'
        },
        propertyGroupId: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/Lazy`1'
                }
            ],
            nullable: true
        },
        mandatory: {
            type: 'boolean'
        },
        mandatoryMessage: {
            type: 'string',
            nullable: true
        },
        labelOnTop: {
            type: 'boolean'
        },
        sortOrder: {
            type: 'integer',
            format: 'int32'
        },
        validationRegExp: {
            type: 'string',
            nullable: true
        },
        validationRegExpMessage: {
            type: 'string',
            nullable: true
        },
        variations: {
            '$ref': '#/components/schemas/ContentVariationModel'
        }
    },
    additionalProperties: false
} as const;

export const RuntimeFieldHandleSchema = {
    required: ['value'],
    type: 'object',
    properties: {
        value: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/IntPtr'
                }
            ],
            readOnly: true
        }
    },
    additionalProperties: false
} as const;

export const RuntimeMethodHandleSchema = {
    required: ['value'],
    type: 'object',
    properties: {
        value: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/IntPtr'
                }
            ],
            readOnly: true
        }
    },
    additionalProperties: false
} as const;

export const RuntimeTypeHandleSchema = {
    required: ['value'],
    type: 'object',
    properties: {
        value: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/IntPtr'
                }
            ],
            readOnly: true
        }
    },
    additionalProperties: false
} as const;

export const SecurityRuleSetSchema = {
    enum: ['None', 'Level1', 'Level2'],
    type: 'string'
} as const;

export const StructLayoutAttributeSchema = {
    required: ['typeId', 'value'],
    type: 'object',
    properties: {
        typeId: {
            readOnly: true
        },
        value: {
            '$ref': '#/components/schemas/LayoutKind'
        }
    },
    additionalProperties: false
} as const;

export const TemplateModelSchema = {
    required: ['alias', 'createDate', 'hasIdentity', 'id', 'isMasterTemplate', 'key', 'originalPath', 'path', 'updateDate'],
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int32'
        },
        key: {
            type: 'string',
            format: 'uuid'
        },
        createDate: {
            type: 'string',
            format: 'date-time'
        },
        updateDate: {
            type: 'string',
            format: 'date-time'
        },
        deleteDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        hasIdentity: {
            type: 'boolean',
            readOnly: true
        },
        getFileContent: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/Func`2'
                }
            ],
            nullable: true
        },
        path: {
            type: 'string'
        },
        originalPath: {
            type: 'string',
            readOnly: true
        },
        content: {
            type: 'string',
            nullable: true
        },
        virtualPath: {
            type: 'string',
            nullable: true
        },
        masterTemplateId: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/Lazy`1'
                }
            ],
            nullable: true
        },
        masterTemplateAlias: {
            type: 'string',
            nullable: true
        },
        name: {
            type: 'string',
            nullable: true
        },
        alias: {
            type: 'string'
        },
        isMasterTemplate: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const TemplateOnDiskModelSchema = {
    required: ['alias', 'createDate', 'hasIdentity', 'id', 'isMasterTemplate', 'isOnDisk', 'key', 'originalPath', 'path', 'updateDate'],
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int32'
        },
        key: {
            type: 'string',
            format: 'uuid'
        },
        createDate: {
            type: 'string',
            format: 'date-time'
        },
        updateDate: {
            type: 'string',
            format: 'date-time'
        },
        deleteDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        hasIdentity: {
            type: 'boolean',
            readOnly: true
        },
        getFileContent: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/Func`2'
                }
            ],
            nullable: true
        },
        path: {
            type: 'string'
        },
        originalPath: {
            type: 'string',
            readOnly: true
        },
        virtualPath: {
            type: 'string',
            nullable: true
        },
        masterTemplateId: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/Lazy`1'
                }
            ],
            nullable: true
        },
        masterTemplateAlias: {
            type: 'string',
            nullable: true
        },
        name: {
            type: 'string',
            nullable: true
        },
        alias: {
            type: 'string'
        },
        isMasterTemplate: {
            type: 'boolean'
        },
        isOnDisk: {
            type: 'boolean'
        },
        content: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const TypeSchema = {
    required: ['assembly', 'attributes', 'containsGenericParameters', 'customAttributes', 'genericParameterAttributes', 'genericParameterPosition', 'genericTypeArguments', 'guid', 'hasElementType', 'isAbstract', 'isAnsiClass', 'isArray', 'isAutoClass', 'isAutoLayout', 'isByRef', 'isByRefLike', 'isClass', 'isCollectible', 'isCOMObject', 'isConstructedGenericType', 'isContextful', 'isEnum', 'isExplicitLayout', 'isFunctionPointer', 'isGenericMethodParameter', 'isGenericParameter', 'isGenericType', 'isGenericTypeDefinition', 'isGenericTypeParameter', 'isImport', 'isInterface', 'isLayoutSequential', 'isMarshalByRef', 'isNested', 'isNestedAssembly', 'isNestedFamANDAssem', 'isNestedFamily', 'isNestedFamORAssem', 'isNestedPrivate', 'isNestedPublic', 'isNotPublic', 'isPointer', 'isPrimitive', 'isPublic', 'isSealed', 'isSecurityCritical', 'isSecuritySafeCritical', 'isSecurityTransparent', 'isSerializable', 'isSignatureType', 'isSpecialName', 'isSZArray', 'isTypeDefinition', 'isUnicodeClass', 'isUnmanagedFunctionPointer', 'isValueType', 'isVariableBoundArray', 'isVisible', 'memberType', 'metadataToken', 'module', 'name', 'typeHandle', 'underlyingSystemType'],
    type: 'object',
    properties: {
        name: {
            type: 'string',
            readOnly: true
        },
        customAttributes: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/CustomAttributeData'
                    }
                ]
            },
            readOnly: true
        },
        isCollectible: {
            type: 'boolean',
            readOnly: true
        },
        metadataToken: {
            type: 'integer',
            format: 'int32',
            readOnly: true
        },
        memberType: {
            '$ref': '#/components/schemas/MemberTypes'
        },
        namespace: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        assemblyQualifiedName: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        fullName: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        assembly: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/Assembly'
                }
            ],
            readOnly: true
        },
        module: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/Module'
                }
            ],
            readOnly: true
        },
        isInterface: {
            type: 'boolean',
            readOnly: true
        },
        isNested: {
            type: 'boolean',
            readOnly: true
        },
        declaringType: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/Type'
                }
            ],
            nullable: true,
            readOnly: true
        },
        declaringMethod: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/MethodBase'
                }
            ],
            nullable: true,
            readOnly: true
        },
        reflectedType: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/Type'
                }
            ],
            nullable: true,
            readOnly: true
        },
        underlyingSystemType: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/Type'
                }
            ],
            readOnly: true
        },
        isTypeDefinition: {
            type: 'boolean',
            readOnly: true
        },
        isArray: {
            type: 'boolean',
            readOnly: true
        },
        isByRef: {
            type: 'boolean',
            readOnly: true
        },
        isPointer: {
            type: 'boolean',
            readOnly: true
        },
        isConstructedGenericType: {
            type: 'boolean',
            readOnly: true
        },
        isGenericParameter: {
            type: 'boolean',
            readOnly: true
        },
        isGenericTypeParameter: {
            type: 'boolean',
            readOnly: true
        },
        isGenericMethodParameter: {
            type: 'boolean',
            readOnly: true
        },
        isGenericType: {
            type: 'boolean',
            readOnly: true
        },
        isGenericTypeDefinition: {
            type: 'boolean',
            readOnly: true
        },
        isSZArray: {
            type: 'boolean',
            readOnly: true
        },
        isVariableBoundArray: {
            type: 'boolean',
            readOnly: true
        },
        isByRefLike: {
            type: 'boolean',
            readOnly: true
        },
        isFunctionPointer: {
            type: 'boolean',
            readOnly: true
        },
        isUnmanagedFunctionPointer: {
            type: 'boolean',
            readOnly: true
        },
        hasElementType: {
            type: 'boolean',
            readOnly: true
        },
        genericTypeArguments: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/Type'
                    }
                ]
            },
            readOnly: true
        },
        genericParameterPosition: {
            type: 'integer',
            format: 'int32',
            readOnly: true
        },
        genericParameterAttributes: {
            '$ref': '#/components/schemas/GenericParameterAttributes'
        },
        attributes: {
            '$ref': '#/components/schemas/TypeAttributes'
        },
        isAbstract: {
            type: 'boolean',
            readOnly: true
        },
        isImport: {
            type: 'boolean',
            readOnly: true
        },
        isSealed: {
            type: 'boolean',
            readOnly: true
        },
        isSpecialName: {
            type: 'boolean',
            readOnly: true
        },
        isClass: {
            type: 'boolean',
            readOnly: true
        },
        isNestedAssembly: {
            type: 'boolean',
            readOnly: true
        },
        isNestedFamANDAssem: {
            type: 'boolean',
            readOnly: true
        },
        isNestedFamily: {
            type: 'boolean',
            readOnly: true
        },
        isNestedFamORAssem: {
            type: 'boolean',
            readOnly: true
        },
        isNestedPrivate: {
            type: 'boolean',
            readOnly: true
        },
        isNestedPublic: {
            type: 'boolean',
            readOnly: true
        },
        isNotPublic: {
            type: 'boolean',
            readOnly: true
        },
        isPublic: {
            type: 'boolean',
            readOnly: true
        },
        isAutoLayout: {
            type: 'boolean',
            readOnly: true
        },
        isExplicitLayout: {
            type: 'boolean',
            readOnly: true
        },
        isLayoutSequential: {
            type: 'boolean',
            readOnly: true
        },
        isAnsiClass: {
            type: 'boolean',
            readOnly: true
        },
        isAutoClass: {
            type: 'boolean',
            readOnly: true
        },
        isUnicodeClass: {
            type: 'boolean',
            readOnly: true
        },
        isCOMObject: {
            type: 'boolean',
            readOnly: true
        },
        isContextful: {
            type: 'boolean',
            readOnly: true
        },
        isEnum: {
            type: 'boolean',
            readOnly: true
        },
        isMarshalByRef: {
            type: 'boolean',
            readOnly: true
        },
        isPrimitive: {
            type: 'boolean',
            readOnly: true
        },
        isValueType: {
            type: 'boolean',
            readOnly: true
        },
        isSignatureType: {
            type: 'boolean',
            readOnly: true
        },
        isSecurityCritical: {
            type: 'boolean',
            readOnly: true
        },
        isSecuritySafeCritical: {
            type: 'boolean',
            readOnly: true
        },
        isSecurityTransparent: {
            type: 'boolean',
            readOnly: true
        },
        structLayoutAttribute: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/StructLayoutAttribute'
                }
            ],
            nullable: true,
            readOnly: true
        },
        typeInitializer: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ConstructorInfo'
                }
            ],
            nullable: true,
            readOnly: true
        },
        typeHandle: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/RuntimeTypeHandle'
                }
            ],
            readOnly: true
        },
        guid: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        baseType: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/Type'
                }
            ],
            nullable: true,
            readOnly: true
        },
        isSerializable: {
            type: 'boolean',
            readOnly: true,
            deprecated: true
        },
        containsGenericParameters: {
            type: 'boolean',
            readOnly: true
        },
        isVisible: {
            type: 'boolean',
            readOnly: true
        }
    },
    additionalProperties: false
} as const;

export const TypeAttributesSchema = {
    enum: ['NotPublic', 'AutoLayout', 'AnsiClass', 'Class', 'Public', 'NestedPublic', 'NestedPrivate', 'NestedFamily', 'NestedAssembly', 'NestedFamANDAssem', 'VisibilityMask', 'NestedFamORAssem', 'SequentialLayout', 'ExplicitLayout', 'LayoutMask', 'Interface', 'ClassSemanticsMask', 'Abstract', 'Sealed', 'SpecialName', 'RTSpecialName', 'Import', 'Serializable', 'WindowsRuntime', 'UnicodeClass', 'AutoClass', 'StringFormatMask', 'CustomFormatClass', 'HasSecurity', 'ReservedMask', 'BeforeFieldInit', 'CustomFormatMask'],
    type: 'string'
} as const;

export const TypeInfoSchema = {
    required: ['assembly', 'attributes', 'containsGenericParameters', 'customAttributes', 'declaredConstructors', 'declaredEvents', 'declaredFields', 'declaredMembers', 'declaredMethods', 'declaredNestedTypes', 'declaredProperties', 'genericParameterAttributes', 'genericParameterPosition', 'genericTypeArguments', 'genericTypeParameters', 'guid', 'hasElementType', 'implementedInterfaces', 'isAbstract', 'isAnsiClass', 'isArray', 'isAutoClass', 'isAutoLayout', 'isByRef', 'isByRefLike', 'isClass', 'isCollectible', 'isCOMObject', 'isConstructedGenericType', 'isContextful', 'isEnum', 'isExplicitLayout', 'isFunctionPointer', 'isGenericMethodParameter', 'isGenericParameter', 'isGenericType', 'isGenericTypeDefinition', 'isGenericTypeParameter', 'isImport', 'isInterface', 'isLayoutSequential', 'isMarshalByRef', 'isNested', 'isNestedAssembly', 'isNestedFamANDAssem', 'isNestedFamily', 'isNestedFamORAssem', 'isNestedPrivate', 'isNestedPublic', 'isNotPublic', 'isPointer', 'isPrimitive', 'isPublic', 'isSealed', 'isSecurityCritical', 'isSecuritySafeCritical', 'isSecurityTransparent', 'isSerializable', 'isSignatureType', 'isSpecialName', 'isSZArray', 'isTypeDefinition', 'isUnicodeClass', 'isUnmanagedFunctionPointer', 'isValueType', 'isVariableBoundArray', 'isVisible', 'memberType', 'metadataToken', 'module', 'name', 'typeHandle', 'underlyingSystemType'],
    type: 'object',
    properties: {
        name: {
            type: 'string',
            readOnly: true
        },
        customAttributes: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/CustomAttributeData'
                    }
                ]
            },
            readOnly: true
        },
        isCollectible: {
            type: 'boolean',
            readOnly: true
        },
        metadataToken: {
            type: 'integer',
            format: 'int32',
            readOnly: true
        },
        memberType: {
            '$ref': '#/components/schemas/MemberTypes'
        },
        namespace: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        assemblyQualifiedName: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        fullName: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        assembly: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/Assembly'
                }
            ],
            readOnly: true
        },
        module: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/Module'
                }
            ],
            readOnly: true
        },
        isInterface: {
            type: 'boolean',
            readOnly: true
        },
        isNested: {
            type: 'boolean',
            readOnly: true
        },
        declaringType: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/Type'
                }
            ],
            nullable: true,
            readOnly: true
        },
        declaringMethod: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/MethodBase'
                }
            ],
            nullable: true,
            readOnly: true
        },
        reflectedType: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/Type'
                }
            ],
            nullable: true,
            readOnly: true
        },
        underlyingSystemType: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/Type'
                }
            ],
            readOnly: true
        },
        isTypeDefinition: {
            type: 'boolean',
            readOnly: true
        },
        isArray: {
            type: 'boolean',
            readOnly: true
        },
        isByRef: {
            type: 'boolean',
            readOnly: true
        },
        isPointer: {
            type: 'boolean',
            readOnly: true
        },
        isConstructedGenericType: {
            type: 'boolean',
            readOnly: true
        },
        isGenericParameter: {
            type: 'boolean',
            readOnly: true
        },
        isGenericTypeParameter: {
            type: 'boolean',
            readOnly: true
        },
        isGenericMethodParameter: {
            type: 'boolean',
            readOnly: true
        },
        isGenericType: {
            type: 'boolean',
            readOnly: true
        },
        isGenericTypeDefinition: {
            type: 'boolean',
            readOnly: true
        },
        isSZArray: {
            type: 'boolean',
            readOnly: true
        },
        isVariableBoundArray: {
            type: 'boolean',
            readOnly: true
        },
        isByRefLike: {
            type: 'boolean',
            readOnly: true
        },
        isFunctionPointer: {
            type: 'boolean',
            readOnly: true
        },
        isUnmanagedFunctionPointer: {
            type: 'boolean',
            readOnly: true
        },
        hasElementType: {
            type: 'boolean',
            readOnly: true
        },
        genericTypeArguments: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/Type'
                    }
                ]
            },
            readOnly: true
        },
        genericParameterPosition: {
            type: 'integer',
            format: 'int32',
            readOnly: true
        },
        genericParameterAttributes: {
            '$ref': '#/components/schemas/GenericParameterAttributes'
        },
        attributes: {
            '$ref': '#/components/schemas/TypeAttributes'
        },
        isAbstract: {
            type: 'boolean',
            readOnly: true
        },
        isImport: {
            type: 'boolean',
            readOnly: true
        },
        isSealed: {
            type: 'boolean',
            readOnly: true
        },
        isSpecialName: {
            type: 'boolean',
            readOnly: true
        },
        isClass: {
            type: 'boolean',
            readOnly: true
        },
        isNestedAssembly: {
            type: 'boolean',
            readOnly: true
        },
        isNestedFamANDAssem: {
            type: 'boolean',
            readOnly: true
        },
        isNestedFamily: {
            type: 'boolean',
            readOnly: true
        },
        isNestedFamORAssem: {
            type: 'boolean',
            readOnly: true
        },
        isNestedPrivate: {
            type: 'boolean',
            readOnly: true
        },
        isNestedPublic: {
            type: 'boolean',
            readOnly: true
        },
        isNotPublic: {
            type: 'boolean',
            readOnly: true
        },
        isPublic: {
            type: 'boolean',
            readOnly: true
        },
        isAutoLayout: {
            type: 'boolean',
            readOnly: true
        },
        isExplicitLayout: {
            type: 'boolean',
            readOnly: true
        },
        isLayoutSequential: {
            type: 'boolean',
            readOnly: true
        },
        isAnsiClass: {
            type: 'boolean',
            readOnly: true
        },
        isAutoClass: {
            type: 'boolean',
            readOnly: true
        },
        isUnicodeClass: {
            type: 'boolean',
            readOnly: true
        },
        isCOMObject: {
            type: 'boolean',
            readOnly: true
        },
        isContextful: {
            type: 'boolean',
            readOnly: true
        },
        isEnum: {
            type: 'boolean',
            readOnly: true
        },
        isMarshalByRef: {
            type: 'boolean',
            readOnly: true
        },
        isPrimitive: {
            type: 'boolean',
            readOnly: true
        },
        isValueType: {
            type: 'boolean',
            readOnly: true
        },
        isSignatureType: {
            type: 'boolean',
            readOnly: true
        },
        isSecurityCritical: {
            type: 'boolean',
            readOnly: true
        },
        isSecuritySafeCritical: {
            type: 'boolean',
            readOnly: true
        },
        isSecurityTransparent: {
            type: 'boolean',
            readOnly: true
        },
        structLayoutAttribute: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/StructLayoutAttribute'
                }
            ],
            nullable: true,
            readOnly: true
        },
        typeInitializer: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ConstructorInfo'
                }
            ],
            nullable: true,
            readOnly: true
        },
        typeHandle: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/RuntimeTypeHandle'
                }
            ],
            readOnly: true
        },
        guid: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        baseType: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/Type'
                }
            ],
            nullable: true,
            readOnly: true
        },
        isSerializable: {
            type: 'boolean',
            readOnly: true,
            deprecated: true
        },
        containsGenericParameters: {
            type: 'boolean',
            readOnly: true
        },
        isVisible: {
            type: 'boolean',
            readOnly: true
        },
        genericTypeParameters: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/Type'
                    }
                ]
            },
            readOnly: true
        },
        declaredConstructors: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/ConstructorInfo'
                    }
                ]
            },
            readOnly: true
        },
        declaredEvents: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/EventInfo'
                    }
                ]
            },
            readOnly: true
        },
        declaredFields: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/FieldInfo'
                    }
                ]
            },
            readOnly: true
        },
        declaredMembers: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/MemberInfo'
                    }
                ]
            },
            readOnly: true
        },
        declaredMethods: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/MethodInfo'
                    }
                ]
            },
            readOnly: true
        },
        declaredNestedTypes: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/TypeInfo'
                    }
                ]
            },
            readOnly: true
        },
        declaredProperties: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/PropertyInfo'
                    }
                ]
            },
            readOnly: true
        },
        implementedInterfaces: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/Type'
                    }
                ]
            },
            readOnly: true
        }
    },
    additionalProperties: false
} as const;

export const ValueStorageTypeModelSchema = {
    enum: ['Ntext', 'Nvarchar', 'Integer', 'Date', 'Decimal'],
    type: 'string'
} as const;