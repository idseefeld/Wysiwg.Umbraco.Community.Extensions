// This file is auto-generated by @hey-api/openapi-ts

export type AllowedDocumentTypeModel = {
    id: string;
    name: string;
    description?: (string) | null;
    icon?: (string) | null;
};

export type AllowedMediaTypeModel = {
    id: string;
    name: string;
    description?: (string) | null;
    icon?: (string) | null;
};

export type AuditLogResponseModel = {
    user: (ReferenceByIdModel);
    timestamp: string;
    logType: AuditTypeModel;
    comment?: (string) | null;
    parameters?: (string) | null;
};

export type AuditTypeModel = 'New' | 'Save' | 'SaveVariant' | 'Open' | 'Delete' | 'Publish' | 'PublishVariant' | 'SendToPublish' | 'SendToPublishVariant' | 'Unpublish' | 'UnpublishVariant' | 'Move' | 'Copy' | 'AssignDomain' | 'PublicAccess' | 'Sort' | 'Notify' | 'System' | 'RollBack' | 'PackagerInstall' | 'PackagerUninstall' | 'Custom' | 'ContentVersionPreventCleanup' | 'ContentVersionEnableCleanup';

export type AvailableDocumentTypeCompositionResponseModel = {
    id: string;
    name: string;
    icon: string;
    folderPath: Array<(string)>;
    isCompatible: boolean;
};

export type AvailableMediaTypeCompositionResponseModel = {
    id: string;
    name: string;
    icon: string;
    folderPath: Array<(string)>;
    isCompatible: boolean;
};

export type AvailableMemberTypeCompositionResponseModel = {
    id: string;
    name: string;
    icon: string;
    folderPath: Array<(string)>;
    isCompatible: boolean;
};

export type CalculatedUserStartNodesResponseModel = {
    id: string;
    documentStartNodeIds: Array<(ReferenceByIdModel)>;
    hasDocumentRootAccess: boolean;
    mediaStartNodeIds: Array<(ReferenceByIdModel)>;
    hasMediaRootAccess: boolean;
};

export type ChangePasswordCurrentUserRequestModel = {
    newPassword: string;
    oldPassword?: (string) | null;
};

export type ChangePasswordUserRequestModel = {
    newPassword: string;
};

export type CompositionTypeModel = 'Composition' | 'Inheritance';

export type ConsentLevelPresentationModel = {
    level: TelemetryLevelModel;
    description: string;
};

export type CopyDataTypeRequestModel = {
    target?: ((ReferenceByIdModel) | null);
};

export type CopyDocumentRequestModel = {
    target?: ((ReferenceByIdModel) | null);
    relateToOriginal: boolean;
    includeDescendants: boolean;
};

export type CopyDocumentTypeRequestModel = {
    target?: ((ReferenceByIdModel) | null);
};

export type CopyMediaTypeRequestModel = {
    target?: ((ReferenceByIdModel) | null);
};

export type CreateDataTypeRequestModel = {
    name: string;
    editorAlias: string;
    editorUiAlias: string;
    values: Array<(DataTypePropertyPresentationModel)>;
    id?: (string) | null;
    parent?: ((ReferenceByIdModel) | null);
};

export type CreateDictionaryItemRequestModel = {
    name: string;
    translations: Array<(DictionaryItemTranslationModel)>;
    id?: (string) | null;
    parent?: ((ReferenceByIdModel) | null);
};

export type CreateDocumentBlueprintFromDocumentRequestModel = {
    document: (ReferenceByIdModel);
    id?: (string) | null;
    name: string;
    parent?: ((ReferenceByIdModel) | null);
};

export type CreateDocumentBlueprintRequestModel = {
    values: Array<(DocumentValueModel)>;
    variants: Array<(DocumentVariantRequestModel)>;
    id?: (string) | null;
    parent?: ((ReferenceByIdModel) | null);
    documentType: (ReferenceByIdModel);
};

export type CreateDocumentRequestModel = {
    values: Array<(DocumentValueModel)>;
    variants: Array<(DocumentVariantRequestModel)>;
    id?: (string) | null;
    parent?: ((ReferenceByIdModel) | null);
    documentType: (ReferenceByIdModel);
    template: ((ReferenceByIdModel) | null);
};

export type CreateDocumentTypePropertyTypeContainerRequestModel = {
    id: string;
    parent?: ((ReferenceByIdModel) | null);
    name?: (string) | null;
    type: string;
    sortOrder: number;
};

export type CreateDocumentTypePropertyTypeRequestModel = {
    id: string;
    container?: ((ReferenceByIdModel) | null);
    sortOrder: number;
    alias: string;
    name: string;
    description?: (string) | null;
    dataType: (ReferenceByIdModel);
    variesByCulture: boolean;
    variesBySegment: boolean;
    validation: (PropertyTypeValidationModel);
    appearance: (PropertyTypeAppearanceModel);
};

export type CreateDocumentTypeRequestModel = {
    alias: string;
    name: string;
    description?: (string) | null;
    icon: string;
    allowedAsRoot: boolean;
    variesByCulture: boolean;
    variesBySegment: boolean;
    collection?: ((ReferenceByIdModel) | null);
    isElement: boolean;
    properties: Array<(CreateDocumentTypePropertyTypeRequestModel)>;
    containers: Array<(CreateDocumentTypePropertyTypeContainerRequestModel)>;
    id?: (string) | null;
    parent?: ((ReferenceByIdModel) | null);
    allowedTemplates: Array<(ReferenceByIdModel)>;
    defaultTemplate?: ((ReferenceByIdModel) | null);
    cleanup: (DocumentTypeCleanupModel);
    allowedDocumentTypes: Array<(DocumentTypeSortModel)>;
    compositions: Array<(DocumentTypeCompositionModel)>;
};

export type CreateFolderRequestModel = {
    name: string;
    id?: (string) | null;
    parent?: ((ReferenceByIdModel) | null);
};

export type CreateInitialPasswordUserRequestModel = {
    user: (ReferenceByIdModel);
    token: string;
    password: string;
};

export type CreateLanguageRequestModel = {
    name: string;
    isDefault: boolean;
    isMandatory: boolean;
    fallbackIsoCode?: (string) | null;
    isoCode: string;
};

export type CreateMediaRequestModel = {
    values: Array<(MediaValueModel)>;
    variants: Array<(MediaVariantRequestModel)>;
    id?: (string) | null;
    parent?: ((ReferenceByIdModel) | null);
    mediaType: (ReferenceByIdModel);
};

export type CreateMediaTypePropertyTypeContainerRequestModel = {
    id: string;
    parent?: ((ReferenceByIdModel) | null);
    name?: (string) | null;
    type: string;
    sortOrder: number;
};

export type CreateMediaTypePropertyTypeRequestModel = {
    id: string;
    container?: ((ReferenceByIdModel) | null);
    sortOrder: number;
    alias: string;
    name: string;
    description?: (string) | null;
    dataType: (ReferenceByIdModel);
    variesByCulture: boolean;
    variesBySegment: boolean;
    validation: (PropertyTypeValidationModel);
    appearance: (PropertyTypeAppearanceModel);
};

export type CreateMediaTypeRequestModel = {
    alias: string;
    name: string;
    description?: (string) | null;
    icon: string;
    allowedAsRoot: boolean;
    variesByCulture: boolean;
    variesBySegment: boolean;
    isElement: boolean;
    properties: Array<(CreateMediaTypePropertyTypeRequestModel)>;
    containers: Array<(CreateMediaTypePropertyTypeContainerRequestModel)>;
    id?: (string) | null;
    parent?: ((ReferenceByIdModel) | null);
    allowedMediaTypes: Array<(MediaTypeSortModel)>;
    compositions: Array<(MediaTypeCompositionModel)>;
    collection?: ((ReferenceByIdModel) | null);
};

export type CreateMemberGroupRequestModel = {
    name: string;
    id?: (string) | null;
};

export type CreateMemberRequestModel = {
    values: Array<(MemberValueModel)>;
    variants: Array<(MemberVariantRequestModel)>;
    id?: (string) | null;
    email: string;
    username: string;
    password: string;
    memberType: (ReferenceByIdModel);
    groups?: Array<(string)> | null;
    isApproved: boolean;
};

export type CreateMemberTypePropertyTypeContainerRequestModel = {
    id: string;
    parent?: ((ReferenceByIdModel) | null);
    name?: (string) | null;
    type: string;
    sortOrder: number;
};

export type CreateMemberTypePropertyTypeRequestModel = {
    id: string;
    container?: ((ReferenceByIdModel) | null);
    sortOrder: number;
    alias: string;
    name: string;
    description?: (string) | null;
    dataType: (ReferenceByIdModel);
    variesByCulture: boolean;
    variesBySegment: boolean;
    validation: (PropertyTypeValidationModel);
    appearance: (PropertyTypeAppearanceModel);
    isSensitive: boolean;
    visibility: (MemberTypePropertyTypeVisibilityModel);
};

export type CreateMemberTypeRequestModel = {
    alias: string;
    name: string;
    description?: (string) | null;
    icon: string;
    allowedAsRoot: boolean;
    variesByCulture: boolean;
    variesBySegment: boolean;
    collection?: ((ReferenceByIdModel) | null);
    isElement: boolean;
    properties: Array<(CreateMemberTypePropertyTypeRequestModel)>;
    containers: Array<(CreateMemberTypePropertyTypeContainerRequestModel)>;
    id?: (string) | null;
    compositions: Array<(MemberTypeCompositionModel)>;
};

export type CreatePackageRequestModel = {
    name: string;
    contentNodeId?: (string) | null;
    contentLoadChildNodes: boolean;
    mediaIds: Array<(string)>;
    mediaLoadChildNodes: boolean;
    documentTypes: Array<(string)>;
    mediaTypes: Array<(string)>;
    dataTypes: Array<(string)>;
    templates: Array<(string)>;
    partialViews: Array<(string)>;
    stylesheets: Array<(string)>;
    scripts: Array<(string)>;
    languages: Array<(string)>;
    dictionaryItems: Array<(string)>;
    id?: (string) | null;
};

export type CreatePartialViewFolderRequestModel = {
    name: string;
    parent?: ((FileSystemFolderModel) | null);
};

export type CreatePartialViewRequestModel = {
    name: string;
    parent?: ((FileSystemFolderModel) | null);
    content: string;
};

export type CreateScriptFolderRequestModel = {
    name: string;
    parent?: ((FileSystemFolderModel) | null);
};

export type CreateScriptRequestModel = {
    name: string;
    parent?: ((FileSystemFolderModel) | null);
    content: string;
};

export type CreateStylesheetFolderRequestModel = {
    name: string;
    parent?: ((FileSystemFolderModel) | null);
};

export type CreateStylesheetRequestModel = {
    name: string;
    parent?: ((FileSystemFolderModel) | null);
    content: string;
};

export type CreateTemplateRequestModel = {
    name: string;
    alias: string;
    content?: (string) | null;
    id?: (string) | null;
};

export type CreateUserClientCredentialsRequestModel = {
    clientId: string;
    clientSecret: string;
};

export type CreateUserDataRequestModel = {
    group: string;
    identifier: string;
    value: string;
    key?: (string) | null;
};

export type CreateUserGroupRequestModel = {
    name: string;
    alias: string;
    icon?: (string) | null;
    sections: Array<(string)>;
    languages: Array<(string)>;
    hasAccessToAllLanguages: boolean;
    documentStartNode?: ((ReferenceByIdModel) | null);
    documentRootAccess: boolean;
    mediaStartNode?: ((ReferenceByIdModel) | null);
    mediaRootAccess: boolean;
    fallbackPermissions: Array<(string)>;
    permissions: Array<(DocumentPermissionPresentationModel | DocumentPropertyValuePermissionPresentationModel | UnknownTypePermissionPresentationModel)>;
    id?: (string) | null;
};

export type CreateUserRequestModel = {
    email: string;
    userName: string;
    name: string;
    userGroupIds: Array<(ReferenceByIdModel)>;
    id?: (string) | null;
    kind: UserKindModel;
};

export type CreateWebhookRequestModel = {
    enabled: boolean;
    name?: (string) | null;
    description?: (string) | null;
    url: string;
    contentTypeKeys: Array<(string)>;
    headers: {
        [key: string]: (string);
    };
    id?: (string) | null;
    events: Array<(string)>;
};

export type CultureAndScheduleRequestModel = {
    culture?: (string) | null;
    schedule?: ((ScheduleRequestModel) | null);
};

export type CultureReponseModel = {
    name: string;
    englishName: string;
};

export type CurrentUserConfigurationResponseModel = {
    keepUserLoggedIn: boolean;
    passwordConfiguration: (PasswordConfigurationResponseModel);
    allowChangePassword: boolean;
    allowTwoFactor: boolean;
};

export type CurrentUserResponseModel = {
    email: string;
    userName: string;
    name: string;
    userGroupIds: Array<(ReferenceByIdModel)>;
    id: string;
    languageIsoCode: (string) | null;
    documentStartNodeIds: Array<(ReferenceByIdModel)>;
    hasDocumentRootAccess: boolean;
    mediaStartNodeIds: Array<(ReferenceByIdModel)>;
    hasMediaRootAccess: boolean;
    avatarUrls: Array<(string)>;
    languages: Array<(string)>;
    hasAccessToAllLanguages: boolean;
    hasAccessToSensitiveData: boolean;
    fallbackPermissions: Array<(string)>;
    permissions: Array<(DocumentPermissionPresentationModel | DocumentPropertyValuePermissionPresentationModel | UnknownTypePermissionPresentationModel)>;
    allowedSections: Array<(string)>;
    isAdmin: boolean;
};

export type DataTypeChangeModeModel = 'True' | 'False' | 'FalseWithHelpText';

export type DataTypeContentTypeReferenceModel = {
    id: string;
    type: (string) | null;
    name: (string) | null;
    icon: (string) | null;
};

export type DataTypeItemResponseModel = {
    id: string;
    name: string;
    editorUiAlias?: (string) | null;
    editorAlias: string;
    isDeletable: boolean;
};

export type DataTypePropertyPresentationModel = {
    alias: string;
    value?: unknown;
};

export type DataTypePropertyReferenceModel = {
    name: string;
    alias: string;
};

export type DataTypeReferenceResponseModel = {
    contentType: (DataTypeContentTypeReferenceModel);
    properties: Array<(DataTypePropertyReferenceModel)>;
};

export type DataTypeResponseModel = {
    name: string;
    editorAlias: string;
    editorUiAlias: string;
    values: Array<(DataTypePropertyPresentationModel)>;
    id: string;
    isDeletable: boolean;
    canIgnoreStartNodes: boolean;
};

export type DataTypeTreeItemResponseModel = {
    hasChildren: boolean;
    id: string;
    parent?: ((ReferenceByIdModel) | null);
    name: string;
    isFolder: boolean;
    editorUiAlias?: (string) | null;
    isDeletable: boolean;
};

export type DatabaseInstallRequestModel = {
    id: string;
    providerName: string;
    server?: (string) | null;
    name?: (string) | null;
    username?: (string) | null;
    password?: (string) | null;
    useIntegratedAuthentication: boolean;
    connectionString?: (string) | null;
    trustServerCertificate: boolean;
};

export type DatabaseSettingsPresentationModel = {
    id: string;
    sortOrder: number;
    displayName: string;
    defaultDatabaseName: string;
    providerName: string;
    isConfigured: boolean;
    requiresServer: boolean;
    serverPlaceholder: string;
    requiresCredentials: boolean;
    supportsIntegratedAuthentication: boolean;
    requiresConnectionTest: boolean;
};

export type DatatypeConfigurationResponseModel = {
    canBeChanged: DataTypeChangeModeModel;
    documentListViewId: string;
    mediaListViewId: string;
};

export type DefaultReferenceResponseModel = {
    $type: string;
    id: string;
    name?: (string) | null;
    type?: (string) | null;
    icon?: (string) | null;
};

export type DeleteUserGroupsRequestModel = {
    userGroupIds: Array<(ReferenceByIdModel)>;
};

export type DeleteUsersRequestModel = {
    userIds: Array<(ReferenceByIdModel)>;
};

export type DictionaryItemItemResponseModel = {
    id: string;
    name: string;
};

export type DictionaryItemResponseModel = {
    name: string;
    translations: Array<(DictionaryItemTranslationModel)>;
    id: string;
};

export type DictionaryItemTranslationModel = {
    isoCode: string;
    translation: string;
};

export type DictionaryOverviewResponseModel = {
    name?: (string) | null;
    id: string;
    parent?: ((ReferenceByIdModel) | null);
    translatedIsoCodes: Array<(string)>;
};

export type DirectionModel = 'Ascending' | 'Descending';

export type DisableUserRequestModel = {
    userIds: Array<(ReferenceByIdModel)>;
};

export type DocumentBlueprintItemResponseModel = {
    id: string;
    name: string;
    documentType: (DocumentTypeReferenceResponseModel);
};

export type DocumentBlueprintResponseModel = {
    values: Array<(DocumentValueResponseModel)>;
    variants: Array<(DocumentVariantResponseModel)>;
    id: string;
    documentType: (DocumentTypeReferenceResponseModel);
};

export type DocumentBlueprintTreeItemResponseModel = {
    hasChildren: boolean;
    id: string;
    parent?: ((ReferenceByIdModel) | null);
    name: string;
    isFolder: boolean;
    documentType?: ((DocumentTypeReferenceResponseModel) | null);
};

export type DocumentCollectionResponseModel = {
    values: Array<(DocumentValueResponseModel)>;
    variants: Array<(DocumentVariantResponseModel)>;
    id: string;
    creator?: (string) | null;
    sortOrder: number;
    documentType: (DocumentTypeCollectionReferenceResponseModel);
    isTrashed: boolean;
    isProtected: boolean;
    ancestors: Array<(ReferenceByIdModel)>;
    updater?: (string) | null;
};

export type DocumentConfigurationResponseModel = {
    disableDeleteWhenReferenced: boolean;
    disableUnpublishWhenReferenced: boolean;
    allowEditInvariantFromNonDefault: boolean;
    allowNonExistingSegmentsCreation: boolean;
};

export type DocumentItemResponseModel = {
    id: string;
    isTrashed: boolean;
    isProtected: boolean;
    parent?: ((ReferenceByIdModel) | null);
    hasChildren: boolean;
    documentType: (DocumentTypeReferenceResponseModel);
    variants: Array<(DocumentVariantItemResponseModel)>;
};

export type DocumentNotificationResponseModel = {
    actionId: string;
    alias: string;
    subscribed: boolean;
};

export type DocumentPermissionPresentationModel = {
    $type: string;
    document: (ReferenceByIdModel);
    verbs: Array<(string)>;
};

export type DocumentPropertyValuePermissionPresentationModel = {
    $type: string;
    documentType: (ReferenceByIdModel);
    propertyType: (ReferenceByIdModel);
    verbs: Array<(string)>;
};

export type DocumentRecycleBinItemResponseModel = {
    id: string;
    createDate: string;
    hasChildren: boolean;
    parent?: ((ItemReferenceByIdResponseModel) | null);
    documentType: (DocumentTypeReferenceResponseModel);
    variants: Array<(DocumentVariantItemResponseModel)>;
};

export type DocumentReferenceResponseModel = {
    $type: string;
    id: string;
    name?: (string) | null;
    published?: (boolean) | null;
    documentType: (TrackedReferenceDocumentTypeModel);
    variants: Array<(DocumentVariantItemResponseModel)>;
};

export type DocumentResponseModel = {
    values: Array<(DocumentValueResponseModel)>;
    variants: Array<(DocumentVariantResponseModel)>;
    id: string;
    documentType: (DocumentTypeReferenceResponseModel);
    /**
     * @deprecated
     */
    urls: Array<(DocumentUrlInfoModel)>;
    template?: ((ReferenceByIdModel) | null);
    isTrashed: boolean;
};

export type DocumentTreeItemResponseModel = {
    hasChildren: boolean;
    parent?: ((ReferenceByIdModel) | null);
    noAccess: boolean;
    isTrashed: boolean;
    id: string;
    createDate: string;
    isProtected: boolean;
    ancestors: Array<(ReferenceByIdModel)>;
    documentType: (DocumentTypeReferenceResponseModel);
    variants: Array<(DocumentVariantItemResponseModel)>;
};

export type DocumentTypeBlueprintItemResponseModel = {
    id: string;
    name: string;
};

export type DocumentTypeCleanupModel = {
    preventCleanup: boolean;
    keepAllVersionsNewerThanDays?: (number) | null;
    keepLatestVersionPerDayForDays?: (number) | null;
};

export type DocumentTypeCollectionReferenceResponseModel = {
    id: string;
    alias: string;
    icon: string;
};

export type DocumentTypeCompositionModel = {
    documentType: (ReferenceByIdModel);
    compositionType: CompositionTypeModel;
};

export type DocumentTypeCompositionRequestModel = {
    id?: (string) | null;
    currentPropertyAliases: Array<(string)>;
    currentCompositeIds: Array<(string)>;
    isElement: boolean;
};

export type DocumentTypeCompositionResponseModel = {
    id: string;
    name: string;
    icon: string;
};

export type DocumentTypeConfigurationResponseModel = {
    dataTypesCanBeChanged: DataTypeChangeModeModel;
    disableTemplates: boolean;
    useSegments: boolean;
    reservedFieldNames: Array<(string)>;
};

export type DocumentTypeItemResponseModel = {
    id: string;
    name: string;
    isElement: boolean;
    icon?: (string) | null;
    description?: (string) | null;
};

export type DocumentTypePropertyTypeContainerResponseModel = {
    id: string;
    parent?: ((ReferenceByIdModel) | null);
    name?: (string) | null;
    type: string;
    sortOrder: number;
};

export type DocumentTypePropertyTypeReferenceResponseModel = {
    $type: string;
    id: string;
    name?: (string) | null;
    alias?: (string) | null;
    documentType: (TrackedReferenceDocumentTypeModel);
};

export type DocumentTypePropertyTypeResponseModel = {
    id: string;
    container?: ((ReferenceByIdModel) | null);
    sortOrder: number;
    alias: string;
    name: string;
    description?: (string) | null;
    dataType: (ReferenceByIdModel);
    variesByCulture: boolean;
    variesBySegment: boolean;
    validation: (PropertyTypeValidationModel);
    appearance: (PropertyTypeAppearanceModel);
};

export type DocumentTypeReferenceResponseModel = {
    id: string;
    icon: string;
    collection?: ((ReferenceByIdModel) | null);
};

export type DocumentTypeResponseModel = {
    alias: string;
    name: string;
    description?: (string) | null;
    icon: string;
    allowedAsRoot: boolean;
    variesByCulture: boolean;
    variesBySegment: boolean;
    collection?: ((ReferenceByIdModel) | null);
    isElement: boolean;
    properties: Array<(DocumentTypePropertyTypeResponseModel)>;
    containers: Array<(DocumentTypePropertyTypeContainerResponseModel)>;
    id: string;
    allowedTemplates: Array<(ReferenceByIdModel)>;
    defaultTemplate?: ((ReferenceByIdModel) | null);
    cleanup: (DocumentTypeCleanupModel);
    allowedDocumentTypes: Array<(DocumentTypeSortModel)>;
    compositions: Array<(DocumentTypeCompositionModel)>;
};

export type DocumentTypeSortModel = {
    documentType: (ReferenceByIdModel);
    sortOrder: number;
};

export type DocumentTypeTreeItemResponseModel = {
    hasChildren: boolean;
    id: string;
    parent?: ((ReferenceByIdModel) | null);
    name: string;
    isFolder: boolean;
    isElement: boolean;
    icon: string;
};

export type DocumentUrlInfoModel = {
    culture: (string) | null;
    url: string;
};

export type DocumentUrlInfoResponseModel = {
    id: string;
    urlInfos: Array<(DocumentUrlInfoModel)>;
};

export type DocumentValueModel = {
    culture?: (string) | null;
    segment?: (string) | null;
    alias: string;
    value?: unknown;
};

export type DocumentValueResponseModel = {
    culture?: (string) | null;
    segment?: (string) | null;
    alias: string;
    value?: unknown;
    editorAlias: string;
};

export type DocumentVariantItemResponseModel = {
    name: string;
    culture?: (string) | null;
    state: DocumentVariantStateModel;
};

export type DocumentVariantRequestModel = {
    culture?: (string) | null;
    segment?: (string) | null;
    name: string;
};

export type DocumentVariantResponseModel = {
    culture?: (string) | null;
    segment?: (string) | null;
    name: string;
    createDate: string;
    updateDate: string;
    state: DocumentVariantStateModel;
    publishDate?: (string) | null;
    scheduledPublishDate?: (string) | null;
    scheduledUnpublishDate?: (string) | null;
};

export type DocumentVariantStateModel = 'NotCreated' | 'Draft' | 'Published' | 'PublishedPendingChanges';

export type DocumentVersionItemResponseModel = {
    id: string;
    document: (ReferenceByIdModel);
    documentType: (ReferenceByIdModel);
    user: (ReferenceByIdModel);
    versionDate: string;
    isCurrentPublishedVersion: boolean;
    isCurrentDraftVersion: boolean;
    preventCleanup: boolean;
};

export type DocumentVersionResponseModel = {
    values: Array<(DocumentValueResponseModel)>;
    variants: Array<(DocumentVariantResponseModel)>;
    id: string;
    documentType: (DocumentTypeReferenceResponseModel);
    document?: ((ReferenceByIdModel) | null);
};

export type DomainPresentationModel = {
    domainName: string;
    isoCode: string;
};

export type DomainsResponseModel = {
    defaultIsoCode?: (string) | null;
    domains: Array<(DomainPresentationModel)>;
};

export type DynamicRootContextRequestModel = {
    id?: (string) | null;
    parent: (ReferenceByIdModel);
    culture?: (string) | null;
    segment?: (string) | null;
};

export type DynamicRootQueryOriginRequestModel = {
    alias: string;
    id?: (string) | null;
};

export type DynamicRootQueryRequestModel = {
    origin: (DynamicRootQueryOriginRequestModel);
    steps: Array<(DynamicRootQueryStepRequestModel)>;
};

export type DynamicRootQueryStepRequestModel = {
    alias: string;
    documentTypeIds: Array<(string)>;
};

export type DynamicRootRequestModel = {
    context: (DynamicRootContextRequestModel);
    query: (DynamicRootQueryRequestModel);
};

export type DynamicRootResponseModel = {
    roots: Array<(string)>;
};

export type EnableTwoFactorRequestModel = {
    code: string;
    secret: string;
};

export type EnableUserRequestModel = {
    userIds: Array<(ReferenceByIdModel)>;
};

export type EntityImportAnalysisResponseModel = {
    entityType: string;
    alias?: (string) | null;
    key?: (string) | null;
};

export type EventMessageTypeModel = 'Default' | 'Info' | 'Error' | 'Success' | 'Warning';

export type FieldPresentationModel = {
    name: string;
    values: Array<(string)>;
};

export type FileSystemFolderModel = {
    path: string;
};

export type FileSystemTreeItemPresentationModel = {
    hasChildren: boolean;
    name: string;
    path: string;
    parent?: ((FileSystemFolderModel) | null);
    isFolder: boolean;
};

export type FolderResponseModel = {
    name: string;
    id: string;
};

export type HealthCheckActionRequestModel = {
    healthCheck: (ReferenceByIdModel);
    alias?: (string) | null;
    name?: (string) | null;
    description?: (string) | null;
    valueRequired: boolean;
    providedValue?: (string) | null;
    providedValueValidation?: (string) | null;
    providedValueValidationRegex?: (string) | null;
    actionParameters?: {
        [key: string]: unknown;
    } | null;
};

export type HealthCheckGroupPresentationModel = {
    name: string;
    checks: Array<(HealthCheckModel)>;
};

export type HealthCheckGroupResponseModel = {
    name: string;
};

export type HealthCheckGroupWithResultResponseModel = {
    checks: Array<(HealthCheckWithResultPresentationModel)>;
};

export type HealthCheckModel = {
    id: string;
    name: string;
    description?: (string) | null;
};

export type HealthCheckResultResponseModel = {
    message: string;
    resultType: StatusResultTypeModel;
    actions?: Array<(HealthCheckActionRequestModel)> | null;
    readMoreLink?: (string) | null;
};

export type HealthCheckWithResultPresentationModel = {
    id: string;
    results?: Array<(HealthCheckResultResponseModel)> | null;
};

export type HealthStatusModel = 'Healthy' | 'Unhealthy' | 'Rebuilding' | 'Corrupt';

export type HealthStatusResponseModel = {
    status: HealthStatusModel;
    message?: (string) | null;
};

export type HelpPageResponseModel = {
    name?: (string) | null;
    description?: (string) | null;
    url?: (string) | null;
    type?: (string) | null;
};

export type ImageCropModeModel = 'Crop' | 'Max' | 'Stretch' | 'Pad' | 'BoxPad' | 'Min';

export type ImportDictionaryRequestModel = {
    temporaryFile: (ReferenceByIdModel);
    parent?: ((ReferenceByIdModel) | null);
};

export type ImportDocumentTypeRequestModel = {
    file: (ReferenceByIdModel);
};

export type ImportMediaTypeRequestModel = {
    file: (ReferenceByIdModel);
};

export type IndexResponseModel = {
    name: string;
    healthStatus: (HealthStatusResponseModel);
    canRebuild: boolean;
    searcherName: string;
    documentCount: number;
    fieldCount: number;
    providerProperties?: {
        [key: string]: unknown;
    } | null;
};

export type InstallRequestModel = {
    user: (UserInstallRequestModel);
    database: (DatabaseInstallRequestModel);
    telemetryLevel: TelemetryLevelModel;
};

export type InstallSettingsResponseModel = {
    user: (UserSettingsPresentationModel);
    databases: Array<(DatabaseSettingsPresentationModel)>;
};

export type InviteUserRequestModel = {
    email: string;
    userName: string;
    name: string;
    userGroupIds: Array<(ReferenceByIdModel)>;
    id?: (string) | null;
    message?: (string) | null;
};

export type ItemReferenceByIdResponseModel = {
    id: string;
};

export type ItemSortingRequestModel = {
    id: string;
    sortOrder: number;
};

export type LanguageItemResponseModel = {
    name: string;
    isoCode: string;
};

export type LanguageResponseModel = {
    name: string;
    isDefault: boolean;
    isMandatory: boolean;
    fallbackIsoCode?: (string) | null;
    isoCode: string;
};

export type LogLevelCountsReponseModel = {
    information: number;
    debug: number;
    warning: number;
    error: number;
    fatal: number;
};

export type LogLevelModel = 'Verbose' | 'Debug' | 'Information' | 'Warning' | 'Error' | 'Fatal';

export type LogMessagePropertyPresentationModel = {
    name: string;
    value?: (string) | null;
};

export type LogMessageResponseModel = {
    timestamp: string;
    level: LogLevelModel;
    messageTemplate?: (string) | null;
    renderedMessage?: (string) | null;
    properties: Array<(LogMessagePropertyPresentationModel)>;
    exception?: (string) | null;
};

export type LogTemplateResponseModel = {
    messageTemplate?: (string) | null;
    count: number;
};

export type LoggerResponseModel = {
    name: string;
    level: LogLevelModel;
};

export type ManifestResponseModel = {
    name: string;
    id?: (string) | null;
    version?: (string) | null;
    extensions: Array<unknown>;
};

export type MediaCollectionResponseModel = {
    values: Array<(MediaValueResponseModel)>;
    variants: Array<(MediaVariantResponseModel)>;
    id: string;
    creator?: (string) | null;
    sortOrder: number;
    mediaType: (MediaTypeCollectionReferenceResponseModel);
};

export type MediaConfigurationResponseModel = {
    disableDeleteWhenReferenced: boolean;
    disableUnpublishWhenReferenced: boolean;
};

export type MediaItemResponseModel = {
    id: string;
    isTrashed: boolean;
    parent?: ((ReferenceByIdModel) | null);
    hasChildren: boolean;
    mediaType: (MediaTypeReferenceResponseModel);
    variants: Array<(VariantItemResponseModel)>;
};

export type MediaRecycleBinItemResponseModel = {
    id: string;
    createDate: string;
    hasChildren: boolean;
    parent?: ((ItemReferenceByIdResponseModel) | null);
    mediaType: (MediaTypeReferenceResponseModel);
    variants: Array<(VariantItemResponseModel)>;
};

export type MediaReferenceResponseModel = {
    $type: string;
    id: string;
    name?: (string) | null;
    mediaType: (TrackedReferenceMediaTypeModel);
};

export type MediaResponseModel = {
    values: Array<(MediaValueResponseModel)>;
    variants: Array<(MediaVariantResponseModel)>;
    id: string;
    /**
     * @deprecated
     */
    urls: Array<(MediaUrlInfoModel)>;
    isTrashed: boolean;
    mediaType: (MediaTypeReferenceResponseModel);
};

export type MediaTreeItemResponseModel = {
    hasChildren: boolean;
    parent?: ((ReferenceByIdModel) | null);
    noAccess: boolean;
    isTrashed: boolean;
    id: string;
    createDate: string;
    mediaType: (MediaTypeReferenceResponseModel);
    variants: Array<(VariantItemResponseModel)>;
};

export type MediaTypeCollectionReferenceResponseModel = {
    id: string;
    alias: string;
    icon: string;
};

export type MediaTypeCompositionModel = {
    mediaType: (ReferenceByIdModel);
    compositionType: CompositionTypeModel;
};

export type MediaTypeCompositionRequestModel = {
    id?: (string) | null;
    currentPropertyAliases: Array<(string)>;
    currentCompositeIds: Array<(string)>;
};

export type MediaTypeCompositionResponseModel = {
    id: string;
    name: string;
    icon: string;
};

export type MediaTypeConfigurationResponseModel = {
    reservedFieldNames: Array<(string)>;
};

export type MediaTypeItemResponseModel = {
    id: string;
    name: string;
    icon?: (string) | null;
};

export type MediaTypePropertyTypeContainerResponseModel = {
    id: string;
    parent?: ((ReferenceByIdModel) | null);
    name?: (string) | null;
    type: string;
    sortOrder: number;
};

export type MediaTypePropertyTypeReferenceResponseModel = {
    $type: string;
    id: string;
    name?: (string) | null;
    alias?: (string) | null;
    mediaType: (TrackedReferenceMediaTypeModel);
};

export type MediaTypePropertyTypeResponseModel = {
    id: string;
    container?: ((ReferenceByIdModel) | null);
    sortOrder: number;
    alias: string;
    name: string;
    description?: (string) | null;
    dataType: (ReferenceByIdModel);
    variesByCulture: boolean;
    variesBySegment: boolean;
    validation: (PropertyTypeValidationModel);
    appearance: (PropertyTypeAppearanceModel);
};

export type MediaTypeReferenceResponseModel = {
    id: string;
    icon: string;
    collection?: ((ReferenceByIdModel) | null);
};

export type MediaTypeResponseModel = {
    alias: string;
    name: string;
    description?: (string) | null;
    icon: string;
    allowedAsRoot: boolean;
    variesByCulture: boolean;
    variesBySegment: boolean;
    collection?: ((ReferenceByIdModel) | null);
    isElement: boolean;
    properties: Array<(MediaTypePropertyTypeResponseModel)>;
    containers: Array<(MediaTypePropertyTypeContainerResponseModel)>;
    id: string;
    allowedMediaTypes: Array<(MediaTypeSortModel)>;
    compositions: Array<(MediaTypeCompositionModel)>;
    isDeletable: boolean;
    aliasCanBeChanged: boolean;
};

export type MediaTypeSortModel = {
    mediaType: (ReferenceByIdModel);
    sortOrder: number;
};

export type MediaTypeTreeItemResponseModel = {
    hasChildren: boolean;
    id: string;
    parent?: ((ReferenceByIdModel) | null);
    name: string;
    isFolder: boolean;
    icon: string;
    isDeletable: boolean;
};

export type MediaUrlInfoModel = {
    culture: (string) | null;
    url: string;
};

export type MediaUrlInfoResponseModel = {
    id: string;
    urlInfos: Array<(MediaUrlInfoModel)>;
};

export type MediaValueModel = {
    culture?: (string) | null;
    segment?: (string) | null;
    alias: string;
    value?: unknown;
};

export type MediaValueResponseModel = {
    culture?: (string) | null;
    segment?: (string) | null;
    alias: string;
    value?: unknown;
    editorAlias: string;
};

export type MediaVariantRequestModel = {
    culture?: (string) | null;
    segment?: (string) | null;
    name: string;
};

export type MediaVariantResponseModel = {
    culture?: (string) | null;
    segment?: (string) | null;
    name: string;
    createDate: string;
    updateDate: string;
};

export type MemberConfigurationResponseModel = {
    [key: string]: unknown;
};

export type MemberGroupItemResponseModel = {
    id: string;
    name: string;
};

export type MemberGroupResponseModel = {
    name: string;
    id: string;
};

export type MemberItemResponseModel = {
    id: string;
    memberType: (MemberTypeReferenceResponseModel);
    variants: Array<(VariantItemResponseModel)>;
    kind: MemberKindModel;
};

export type MemberKindModel = 'Default' | 'Api';

export type MemberReferenceResponseModel = {
    $type: string;
    id: string;
    name?: (string) | null;
    memberType: (TrackedReferenceMemberTypeModel);
};

export type MemberResponseModel = {
    values: Array<(MemberValueResponseModel)>;
    variants: Array<(MemberVariantResponseModel)>;
    id: string;
    email: string;
    username: string;
    memberType: (MemberTypeReferenceResponseModel);
    isApproved: boolean;
    isLockedOut: boolean;
    isTwoFactorEnabled: boolean;
    failedPasswordAttempts: number;
    lastLoginDate?: (string) | null;
    lastLockoutDate?: (string) | null;
    lastPasswordChangeDate?: (string) | null;
    groups: Array<(string)>;
    kind: MemberKindModel;
};

export type MemberTypeCompositionModel = {
    memberType: (ReferenceByIdModel);
    compositionType: CompositionTypeModel;
};

export type MemberTypeCompositionRequestModel = {
    id?: (string) | null;
    currentPropertyAliases: Array<(string)>;
    currentCompositeIds: Array<(string)>;
};

export type MemberTypeCompositionResponseModel = {
    id: string;
    name: string;
    icon: string;
};

export type MemberTypeConfigurationResponseModel = {
    reservedFieldNames: Array<(string)>;
};

export type MemberTypeItemResponseModel = {
    id: string;
    name: string;
    icon?: (string) | null;
};

export type MemberTypePropertyTypeContainerResponseModel = {
    id: string;
    parent?: ((ReferenceByIdModel) | null);
    name?: (string) | null;
    type: string;
    sortOrder: number;
};

export type MemberTypePropertyTypeReferenceResponseModel = {
    $type: string;
    id: string;
    name?: (string) | null;
    alias?: (string) | null;
    memberType: (TrackedReferenceMemberTypeModel);
};

export type MemberTypePropertyTypeResponseModel = {
    id: string;
    container?: ((ReferenceByIdModel) | null);
    sortOrder: number;
    alias: string;
    name: string;
    description?: (string) | null;
    dataType: (ReferenceByIdModel);
    variesByCulture: boolean;
    variesBySegment: boolean;
    validation: (PropertyTypeValidationModel);
    appearance: (PropertyTypeAppearanceModel);
    isSensitive: boolean;
    visibility: (MemberTypePropertyTypeVisibilityModel);
};

export type MemberTypePropertyTypeVisibilityModel = {
    memberCanView: boolean;
    memberCanEdit: boolean;
};

export type MemberTypeReferenceResponseModel = {
    id: string;
    icon: string;
    collection?: ((ReferenceByIdModel) | null);
};

export type MemberTypeResponseModel = {
    alias: string;
    name: string;
    description?: (string) | null;
    icon: string;
    allowedAsRoot: boolean;
    variesByCulture: boolean;
    variesBySegment: boolean;
    collection?: ((ReferenceByIdModel) | null);
    isElement: boolean;
    properties: Array<(MemberTypePropertyTypeResponseModel)>;
    containers: Array<(MemberTypePropertyTypeContainerResponseModel)>;
    id: string;
    compositions: Array<(MemberTypeCompositionModel)>;
};

export type MemberTypeTreeItemResponseModel = {
    hasChildren: boolean;
    id: string;
    parent?: ((ReferenceByIdModel) | null);
    name: string;
    icon: string;
};

export type MemberValueModel = {
    culture?: (string) | null;
    segment?: (string) | null;
    alias: string;
    value?: unknown;
};

export type MemberValueResponseModel = {
    culture?: (string) | null;
    segment?: (string) | null;
    alias: string;
    value?: unknown;
    editorAlias: string;
};

export type MemberVariantRequestModel = {
    culture?: (string) | null;
    segment?: (string) | null;
    name: string;
};

export type MemberVariantResponseModel = {
    culture?: (string) | null;
    segment?: (string) | null;
    name: string;
    createDate: string;
    updateDate: string;
};

export type ModelsBuilderResponseModel = {
    mode: ModelsModeModel;
    canGenerate: boolean;
    outOfDateModels: boolean;
    lastError?: (string) | null;
    version?: (string) | null;
    modelsNamespace?: (string) | null;
    trackingOutOfDateModels: boolean;
};

export type ModelsModeModel = 'Nothing' | 'InMemoryAuto' | 'SourceCodeManual' | 'SourceCodeAuto';

export type MoveDataTypeRequestModel = {
    target?: ((ReferenceByIdModel) | null);
};

export type MoveDictionaryRequestModel = {
    target?: ((ReferenceByIdModel) | null);
};

export type MoveDocumentBlueprintRequestModel = {
    target?: ((ReferenceByIdModel) | null);
};

export type MoveDocumentRequestModel = {
    target?: ((ReferenceByIdModel) | null);
};

export type MoveDocumentTypeRequestModel = {
    target?: ((ReferenceByIdModel) | null);
};

export type MoveMediaRequestModel = {
    target?: ((ReferenceByIdModel) | null);
};

export type MoveMediaTypeRequestModel = {
    target?: ((ReferenceByIdModel) | null);
};

export type NamedEntityTreeItemResponseModel = {
    hasChildren: boolean;
    id: string;
    parent?: ((ReferenceByIdModel) | null);
    name: string;
};

export type NoopSetupTwoFactorModel = {
    [key: string]: unknown;
};

export type NotificationHeaderModel = {
    message: string;
    category: string;
    type: EventMessageTypeModel;
};

export type OEmbedResponseModel = {
    markup: string;
};

export type ObjectTypeResponseModel = {
    name?: (string) | null;
    id: string;
};

export type OperatorModel = 'Equals' | 'NotEquals' | 'Contains' | 'NotContains' | 'LessThan' | 'LessThanEqualTo' | 'GreaterThan' | 'GreaterThanEqualTo';

export type OutOfDateStatusResponseModel = {
    status: OutOfDateTypeModel;
};

export type OutOfDateTypeModel = 'OutOfDate' | 'Current' | 'Unknown';

export type PackageConfigurationResponseModel = {
    marketplaceUrl: string;
};

export type PackageDefinitionResponseModel = {
    name: string;
    contentNodeId?: (string) | null;
    contentLoadChildNodes: boolean;
    mediaIds: Array<(string)>;
    mediaLoadChildNodes: boolean;
    documentTypes: Array<(string)>;
    mediaTypes: Array<(string)>;
    dataTypes: Array<(string)>;
    templates: Array<(string)>;
    partialViews: Array<(string)>;
    stylesheets: Array<(string)>;
    scripts: Array<(string)>;
    languages: Array<(string)>;
    dictionaryItems: Array<(string)>;
    id: string;
    readonly packagePath: string;
};

export type PackageMigrationStatusResponseModel = {
    packageName: string;
    hasPendingMigrations: boolean;
};

export type PagedAllowedDocumentTypeModel = {
    total: number;
    items: Array<(AllowedDocumentTypeModel)>;
};

export type PagedAllowedMediaTypeModel = {
    total: number;
    items: Array<(AllowedMediaTypeModel)>;
};

export type PagedAuditLogResponseModel = {
    total: number;
    items: Array<(AuditLogResponseModel)>;
};

export type PagedCultureReponseModel = {
    total: number;
    items: Array<(CultureReponseModel)>;
};

export type PagedDataTypeItemResponseModel = {
    total: number;
    items: Array<(DataTypeItemResponseModel)>;
};

export type PagedDataTypeTreeItemResponseModel = {
    total: number;
    items: Array<(DataTypeTreeItemResponseModel)>;
};

export type PagedDictionaryOverviewResponseModel = {
    total: number;
    items: Array<(DictionaryOverviewResponseModel)>;
};

export type PagedDocumentBlueprintTreeItemResponseModel = {
    total: number;
    items: Array<(DocumentBlueprintTreeItemResponseModel)>;
};

export type PagedDocumentCollectionResponseModel = {
    total: number;
    items: Array<(DocumentCollectionResponseModel)>;
};

export type PagedDocumentRecycleBinItemResponseModel = {
    total: number;
    items: Array<(DocumentRecycleBinItemResponseModel)>;
};

export type PagedDocumentTreeItemResponseModel = {
    total: number;
    items: Array<(DocumentTreeItemResponseModel)>;
};

export type PagedDocumentTypeBlueprintItemResponseModel = {
    total: number;
    items: Array<(DocumentTypeBlueprintItemResponseModel)>;
};

export type PagedDocumentTypeTreeItemResponseModel = {
    total: number;
    items: Array<(DocumentTypeTreeItemResponseModel)>;
};

export type PagedDocumentVersionItemResponseModel = {
    total: number;
    items: Array<(DocumentVersionItemResponseModel)>;
};

export type PagedFileSystemTreeItemPresentationModel = {
    total: number;
    items: Array<(FileSystemTreeItemPresentationModel)>;
};

export type PagedHealthCheckGroupResponseModel = {
    total: number;
    items: Array<(HealthCheckGroupResponseModel)>;
};

export type PagedHelpPageResponseModel = {
    total: number;
    items: Array<(HelpPageResponseModel)>;
};

export type PagedIReferenceResponseModel = {
    total: number;
    items: Array<(DefaultReferenceResponseModel | DocumentReferenceResponseModel | DocumentTypePropertyTypeReferenceResponseModel | MediaReferenceResponseModel | MediaTypePropertyTypeReferenceResponseModel | MemberReferenceResponseModel | MemberTypePropertyTypeReferenceResponseModel)>;
};

export type PagedIndexResponseModel = {
    total: number;
    items: Array<(IndexResponseModel)>;
};

export type PagedLanguageResponseModel = {
    total: number;
    items: Array<(LanguageResponseModel)>;
};

export type PagedLogMessageResponseModel = {
    total: number;
    items: Array<(LogMessageResponseModel)>;
};

export type PagedLogTemplateResponseModel = {
    total: number;
    items: Array<(LogTemplateResponseModel)>;
};

export type PagedLoggerResponseModel = {
    total: number;
    items: Array<(LoggerResponseModel)>;
};

export type PagedMediaCollectionResponseModel = {
    total: number;
    items: Array<(MediaCollectionResponseModel)>;
};

export type PagedMediaRecycleBinItemResponseModel = {
    total: number;
    items: Array<(MediaRecycleBinItemResponseModel)>;
};

export type PagedMediaTreeItemResponseModel = {
    total: number;
    items: Array<(MediaTreeItemResponseModel)>;
};

export type PagedMediaTypeTreeItemResponseModel = {
    total: number;
    items: Array<(MediaTypeTreeItemResponseModel)>;
};

export type PagedMemberGroupResponseModel = {
    total: number;
    items: Array<(MemberGroupResponseModel)>;
};

export type PagedMemberResponseModel = {
    total: number;
    items: Array<(MemberResponseModel)>;
};

export type PagedMemberTypeTreeItemResponseModel = {
    total: number;
    items: Array<(MemberTypeTreeItemResponseModel)>;
};

export type PagedModelDataTypeItemResponseModel = {
    items: Array<(DataTypeItemResponseModel)>;
    total: number;
};

export type PagedModelDocumentItemResponseModel = {
    items: Array<(DocumentItemResponseModel)>;
    total: number;
};

export type PagedModelDocumentTypeItemResponseModel = {
    items: Array<(DocumentTypeItemResponseModel)>;
    total: number;
};

export type PagedModelMediaItemResponseModel = {
    items: Array<(MediaItemResponseModel)>;
    total: number;
};

export type PagedModelMediaTypeItemResponseModel = {
    items: Array<(MediaTypeItemResponseModel)>;
    total: number;
};

export type PagedModelMemberItemResponseModel = {
    items: Array<(MemberItemResponseModel)>;
    total: number;
};

export type PagedModelMemberTypeItemResponseModel = {
    items: Array<(MemberTypeItemResponseModel)>;
    total: number;
};

export type PagedModelTemplateItemResponseModel = {
    items: Array<(TemplateItemResponseModel)>;
    total: number;
};

export type PagedNamedEntityTreeItemResponseModel = {
    total: number;
    items: Array<(NamedEntityTreeItemResponseModel)>;
};

export type PagedObjectTypeResponseModel = {
    total: number;
    items: Array<(ObjectTypeResponseModel)>;
};

export type PagedPackageDefinitionResponseModel = {
    total: number;
    items: Array<(PackageDefinitionResponseModel)>;
};

export type PagedPackageMigrationStatusResponseModel = {
    total: number;
    items: Array<(PackageMigrationStatusResponseModel)>;
};

export type PagedPartialViewSnippetItemResponseModel = {
    total: number;
    items: Array<(PartialViewSnippetItemResponseModel)>;
};

export type PagedProblemDetailsModel = {
    total: number;
    items: Array<(ProblemDetails)>;
};

export type PagedRedirectUrlResponseModel = {
    total: number;
    items: Array<(RedirectUrlResponseModel)>;
};

export type PagedReferenceByIdModel = {
    total: number;
    items: Array<(ReferenceByIdModel)>;
};

export type PagedRelationResponseModel = {
    total: number;
    items: Array<(RelationResponseModel)>;
};

export type PagedRelationTypeResponseModel = {
    total: number;
    items: Array<(RelationTypeResponseModel)>;
};

export type PagedSavedLogSearchResponseModel = {
    total: number;
    items: Array<(SavedLogSearchResponseModel)>;
};

export type PagedSearchResultResponseModel = {
    total: number;
    items: Array<(SearchResultResponseModel)>;
};

export type PagedSearcherResponseModel = {
    total: number;
    items: Array<(SearcherResponseModel)>;
};

export type PagedSegmentResponseModel = {
    total: number;
    items: Array<(SegmentResponseModel)>;
};

export type PagedTagResponseModel = {
    total: number;
    items: Array<(TagResponseModel)>;
};

export type PagedTelemetryResponseModel = {
    total: number;
    items: Array<(TelemetryResponseModel)>;
};

export type PagedUserDataResponseModel = {
    total: number;
    items: Array<(UserDataResponseModel)>;
};

export type PagedUserGroupResponseModel = {
    total: number;
    items: Array<(UserGroupResponseModel)>;
};

export type PagedUserResponseModel = {
    total: number;
    items: Array<(UserResponseModel)>;
};

export type PagedWebhookEventModel = {
    total: number;
    items: Array<(WebhookEventModel)>;
};

export type PagedWebhookLogResponseModel = {
    total: number;
    items: Array<(WebhookLogResponseModel)>;
};

export type PagedWebhookResponseModel = {
    total: number;
    items: Array<(WebhookResponseModel)>;
};

export type PartialViewFolderResponseModel = {
    path: string;
    name: string;
    parent?: ((FileSystemFolderModel) | null);
};

export type PartialViewItemResponseModel = {
    path: string;
    name: string;
    parent?: ((FileSystemFolderModel) | null);
    isFolder: boolean;
};

export type PartialViewResponseModel = {
    path: string;
    name: string;
    parent?: ((FileSystemFolderModel) | null);
    content: string;
};

export type PartialViewSnippetItemResponseModel = {
    id: string;
    name: string;
};

export type PartialViewSnippetResponseModel = {
    id: string;
    name: string;
    content: string;
};

export type PasswordConfigurationResponseModel = {
    minimumPasswordLength: number;
    requireNonLetterOrDigit: boolean;
    requireDigit: boolean;
    requireLowercase: boolean;
    requireUppercase: boolean;
};

export type ProblemDetails = {
    type?: (string) | null;
    title?: (string) | null;
    status?: (number) | null;
    detail?: (string) | null;
    instance?: (string) | null;
    [key: string]: (unknown | string | number) | undefined;
};

export type ProblemDetailsBuilderModel = {
    [key: string]: unknown;
};

export type ProfilingStatusRequestModel = {
    enabled: boolean;
};

export type ProfilingStatusResponseModel = {
    enabled: boolean;
};

export type PropertyTypeAppearanceModel = {
    labelOnTop: boolean;
};

export type PropertyTypeValidationModel = {
    mandatory: boolean;
    mandatoryMessage?: (string) | null;
    regEx?: (string) | null;
    regExMessage?: (string) | null;
};

export type PublicAccessRequestModel = {
    loginDocument: (ReferenceByIdModel);
    errorDocument: (ReferenceByIdModel);
    memberUserNames: Array<(string)>;
    memberGroupNames: Array<(string)>;
};

export type PublicAccessResponseModel = {
    loginDocument: (ReferenceByIdModel);
    errorDocument: (ReferenceByIdModel);
    members: Array<(MemberItemResponseModel)>;
    groups: Array<(MemberGroupItemResponseModel)>;
};

export type PublishDocumentRequestModel = {
    publishSchedules: Array<(CultureAndScheduleRequestModel)>;
};

export type PublishDocumentWithDescendantsRequestModel = {
    includeUnpublishedDescendants: boolean;
    cultures: Array<(string)>;
};

export type PublishWithDescendantsResultModel = {
    taskId: string;
    isComplete: boolean;
};

export type PublishedDocumentResponseModel = {
    values: Array<(DocumentValueResponseModel)>;
    variants: Array<(DocumentVariantResponseModel)>;
    id: string;
    documentType: (DocumentTypeReferenceResponseModel);
    /**
     * @deprecated
     */
    urls: Array<(DocumentUrlInfoModel)>;
    template?: ((ReferenceByIdModel) | null);
    isTrashed: boolean;
};

export type RebuildStatusModel = {
    isRebuilding: boolean;
};

export type RedirectStatusModel = 'Enabled' | 'Disabled';

export type RedirectUrlResponseModel = {
    id: string;
    originalUrl: string;
    destinationUrl: string;
    created: string;
    document: (ReferenceByIdModel);
    culture?: (string) | null;
};

export type RedirectUrlStatusResponseModel = {
    status: RedirectStatusModel;
    userIsAdmin: boolean;
};

export type ReferenceByIdModel = {
    id: string;
};

export type RelationReferenceModel = {
    id: string;
    name?: (string) | null;
};

export type RelationResponseModel = {
    id: string;
    relationType: (ReferenceByIdModel);
    readonly parent: (RelationReferenceModel);
    readonly child: (RelationReferenceModel);
    readonly createDate: string;
    readonly comment?: (string) | null;
};

export type RelationTypeItemResponseModel = {
    id: string;
    name: string;
    isDeletable: boolean;
};

export type RelationTypeResponseModel = {
    name: string;
    isBidirectional: boolean;
    isDependency: boolean;
    id: string;
    alias?: (string) | null;
    parentObject?: ((ObjectTypeResponseModel) | null);
    childObject?: ((ObjectTypeResponseModel) | null);
};

export type RenamePartialViewRequestModel = {
    name: string;
};

export type RenameScriptRequestModel = {
    name: string;
};

export type RenameStylesheetRequestModel = {
    name: string;
};

export type ResendInviteUserRequestModel = {
    user: (ReferenceByIdModel);
    message?: (string) | null;
};

export type ResetPasswordRequestModel = {
    email: string;
};

export type ResetPasswordTokenRequestModel = {
    user: (ReferenceByIdModel);
    resetCode: string;
    password: string;
};

export type ResetPasswordUserResponseModel = {
    resetPassword?: (string) | null;
};

export type RuntimeLevelModel = 'Unknown' | 'Boot' | 'Install' | 'Upgrade' | 'Run' | 'BootFailed';

export type RuntimeModeModel = 'BackofficeDevelopment' | 'Development' | 'Production';

export type SavedLogSearchRequestModel = {
    name: string;
    query: string;
};

export type SavedLogSearchResponseModel = {
    name: string;
    query: string;
};

export type ScheduleRequestModel = {
    publishTime?: (string) | null;
    unpublishTime?: (string) | null;
};

export type ScriptFolderResponseModel = {
    path: string;
    name: string;
    parent?: ((FileSystemFolderModel) | null);
};

export type ScriptItemResponseModel = {
    path: string;
    name: string;
    parent?: ((FileSystemFolderModel) | null);
    isFolder: boolean;
};

export type ScriptResponseModel = {
    path: string;
    name: string;
    parent?: ((FileSystemFolderModel) | null);
    content: string;
};

export type SearchResultResponseModel = {
    id: string;
    score: number;
    readonly fieldCount: number;
    fields: Array<(FieldPresentationModel)>;
};

export type SearcherResponseModel = {
    name: string;
};

export type SecurityConfigurationResponseModel = {
    passwordConfiguration: (PasswordConfigurationResponseModel);
};

export type SegmentResponseModel = {
    name: string;
    alias: string;
};

export type ServerConfigurationItemResponseModel = {
    name: string;
    data: string;
};

export type ServerConfigurationResponseModel = {
    allowPasswordReset: boolean;
    versionCheckPeriod: number;
    allowLocalLogin: boolean;
};

export type ServerInformationResponseModel = {
    version: string;
    assemblyVersion: string;
    baseUtcOffset: string;
    runtimeMode: RuntimeModeModel;
};

export type ServerStatusResponseModel = {
    serverStatus: RuntimeLevelModel;
};

export type ServerTroubleshootingResponseModel = {
    items: Array<(ServerConfigurationItemResponseModel)>;
};

export type SetAvatarRequestModel = {
    file: (ReferenceByIdModel);
};

export type SortingRequestModel = {
    parent?: ((ReferenceByIdModel) | null);
    sorting: Array<(ItemSortingRequestModel)>;
};

export type StaticFileItemResponseModel = {
    path: string;
    name: string;
    parent?: ((FileSystemFolderModel) | null);
    isFolder: boolean;
};

export type StatusResultTypeModel = 'Success' | 'Warning' | 'Error' | 'Info';

export type StylesheetFolderResponseModel = {
    path: string;
    name: string;
    parent?: ((FileSystemFolderModel) | null);
};

export type StylesheetItemResponseModel = {
    path: string;
    name: string;
    parent?: ((FileSystemFolderModel) | null);
    isFolder: boolean;
};

export type StylesheetResponseModel = {
    path: string;
    name: string;
    parent?: ((FileSystemFolderModel) | null);
    content: string;
};

export type TagResponseModel = {
    id: string;
    text?: (string) | null;
    group?: (string) | null;
    nodeCount: number;
};

export type TelemetryLevelModel = 'Minimal' | 'Basic' | 'Detailed';

export type TelemetryRequestModel = {
    telemetryLevel: TelemetryLevelModel;
};

export type TelemetryResponseModel = {
    telemetryLevel: TelemetryLevelModel;
};

export type TemplateConfigurationResponseModel = {
    disabled: boolean;
};

export type TemplateItemResponseModel = {
    id: string;
    name: string;
    alias: string;
};

export type TemplateQueryExecuteFilterPresentationModel = {
    propertyAlias: string;
    constraintValue: string;
    operator: OperatorModel;
};

export type TemplateQueryExecuteModel = {
    rootDocument?: ((ReferenceByIdModel) | null);
    documentTypeAlias?: (string) | null;
    filters?: Array<(TemplateQueryExecuteFilterPresentationModel)> | null;
    sort?: ((TemplateQueryExecuteSortModel) | null);
    take: number;
};

export type TemplateQueryExecuteSortModel = {
    propertyAlias: string;
    direction?: (string) | null;
};

export type TemplateQueryOperatorModel = {
    operator: OperatorModel;
    applicableTypes: Array<TemplateQueryPropertyTypeModel>;
};

export type TemplateQueryPropertyPresentationModel = {
    alias: string;
    type: TemplateQueryPropertyTypeModel;
};

export type TemplateQueryPropertyTypeModel = 'String' | 'DateTime' | 'Integer';

export type TemplateQueryResultItemPresentationModel = {
    icon: string;
    name: string;
};

export type TemplateQueryResultResponseModel = {
    queryExpression: string;
    sampleResults: Array<(TemplateQueryResultItemPresentationModel)>;
    resultCount: number;
    executionTime: number;
};

export type TemplateQuerySettingsResponseModel = {
    documentTypeAliases: Array<(string)>;
    properties: Array<(TemplateQueryPropertyPresentationModel)>;
    operators: Array<(TemplateQueryOperatorModel)>;
};

export type TemplateResponseModel = {
    name: string;
    alias: string;
    content?: (string) | null;
    id: string;
    masterTemplate?: ((ReferenceByIdModel) | null);
};

export type TemporaryFileConfigurationResponseModel = {
    imageFileTypes: Array<(string)>;
    disallowedUploadedFilesExtensions: Array<(string)>;
    allowedUploadedFileExtensions: Array<(string)>;
    maxFileSize?: (number) | null;
};

export type TemporaryFileResponseModel = {
    id: string;
    availableUntil?: (string) | null;
    fileName: string;
};

export type TrackedReferenceDocumentTypeModel = {
    id: string;
    icon?: (string) | null;
    alias?: (string) | null;
    name?: (string) | null;
};

export type TrackedReferenceMediaTypeModel = {
    id: string;
    icon?: (string) | null;
    alias?: (string) | null;
    name?: (string) | null;
};

export type TrackedReferenceMemberTypeModel = {
    id: string;
    icon?: (string) | null;
    alias?: (string) | null;
    name?: (string) | null;
};

export type UnknownTypePermissionPresentationModel = {
    $type: string;
    verbs: Array<(string)>;
    context: string;
};

export type UnlockUsersRequestModel = {
    userIds: Array<(ReferenceByIdModel)>;
};

export type UnpublishDocumentRequestModel = {
    cultures?: Array<(string)> | null;
};

export type UpdateDataTypeRequestModel = {
    name: string;
    editorAlias: string;
    editorUiAlias: string;
    values: Array<(DataTypePropertyPresentationModel)>;
};

export type UpdateDictionaryItemRequestModel = {
    name: string;
    translations: Array<(DictionaryItemTranslationModel)>;
};

export type UpdateDocumentBlueprintRequestModel = {
    values: Array<(DocumentValueModel)>;
    variants: Array<(DocumentVariantRequestModel)>;
};

export type UpdateDocumentNotificationsRequestModel = {
    subscribedActionIds: Array<(string)>;
};

export type UpdateDocumentRequestModel = {
    values: Array<(DocumentValueModel)>;
    variants: Array<(DocumentVariantRequestModel)>;
    template?: ((ReferenceByIdModel) | null);
};

export type UpdateDocumentTypePropertyTypeContainerRequestModel = {
    id: string;
    parent?: ((ReferenceByIdModel) | null);
    name?: (string) | null;
    type: string;
    sortOrder: number;
};

export type UpdateDocumentTypePropertyTypeRequestModel = {
    id: string;
    container?: ((ReferenceByIdModel) | null);
    sortOrder: number;
    alias: string;
    name: string;
    description?: (string) | null;
    dataType: (ReferenceByIdModel);
    variesByCulture: boolean;
    variesBySegment: boolean;
    validation: (PropertyTypeValidationModel);
    appearance: (PropertyTypeAppearanceModel);
};

export type UpdateDocumentTypeRequestModel = {
    alias: string;
    name: string;
    description?: (string) | null;
    icon: string;
    allowedAsRoot: boolean;
    variesByCulture: boolean;
    variesBySegment: boolean;
    collection?: ((ReferenceByIdModel) | null);
    isElement: boolean;
    properties: Array<(UpdateDocumentTypePropertyTypeRequestModel)>;
    containers: Array<(UpdateDocumentTypePropertyTypeContainerRequestModel)>;
    allowedTemplates: Array<(ReferenceByIdModel)>;
    defaultTemplate?: ((ReferenceByIdModel) | null);
    cleanup: (DocumentTypeCleanupModel);
    allowedDocumentTypes: Array<(DocumentTypeSortModel)>;
    compositions: Array<(DocumentTypeCompositionModel)>;
};

export type UpdateDomainsRequestModel = {
    defaultIsoCode?: (string) | null;
    domains: Array<(DomainPresentationModel)>;
};

export type UpdateFolderResponseModel = {
    name: string;
};

export type UpdateLanguageRequestModel = {
    name: string;
    isDefault: boolean;
    isMandatory: boolean;
    fallbackIsoCode?: (string) | null;
};

export type UpdateMediaRequestModel = {
    values: Array<(MediaValueModel)>;
    variants: Array<(MediaVariantRequestModel)>;
};

export type UpdateMediaTypePropertyTypeContainerRequestModel = {
    id: string;
    parent?: ((ReferenceByIdModel) | null);
    name?: (string) | null;
    type: string;
    sortOrder: number;
};

export type UpdateMediaTypePropertyTypeRequestModel = {
    id: string;
    container?: ((ReferenceByIdModel) | null);
    sortOrder: number;
    alias: string;
    name: string;
    description?: (string) | null;
    dataType: (ReferenceByIdModel);
    variesByCulture: boolean;
    variesBySegment: boolean;
    validation: (PropertyTypeValidationModel);
    appearance: (PropertyTypeAppearanceModel);
};

export type UpdateMediaTypeRequestModel = {
    alias: string;
    name: string;
    description?: (string) | null;
    icon: string;
    allowedAsRoot: boolean;
    variesByCulture: boolean;
    variesBySegment: boolean;
    collection?: ((ReferenceByIdModel) | null);
    isElement: boolean;
    properties: Array<(UpdateMediaTypePropertyTypeRequestModel)>;
    containers: Array<(UpdateMediaTypePropertyTypeContainerRequestModel)>;
    allowedMediaTypes: Array<(MediaTypeSortModel)>;
    compositions: Array<(MediaTypeCompositionModel)>;
};

export type UpdateMemberGroupRequestModel = {
    name: string;
};

export type UpdateMemberRequestModel = {
    values: Array<(MemberValueModel)>;
    variants: Array<(MemberVariantRequestModel)>;
    email: string;
    username: string;
    oldPassword?: (string) | null;
    newPassword?: (string) | null;
    groups?: Array<(string)> | null;
    isApproved: boolean;
    isLockedOut: boolean;
    isTwoFactorEnabled: boolean;
};

export type UpdateMemberTypePropertyTypeContainerRequestModel = {
    id: string;
    parent?: ((ReferenceByIdModel) | null);
    name?: (string) | null;
    type: string;
    sortOrder: number;
};

export type UpdateMemberTypePropertyTypeRequestModel = {
    id: string;
    container?: ((ReferenceByIdModel) | null);
    sortOrder: number;
    alias: string;
    name: string;
    description?: (string) | null;
    dataType: (ReferenceByIdModel);
    variesByCulture: boolean;
    variesBySegment: boolean;
    validation: (PropertyTypeValidationModel);
    appearance: (PropertyTypeAppearanceModel);
    isSensitive: boolean;
    visibility: (MemberTypePropertyTypeVisibilityModel);
};

export type UpdateMemberTypeRequestModel = {
    alias: string;
    name: string;
    description?: (string) | null;
    icon: string;
    allowedAsRoot: boolean;
    variesByCulture: boolean;
    variesBySegment: boolean;
    collection?: ((ReferenceByIdModel) | null);
    isElement: boolean;
    properties: Array<(UpdateMemberTypePropertyTypeRequestModel)>;
    containers: Array<(UpdateMemberTypePropertyTypeContainerRequestModel)>;
    compositions: Array<(MemberTypeCompositionModel)>;
};

export type UpdatePackageRequestModel = {
    name: string;
    contentNodeId?: (string) | null;
    contentLoadChildNodes: boolean;
    mediaIds: Array<(string)>;
    mediaLoadChildNodes: boolean;
    documentTypes: Array<(string)>;
    mediaTypes: Array<(string)>;
    dataTypes: Array<(string)>;
    templates: Array<(string)>;
    partialViews: Array<(string)>;
    stylesheets: Array<(string)>;
    scripts: Array<(string)>;
    languages: Array<(string)>;
    dictionaryItems: Array<(string)>;
    readonly packagePath: string;
};

export type UpdatePartialViewRequestModel = {
    content: string;
};

export type UpdateScriptRequestModel = {
    content: string;
};

export type UpdateStylesheetRequestModel = {
    content: string;
};

export type UpdateTemplateRequestModel = {
    name: string;
    alias: string;
    content?: (string) | null;
};

export type UpdateUserDataRequestModel = {
    group: string;
    identifier: string;
    value: string;
    key: string;
};

export type UpdateUserGroupRequestModel = {
    name: string;
    alias: string;
    icon?: (string) | null;
    sections: Array<(string)>;
    languages: Array<(string)>;
    hasAccessToAllLanguages: boolean;
    documentStartNode?: ((ReferenceByIdModel) | null);
    documentRootAccess: boolean;
    mediaStartNode?: ((ReferenceByIdModel) | null);
    mediaRootAccess: boolean;
    fallbackPermissions: Array<(string)>;
    permissions: Array<(DocumentPermissionPresentationModel | DocumentPropertyValuePermissionPresentationModel | UnknownTypePermissionPresentationModel)>;
};

export type UpdateUserGroupsOnUserRequestModel = {
    userIds: Array<(ReferenceByIdModel)>;
    userGroupIds: Array<(ReferenceByIdModel)>;
};

export type UpdateUserRequestModel = {
    email: string;
    userName: string;
    name: string;
    userGroupIds: Array<(ReferenceByIdModel)>;
    languageIsoCode: string;
    documentStartNodeIds: Array<(ReferenceByIdModel)>;
    hasDocumentRootAccess: boolean;
    mediaStartNodeIds: Array<(ReferenceByIdModel)>;
    hasMediaRootAccess: boolean;
};

export type UpdateWebhookRequestModel = {
    enabled: boolean;
    name?: (string) | null;
    description?: (string) | null;
    url: string;
    contentTypeKeys: Array<(string)>;
    headers: {
        [key: string]: (string);
    };
    events: Array<(string)>;
};

export type UpgradeCheckResponseModel = {
    type: string;
    comment: string;
    url: string;
};

export type UpgradeSettingsResponseModel = {
    currentState: string;
    newState: string;
    newVersion: string;
    oldVersion: string;
    readonly reportUrl: string;
};

export type UserConfigurationResponseModel = {
    canInviteUsers: boolean;
    usernameIsEmail: boolean;
    passwordConfiguration: (PasswordConfigurationResponseModel);
    allowChangePassword: boolean;
    allowTwoFactor: boolean;
};

export type UserDataModel = {
    group: string;
    identifier: string;
    value: string;
};

export type UserDataOperationStatusModel = 'Success' | 'NotFound' | 'UserNotFound' | 'AlreadyExists';

export type UserDataResponseModel = {
    group: string;
    identifier: string;
    value: string;
    key: string;
};

export type UserExternalLoginProviderModel = {
    providerSchemeName: string;
    providerKey?: (string) | null;
    isLinkedOnUser: boolean;
    hasManualLinkingEnabled: boolean;
};

export type UserGroupItemResponseModel = {
    id: string;
    name: string;
    icon?: (string) | null;
    alias?: (string) | null;
};

export type UserGroupResponseModel = {
    name: string;
    alias: string;
    icon?: (string) | null;
    sections: Array<(string)>;
    languages: Array<(string)>;
    hasAccessToAllLanguages: boolean;
    documentStartNode?: ((ReferenceByIdModel) | null);
    documentRootAccess: boolean;
    mediaStartNode?: ((ReferenceByIdModel) | null);
    mediaRootAccess: boolean;
    fallbackPermissions: Array<(string)>;
    permissions: Array<(DocumentPermissionPresentationModel | DocumentPropertyValuePermissionPresentationModel | UnknownTypePermissionPresentationModel)>;
    id: string;
    isDeletable: boolean;
    aliasCanBeChanged: boolean;
};

export type UserInstallRequestModel = {
    name: string;
    email: string;
    password: string;
    readonly subscribeToNewsletter: boolean;
};

export type UserItemResponseModel = {
    id: string;
    name: string;
    avatarUrls: Array<(string)>;
    kind: UserKindModel;
};

export type UserKindModel = 'Default' | 'Api';

export type UserOrderModel = 'UserName' | 'Language' | 'Name' | 'Email' | 'Id' | 'CreateDate' | 'UpdateDate' | 'IsApproved' | 'IsLockedOut' | 'LastLoginDate';

export type UserPermissionModel = {
    nodeKey: string;
    permissions: Array<(string)>;
};

export type UserPermissionsResponseModel = {
    permissions: Array<(UserPermissionModel)>;
};

export type UserResponseModel = {
    email: string;
    userName: string;
    name: string;
    userGroupIds: Array<(ReferenceByIdModel)>;
    id: string;
    languageIsoCode?: (string) | null;
    documentStartNodeIds: Array<(ReferenceByIdModel)>;
    hasDocumentRootAccess: boolean;
    mediaStartNodeIds: Array<(ReferenceByIdModel)>;
    hasMediaRootAccess: boolean;
    avatarUrls: Array<(string)>;
    state: UserStateModel;
    failedLoginAttempts: number;
    createDate: string;
    updateDate: string;
    lastLoginDate?: (string) | null;
    lastLockoutDate?: (string) | null;
    lastPasswordChangeDate?: (string) | null;
    isAdmin: boolean;
    kind: UserKindModel;
};

export type UserSettingsPresentationModel = {
    minCharLength: number;
    minNonAlphaNumericLength: number;
    consentLevels: Array<(ConsentLevelPresentationModel)>;
};

export type UserStateModel = 'Active' | 'Disabled' | 'LockedOut' | 'Invited' | 'Inactive' | 'All';

export type UserTwoFactorProviderModel = {
    providerName: string;
    isEnabledOnUser: boolean;
};

export type ValidateUpdateDocumentRequestModel = {
    values: Array<(DocumentValueModel)>;
    variants: Array<(DocumentVariantRequestModel)>;
    template?: ((ReferenceByIdModel) | null);
    cultures?: Array<(string)> | null;
};

export type VariantItemResponseModel = {
    name: string;
    culture?: (string) | null;
};

export type VerifyInviteUserRequestModel = {
    user: (ReferenceByIdModel);
    token: string;
};

export type VerifyInviteUserResponseModel = {
    passwordConfiguration: (PasswordConfigurationResponseModel);
};

export type VerifyResetPasswordResponseModel = {
    passwordConfiguration: (PasswordConfigurationResponseModel);
};

export type VerifyResetPasswordTokenRequestModel = {
    user: (ReferenceByIdModel);
    resetCode: string;
};

export type WebhookEventModel = {
    eventName: string;
    eventType: string;
    alias: string;
};

export type WebhookEventResponseModel = {
    eventName: string;
    eventType: string;
    alias: string;
};

export type WebhookItemResponseModel = {
    enabled: boolean;
    name: string;
    events: string;
    url: string;
    types: string;
};

export type WebhookLogResponseModel = {
    key: string;
    webhookKey: string;
    statusCode: string;
    isSuccessStatusCode: boolean;
    date: string;
    eventAlias: string;
    url: string;
    retryCount: number;
    requestHeaders: string;
    requestBody: string;
    responseHeaders: string;
    responseBody: string;
    exceptionOccured: boolean;
};

export type WebhookResponseModel = {
    enabled: boolean;
    name?: (string) | null;
    description?: (string) | null;
    url: string;
    contentTypeKeys: Array<(string)>;
    headers: {
        [key: string]: (string);
    };
    id: string;
    events: Array<(WebhookEventResponseModel)>;
};

export type GetServerConfigurationResponse = ((ServerConfigurationResponseModel));

export type GetServerConfigurationError = unknown;

export type GetServerInformationResponse = ((ServerInformationResponseModel));

export type GetServerInformationError = (unknown);

export type GetServerStatusResponse = ((ServerStatusResponseModel));

export type GetServerStatusError = ((ProblemDetails));

export type GetServerTroubleshootingResponse = ((ServerTroubleshootingResponseModel));

export type GetServerTroubleshootingError = (unknown);

export type GetServerUpgradeCheckResponse = ((UpgradeCheckResponseModel));

export type GetServerUpgradeCheckError = (unknown);