{"version":3,"file":"dashboard.element-BtJozcfQ.js","sources":["../../../Wysiwg/src/dashboards/versionStatusEnum.ts","../../../Wysiwg/src/util/common.utilities.ts","../../../Wysiwg/src/dashboards/dashboard.element.ts"],"sourcesContent":["export enum VersionStatus {\r\n  Unknown,\r\n  UpToDate,\r\n  Update,\r\n  Install\r\n};\r\n","import { UmbLocalizationController } from \"@umbraco-cms/backoffice/localization-api\";\r\nimport { GetServerInformationResponse, ServerService } from \"../management-api\";\r\nimport { SemVersion } from \"./types\";\r\nimport { UmbNotificationContext } from \"@umbraco-cms/backoffice/notification\";\r\n\r\nexport class CommonUtilities {\r\n  private _localize: UmbLocalizationController;\r\n  private _notificationContext: UmbNotificationContext;\r\n\r\n  constructor(localize: UmbLocalizationController, notificationContext: UmbNotificationContext) {\r\n    this._localize = localize;\r\n    this._notificationContext = notificationContext;\r\n  }\r\n\r\n  public async getUmbracoVersion(notificationContext?: UmbNotificationContext): Promise<SemVersion | undefined> {\r\n    if (!notificationContext) { return; }\r\n\r\n    const { data, error } = await ServerService.getServerInformation();\r\n\r\n    if (error) {\r\n      console.error(error);\r\n      if (this._notificationContext) {\r\n          this._notificationContext.stay(\"danger\", {\r\n            data: {\r\n              headline: this._localize.term(\"wysiwg_serverInfoError\"),\r\n              message: `${this._localize.term(\"wysiwg_serverInfoErrorDescription\")}`,\r\n            },\r\n          });\r\n        }\r\n      return;\r\n    }\r\n\r\n    if (data !== undefined) {\r\n      const serverInfo = data as GetServerInformationResponse;\r\n      const assemblyVersion = serverInfo?.assemblyVersion.split(\".\");\r\n      const version = {\r\n        major: assemblyVersion.length > 0 ? parseInt(assemblyVersion[0]) : 1,\r\n        minor: assemblyVersion.length > 1 ? parseInt(assemblyVersion[1]) : 0,\r\n        patch: assemblyVersion.length > 2 ? parseInt(assemblyVersion[2]) : 0\r\n      } as SemVersion;\r\n\r\n      return version;\r\n    }\r\n  }\r\n}\r\n","import {\r\n  LitElement,\r\n  css,\r\n  html,\r\n  customElement,\r\n  state,\r\n} from \"@umbraco-cms/backoffice/external/lit\";\r\nimport { UmbElementMixin } from \"@umbraco-cms/backoffice/element-api\";\r\nimport { UUIButtonElement } from \"@umbraco-cms/backoffice/external/uui\";\r\nimport {\r\n  UMB_NOTIFICATION_CONTEXT,\r\n  UmbNotificationContext,\r\n} from \"@umbraco-cms/backoffice/notification\";\r\nimport {\r\n  UMB_CURRENT_USER_CONTEXT,\r\n  UmbCurrentUserModel,\r\n} from \"@umbraco-cms/backoffice/current-user\";\r\nimport { FixUpgradeData, GetVariationsResponse, WysiwgUmbracoCommunityExtensionsService } from \"../api\";\r\nimport { VersionStatus } from \"./versionStatusEnum\";\r\nimport { umbConfirmModal, UmbConfirmModalData } from \"@umbraco-cms/backoffice/modal\";\r\nimport { CommonUtilities } from \"../util/common.utilities\";\r\nimport { SemVersion } from \"../util/types\";\r\n\r\n@customElement(\"wysiwg-dashboard\")\r\nexport class WysiwgDashboardElement extends UmbElementMixin(LitElement) {\r\n\r\n  @state()\r\n  private _contextCurrentUser: UmbCurrentUserModel | undefined = undefined;\r\n\r\n  @state()\r\n  private _updateStatus: VersionStatus | undefined = undefined;\r\n\r\n  @state()\r\n  private _variations: GetVariationsResponse | undefined = undefined;\r\n\r\n  @state()\r\n  private _uninstalling: boolean = false;\r\n\r\n  private _varyByCulture: boolean = false;\r\n  private _varyBySegment: boolean = false;\r\n\r\n  private _version: SemVersion = { major: 1, minor: 0, patch: 0 };\r\n\r\n  private _debug: boolean = true;\r\n\r\n  #notificationContext: UmbNotificationContext | undefined = undefined;\r\n\r\n  private _commonUtilities: CommonUtilities | undefined = undefined;\r\n\r\n  constructor() {\r\n    super();\r\n\r\n    this.consumeContext(UMB_NOTIFICATION_CONTEXT, (notificationContext) => {\r\n      this.#notificationContext = notificationContext;\r\n      this._commonUtilities = new CommonUtilities(this.localize, notificationContext);\r\n    });\r\n\r\n    this.consumeContext(UMB_CURRENT_USER_CONTEXT, (currentUserContext) => {\r\n      // When we have the current user context\r\n      // We can observe properties from it, such as the current user or perhaps just individual properties\r\n      // When the currentUser object changes we will get notified and can reset the @state properrty\r\n      this.observe(currentUserContext.currentUser, (currentUser) => {\r\n        this._contextCurrentUser = currentUser;\r\n      });\r\n    });\r\n\r\n  }\r\n\r\n  #onChangeCulture = (ev: Event) => {\r\n    const checkboxElement = ev.target as HTMLInputElement;\r\n    this._varyByCulture = checkboxElement.checked;\r\n  }\r\n  #onChangeSegment = (ev: Event) => {\r\n    const checkboxElement = ev.target as HTMLInputElement;\r\n    this._varyBySegment = checkboxElement.checked;\r\n  }\r\n\r\n  private async setSemVersion() {\r\n    await this._commonUtilities?.getUmbracoVersion(this.#notificationContext).then((version) => {\r\n      if (version) {\r\n        this._version = version;\r\n      } else {\r\n        // if (this.#notificationContext) {\r\n        //   this.#notificationContext.stay(\"danger\", {\r\n        //     data: {\r\n        //       headline: this.localize.term(\"wysiwg_serverInfoError\"),\r\n        //       message: `${this.localize.term(\"wysiwg_serverInfoErrorDescription\")}`,\r\n        //     },\r\n        //   });\r\n        // }\r\n      }\r\n    });\r\n  }\r\n\r\n  #onClickUpdateSettings = async (ev: Event) => {\r\n    const buttonElement = ev.target as UUIButtonElement;\r\n    if (!buttonElement || buttonElement.state === \"waiting\") return;\r\n    buttonElement.state = \"waiting\";\r\n\r\n    if (this._version.major > 15 || (this._version.major >= 15 && this._version.minor >= 4 && this._version.patch >= 0)) {\r\n      this._varyBySegment = false;\r\n    }\r\n    const options: FixUpgradeData = {\r\n      query: {\r\n        culture: this._varyByCulture,\r\n        segment: this._varyBySegment,\r\n      }\r\n    };\r\n    const { data, error } = await WysiwgUmbracoCommunityExtensionsService.fixUpgrade(options);\r\n\r\n    if (error) {\r\n      if (this.#notificationContext) {\r\n        this.#notificationContext.stay(\"danger\", {\r\n          data: {\r\n            headline: this.localize.term(\"wysiwg_updateSettingsError\"),\r\n            message: `${this.localize.term(\"wysiwg_updateSettingsErrorDescription\")} ${error}`,\r\n          },\r\n        });\r\n      }\r\n      buttonElement.state = \"failed\";\r\n      console.error(error);\r\n      return \"error\";\r\n    }\r\n    if (data !== undefined) {\r\n      if (this.#notificationContext) {\r\n        this.#notificationContext.peek(\"positive\", {\r\n          data: {\r\n            headline: this.localize.term(\"wysiwg_updateSettingsSuccess\"),\r\n            message: `${this.localize.term(\"wysiwg_updateSettingsSuccessDescription\")}`,\r\n          },\r\n        });\r\n      }\r\n      this.setVariations(data);\r\n      buttonElement.state = \"success\";\r\n    }\r\n  }\r\n\r\n  #onClickInstall = async (ev: Event) => {\r\n    const buttonElement = ev.target as UUIButtonElement;\r\n    if (!buttonElement || buttonElement.state === \"waiting\") return;\r\n    buttonElement.state = \"waiting\";\r\n\r\n    const { data, error } = await WysiwgUmbracoCommunityExtensionsService.install();\r\n\r\n    if (error) {\r\n      if (this.#notificationContext) {\r\n        this.#notificationContext.stay(\"danger\", {\r\n          data: {\r\n            headline: this.localize.term(\"wysiwg_installError\"),\r\n            message: `${this.localize.term(\"wysiwg_installErrorDescription\")} ${error}`,\r\n          },\r\n        });\r\n      }\r\n      buttonElement.state = \"failed\";\r\n      console.error(error);\r\n      return \"error\";\r\n    }\r\n\r\n    if (data !== undefined) {\r\n      if (data === \"Installed\") {\r\n        if (this.#notificationContext) {\r\n          this.#notificationContext.peek(\"positive\", {\r\n            data: {\r\n              headline: this.localize.term(\"wysiwg_installSuccess\"),\r\n              message: this.localize.term(\"wysiwg_installSuccessDescription\"),\r\n            },\r\n          });\r\n        }\r\n        this._updateStatus = VersionStatus.UpToDate;\r\n        buttonElement.state = \"success\";\r\n      } else {\r\n        buttonElement.state = \"failed\";\r\n      }\r\n    }\r\n  };\r\n\r\n  #onClickUninstall = async (ev: Event) => {\r\n    const buttonElement = ev.target as UUIButtonElement;\r\n    if (!buttonElement || buttonElement.state === \"waiting\") return;\r\n\r\n    const modalData: UmbConfirmModalData = {\r\n      color: 'danger',\r\n      headline: this.localize.term(\"wysiwg_unistallConfirmHeadline\", { debug: this._debug, }),\r\n      content: html`${this.localize.term(\"wysiwg_uninstallConfirmDescription\", { debug: this._debug, })}`,\r\n      confirmLabel: this.localize.term(\"wysiwg_okConfirmButtonLabel\", { debug: this._debug, }),\r\n      cancelLabel: this.localize.term(\"wysiwg_cancelConfirmButtonLabel\", { debug: this._debug, }),\r\n    };\r\n    await umbConfirmModal(this, modalData);\r\n    console.log(\"confirmed uninstall\");\r\n\r\n    buttonElement.state = \"waiting\";\r\n    this._uninstalling = true;\r\n\r\n    const { data, error } = await WysiwgUmbracoCommunityExtensionsService.unInstall();\r\n\r\n    this._uninstalling = false;\r\n\r\n    if (error) {\r\n      if (this.#notificationContext) {\r\n        this.#notificationContext.stay(\"danger\", {\r\n          data: {\r\n            headline: this.localize.term(\"wysiwg_uninstallError\"),\r\n            message: `${this.localize.term(\"wysiwg_uninstallErrorDescription\")} ${error}`,\r\n          },\r\n        });\r\n        buttonElement.state = \"failed\";\r\n      }\r\n      console.error(error);\r\n      return \"error\";\r\n    }\r\n\r\n    if (data !== undefined) {\r\n      if (data === \"Uninstalled\") {\r\n        if (this.#notificationContext) {\r\n          this.#notificationContext.peek(\"positive\", {\r\n            data: {\r\n              headline: this.localize.term(\"wysiwg_uninstallSuccessTitle\"),\r\n              message: this.localize.term(\"wysiwg_uninstallSuccessDescription\")\r\n            },\r\n          });\r\n        }\r\n        buttonElement.state = \"success\";\r\n      } else {\r\n        buttonElement.state = \"failed\";\r\n      }\r\n      this._updateStatus = undefined;\r\n    }\r\n  };\r\n\r\n  private async getUpdateStatus() {\r\n    if (this._updateStatus) return;\r\n\r\n    const { data, error } =\r\n      await WysiwgUmbracoCommunityExtensionsService.getUpdateStatusCode();\r\n\r\n    if (error) {\r\n      console.error(error);\r\n      if (this.#notificationContext) {\r\n        this.#notificationContext.stay(\"danger\", {\r\n          data: {\r\n            headline: this.localize.term(\"wysiwg_versionError\"),\r\n            message: `${this.localize.term(\"wysiwg_versionErrorDescription\")} ${error}`,\r\n          },\r\n        });\r\n      }\r\n    }\r\n\r\n    if (data !== undefined) {\r\n      this._updateStatus = data;\r\n    }\r\n  }\r\n\r\n  // private async getServerInfo() {\r\n  //   if (this._updateStatus) return;\r\n\r\n  //   const { data, error } =\r\n  //     await ServerService.getServerInformation();\r\n\r\n  //   if (error) {\r\n  //     console.error(error);\r\n  //     if (this.#notificationContext) {\r\n  //       this.#notificationContext.stay(\"danger\", {\r\n  //         data: {\r\n  //           headline: this.localize.term(\"wysiwg_serverInfoError\"),\r\n  //           message: `${this.localize.term(\"wysiwg_serverInfoErrorDescription\")} ${error}`,\r\n  //         },\r\n  //       });\r\n  //     }\r\n  //   }\r\n\r\n  //   if (data !== undefined) {\r\n  //     this._serverInfo = data;\r\n  //     const assemblyVersion = this._serverInfo?.assemblyVersion.split(\".\");\r\n  //     this._version.major = assemblyVersion.length > 0 ? parseInt(assemblyVersion[0]) : 0;\r\n  //     this._version.minor = assemblyVersion.length > 1 ? parseInt(assemblyVersion[1]) : 0;\r\n  //     this._version.patch = assemblyVersion.length > 2 ? parseInt(assemblyVersion[2]) : 0;\r\n  //   }\r\n  // }\r\n\r\n  private async getVariations() {\r\n    const { data, error } = await WysiwgUmbracoCommunityExtensionsService.getVariations();\r\n\r\n    if (error) {\r\n      if (this.#notificationContext) {\r\n        this.#notificationContext.stay(\"danger\", {\r\n          data: {\r\n            headline: this.localize.term(\"wysiwg_variationsError\"),\r\n            message: `${this.localize.term(\"wysiwg_variationsErrorDescription\")} ${error}`,\r\n          },\r\n        });\r\n      }\r\n      return \"error\";\r\n    }\r\n\r\n    if (data !== undefined) {\r\n      this.setVariations(data);\r\n    }\r\n  }\r\n\r\n  private setVariations(data: GetVariationsResponse) {\r\n    this._variations = data;\r\n    this._varyByCulture = this._variations.indexOf(\"culture\") !== -1;\r\n    this._varyBySegment = this._variations.indexOf(\"segment\") !== -1;\r\n  }\r\n\r\n  render() {\r\n    if (!this._contextCurrentUser?.isAdmin) {\r\n      return html`<umb-localize key=\"wysiwg_\" .debug=${this._debug}>\r\n      <p>Only admins can see this dashboard</p>\r\n      </umb-localize>`;\r\n    }\r\n\r\n    this.getUpdateStatus();\r\n\r\n    // this.getServerInfo();\r\n\r\n    this.setSemVersion();\r\n\r\n    this.getVariations()\r\n\r\n    return html`${this.renderSetupBox()} ${this.renderUpdateBox()}`;\r\n  }\r\n\r\n  private renderSetupBox() {\r\n    if (this._updateStatus === undefined) { return this.renderUninstallBox(); }\r\n\r\n    if (this._updateStatus === VersionStatus.UpToDate) { return this.renderUninstallBox(); }\r\n\r\n    const buttonLabel = this._updateStatus === VersionStatus.Install\r\n      ? this.localize.term(\"wysiwg_setupButtonLabel\", { debug: this._debug, })\r\n      : this.localize.term(\"wysiwg_updateButtonLabel\", { debug: this._debug, });\r\n\r\n    return html`\r\n      <uui-box headline=${this.localize.term(\"wysiwg_setupTitle\", {\r\n      debug: this._debug,\r\n    })}>\r\n        <uui-button\r\n          color=\"positive\"\r\n          look=\"primary\"\r\n          @click=\"${this.#onClickInstall}\"\r\n        >\r\n        ${buttonLabel}\r\n        </uui-button>\r\n        <div slot=\"header\"></div>\r\n        <umb-localize key=\"wysiwg_setupButtonDescription\" .debug=${this._debug}>\r\n          <p>\r\n            This will create the document and data types needed for WYSIWG block\r\n            editor views.\r\n          </p>\r\n        </umb-localize>\r\n      </uui-box>\r\n    `;\r\n  }\r\n\r\n  private renderUpdateBox() {\r\n    if (this._uninstalling || this._updateStatus === undefined) { return; }\r\n\r\n    if (this._updateStatus !== VersionStatus.UpToDate) { return; }\r\n\r\n    const buttonLabel = this.localize.term(\"wysiwg_cultureSegmentButtonLabel\", { debug: this._debug, });\r\n\r\n    return html`\r\n      <uui-box headline=${this.localize.term(\"wysiwg_cultureSegmentTitle\", {\r\n      debug: this._debug,\r\n    })}>\r\n        <div slot=\"header\"></div>\r\n        <umb-localize key=\"wysiwg_cultureSegmentDescription\" .debug=${this._debug}>\r\n          <p>\r\n            This will update the culture and segment settings for the WYSIWG BlockGrid element types.\r\n          </p>\r\n        </umb-localize>\r\n        <p>\r\n          <uui-checkbox\r\n            @change=\"${this.#onChangeCulture}\"\r\n            ?checked=${this._varyByCulture}>Vary by culture</uui-checkbox><br />\r\n          ${this.renderSegmentCheckbox()}\r\n        </p>\r\n        <uui-button\r\n          color=\"positive\"\r\n          look=\"primary\"\r\n          @click=\"${this.#onClickUpdateSettings}\"\r\n        >\r\n        ${buttonLabel}\r\n        </uui-button>\r\n      </uui-box>\r\n    `;\r\n  }\r\n\r\n  private renderSegmentCheckbox() {\r\n    if (this._version.major > 15 || (this._version.major >= 15 && this._version.minor >= 4 && this._version.patch >= 0)) {\r\n      return html`\r\n      <uui-checkbox\r\n        disabled\r\n        ?checked=${this._varyBySegment}>Vary by segment</uui-checkbox>\r\n      `;\r\n    }\r\n\r\n    return html`\r\n    <uui-checkbox\r\n      @change=\"${this.#onChangeSegment}\"\r\n      ?checked=${this._varyBySegment}>Vary by segment</uui-checkbox>\r\n    `;\r\n  }\r\n\r\n  private renderUninstallBox() {\r\n    if (this._updateStatus === undefined) { return; }\r\n    if (this._updateStatus === VersionStatus.Install) { return; }\r\n\r\n    const buttonLabel = this.localize.term(\"wysiwg_uninstallButtonLabel\", { debug: this._debug, });\r\n    return html`\r\n      <uui-box headline=${this.localize.term(\"wysiwg_uninstallTitle\", {\r\n      debug: this._debug,\r\n    })}>\r\n        <div slot=\"header\"></div>\r\n        <umb-localize key=\"wysiwg_uninstallButtonDescription\" .debug=${this._debug}>\r\n          <p>\r\n            This will remove the document and data types needed for WYSIWG block\r\n            editor views.\r\n          </p>\r\n        </umb-localize>\r\n        <uui-button\r\n          color=\"danger\"\r\n          look=\"primary\"\r\n          @click=\"${this.#onClickUninstall}\"\r\n        >\r\n        ${buttonLabel}\r\n        </uui-button>\r\n      </uui-box>\r\n    `;\r\n  }\r\n\r\n  static styles = [\r\n    css`\r\n      :host {\r\n        display: grid;\r\n        gap: var(--uui-size-layout-1);\r\n        padding: var(--uui-size-layout-1);\r\n        grid-template-columns: 1fr 1fr 1fr;\r\n      }\r\n\r\n      uui-box {\r\n        margin-bottom: var(--uui-size-layout-1);\r\n      }\r\n\r\n      h2 {\r\n        margin-top: 0;\r\n      }\r\n\r\n      .wide {\r\n        grid-column: span 3;\r\n      }\r\n    `,\r\n  ];\r\n}\r\n\r\nexport default WysiwgDashboardElement;\r\n\r\ndeclare global {\r\n  interface HTMLElementTagNameMap {\r\n    \"wysiwg-dashboard\": WysiwgDashboardElement;\r\n  }\r\n}\r\n"],"names":["VersionStatus","VersionStatus2","CommonUtilities","localize","notificationContext","data","error","ServerService","serverInfo","assemblyVersion","_notificationContext","_onChangeCulture","_onChangeSegment","_onClickUpdateSettings","_onClickInstall","_onClickUninstall","WysiwgDashboardElement","UmbElementMixin","LitElement","__privateAdd","ev","checkboxElement","buttonElement","options","WysiwgUmbracoCommunityExtensionsService","__privateGet","modalData","html","umbConfirmModal","UMB_NOTIFICATION_CONTEXT","__privateSet","UMB_CURRENT_USER_CONTEXT","currentUserContext","currentUser","_a","version","buttonLabel","css","__decorateClass","state","customElement","WysiwgDashboardElement$1"],"mappings":"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"}