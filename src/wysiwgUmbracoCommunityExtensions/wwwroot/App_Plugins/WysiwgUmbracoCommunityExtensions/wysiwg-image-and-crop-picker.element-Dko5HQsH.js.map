{"version":3,"file":"wysiwg-image-and-crop-picker.element-Dko5HQsH.js","sources":["../../../Wysiwg/src/property-editors/picture/wysiwg-input-rich-media.element.ts","../../../Wysiwg/src/property-editors/picture/wysiwg-image-and-crop-picker.element.ts"],"sourcesContent":["import { UmbChangeEvent } from \"@umbraco-cms/backoffice/event\";\r\nimport { css, customElement, html, nothing, property, repeat, state } from \"@umbraco-cms/backoffice/external/lit\";\r\nimport { UmbId } from \"@umbraco-cms/backoffice/id\";\r\nimport { UmbLitElement } from \"@umbraco-cms/backoffice/lit-element\";\r\nimport { UMB_IMAGE_CROPPER_EDITOR_MODAL, UMB_MEDIA_ITEM_REPOSITORY_ALIAS, UMB_MEDIA_PICKER_MODAL, UmbCropModel, UmbMediaItemModel, UmbMediaPickerPropertyValueEntry, UmbUploadableItem } from \"@umbraco-cms/backoffice/media\";\r\nimport { UMB_MODAL_MANAGER_CONTEXT, umbConfirmModal } from \"@umbraco-cms/backoffice/modal\";\r\nimport { UmbRepositoryItemsManager } from \"@umbraco-cms/backoffice/repository\";\r\nimport { UmbModalRouteBuilder, UmbModalRouteRegistrationController } from \"@umbraco-cms/backoffice/router\";\r\nimport { UmbSorterController, UmbSorterResolvePlacementAsGrid } from \"@umbraco-cms/backoffice/sorter\";\r\nimport { UmbTreeStartNode } from \"@umbraco-cms/backoffice/tree\";\r\nimport { UMB_VALIDATION_EMPTY_LOCALIZATION_KEY, UmbFormControlMixin } from \"@umbraco-cms/backoffice/validation\";\r\nimport { UmbVariantId } from \"@umbraco-cms/backoffice/variant\";\r\n\r\ntype RichMediaCardModel = {\r\n  unique: string;\r\n  media: string;\r\n  name: string;\r\n  src?: string;\r\n  icon?: string;\r\n  isTrashed?: boolean;\r\n};\r\n\r\n// this is based on a copy of class UmbInputRichMediaElement from \"@umbraco-cms/backoffice/media\"; which is not extendable.\r\nconst elementName = 'wysiwg-input-rich-media';\r\n@customElement(elementName)\r\nexport class WysiwgInputRichMediaElement extends UmbFormControlMixin<\r\n  Array<UmbMediaPickerPropertyValueEntry>,\r\n  typeof UmbLitElement,\r\n  undefined\r\n>(UmbLitElement, undefined) {\r\n  //#region unchanged\r\n  #sorter = new UmbSorterController<UmbMediaPickerPropertyValueEntry>(this, {\r\n    getUniqueOfElement: (element) => {\r\n      return element.id;\r\n    },\r\n    getUniqueOfModel: (modelEntry) => {\r\n      return modelEntry.key;\r\n    },\r\n    identifier: 'Umb.SorterIdentifier.InputRichMedia',\r\n    itemSelector: 'uui-card-media',\r\n    containerSelector: '.container',\r\n    resolvePlacement: UmbSorterResolvePlacementAsGrid,\r\n    onChange: ({ model }) => {\r\n      this.value = model;\r\n      this.dispatchEvent(new UmbChangeEvent());\r\n    },\r\n  });\r\n\r\n  /**\r\n   * Sets the input to required, meaning validation will fail if the value is empty.\r\n   * @type {boolean}\r\n   */\r\n  @property({ type: Boolean })\r\n  required?: boolean;\r\n\r\n  @property({ type: String })\r\n  requiredMessage?: string;\r\n\r\n  /**\r\n   * This is a minimum amount of selected items in this input.\r\n   * @type {number}\r\n   * @attr\r\n   * @default 0\r\n   */\r\n  @property({ type: Number })\r\n  public min = 0;\r\n\r\n  /**\r\n   * Min validation message.\r\n   * @type {boolean}\r\n   * @attr\r\n   * @default\r\n   */\r\n  @property({ type: String, attribute: 'min-message' })\r\n  minMessage = 'This field need more items';\r\n\r\n  /**\r\n   * This is a maximum amount of selected items in this input.\r\n   * @type {number}\r\n   * @attr\r\n   * @default Infinity\r\n   */\r\n  @property({ type: Number })\r\n  public max = Infinity;\r\n\r\n  /**\r\n   * Max validation message.\r\n   * @type {boolean}\r\n   * @attr\r\n   * @default\r\n   */\r\n  @property({ type: String, attribute: 'min-message' })\r\n  maxMessage = 'This field exceeds the allowed amount of items';\r\n\r\n  @property({ type: Array })\r\n  public override set value(value: Array<UmbMediaPickerPropertyValueEntry> | undefined) {\r\n    super.value = value;\r\n    this.#sorter.setModel(value);\r\n    this.#itemManager.setUniques(value?.map((x) => x.mediaKey));\r\n    // Maybe the new value is using an existing media, and there we need to update the cards despite no repository update.\r\n    this.#populateCards();\r\n  }\r\n  public override get value(): Array<UmbMediaPickerPropertyValueEntry> | undefined {\r\n    return super.value;\r\n  }\r\n\r\n  @property({ type: Array })\r\n  allowedContentTypeIds?: string[] | undefined;\r\n\r\n  @property({ type: Object, attribute: false })\r\n  startNode?: UmbTreeStartNode;\r\n\r\n  @property({ type: Boolean })\r\n  multiple = false;\r\n\r\n  @property({ type: Array })\r\n  public preselectedCrops?: Array<UmbCropModel>;\r\n\r\n  @property({ type: Boolean })\r\n  public set focalPointEnabled(value: boolean) {\r\n    this.#focalPointEnabled = value;\r\n  }\r\n  public get focalPointEnabled(): boolean {\r\n    return this.#focalPointEnabled;\r\n  }\r\n  #focalPointEnabled: boolean = false;\r\n\r\n  @property()\r\n  /** @deprecated will be removed in v17 */\r\n  public set alias(value: string | undefined) {\r\n    if(!value) {}\r\n    //this.#modalRouter.setUniquePathValue('propertyAlias', value);\r\n  }\r\n  public get alias(): string | undefined {\r\n    return undefined; //this.#modalRouter.getUniquePathValue('propertyAlias');\r\n  }\r\n\r\n  @property()\r\n  /** @deprecated will be removed in v17 */\r\n  public set variantId(value: string | UmbVariantId | undefined) {\r\n    if(!value) {}\r\n    //this.#modalRouter.setUniquePathValue('variantId', value?.toString());\r\n  }\r\n  public get variantId(): string | undefined {\r\n    return undefined; //this.#modalRouter.getUniquePathValue('variantId');\r\n  }\r\n\r\n  /**\r\n   * Sets the input to readonly mode, meaning value cannot be changed but still able to read and select its content.\r\n   * @type {boolean}\r\n   * @attr\r\n   * @default\r\n   */\r\n  @property({ type: Boolean, reflect: true })\r\n  public get readonly() {\r\n    return this.#readonly;\r\n  }\r\n  public set readonly(value) {\r\n    this.#readonly = value;\r\n\r\n    if (this.#readonly) {\r\n      this.#sorter.disable();\r\n    } else {\r\n      this.#sorter.enable();\r\n    }\r\n  }\r\n  #readonly = false;\r\n\r\n  @state()\r\n  private _cards: Array<RichMediaCardModel> = [];\r\n\r\n  @state()\r\n  private _routeBuilder?: UmbModalRouteBuilder;\r\n\r\n  readonly #itemManager = new UmbRepositoryItemsManager<UmbMediaItemModel>(this, UMB_MEDIA_ITEM_REPOSITORY_ALIAS);\r\n\r\n  constructor() {\r\n    super();\r\n\r\n    this.observe(this.#itemManager.items, () => {\r\n      this.#populateCards();\r\n    });\r\n\r\n    new UmbModalRouteRegistrationController(this, UMB_IMAGE_CROPPER_EDITOR_MODAL)\r\n      .addAdditionalPath(':key')\r\n      .onSetup((params) => {\r\n        const key = params.key;\r\n        if (!key) return false;\r\n\r\n        const item = this.value?.find((item) => item.key === key);\r\n        if (!item) return false;\r\n\r\n        return {\r\n          data: {\r\n            cropOptions: this.preselectedCrops,\r\n            hideFocalPoint: !this.focalPointEnabled,\r\n            key,\r\n            unique: item.mediaKey,\r\n            pickableFilter: this.#pickableFilter,\r\n          },\r\n          value: {\r\n            crops: item.crops ?? [],\r\n            focalPoint: item.focalPoint ?? { left: 0.5, top: 0.5 },\r\n            src: '',\r\n            key,\r\n            unique: item.mediaKey,\r\n          },\r\n        };\r\n      })\r\n      .onSubmit((value) => {\r\n        this.value = this.value?.map((item) => {\r\n          if (item.key !== value.key) return item;\r\n\r\n          const focalPoint = this.focalPointEnabled ? value.focalPoint : null;\r\n          const crops = value.crops;\r\n          const mediaKey = value.unique;\r\n\r\n          // Note: If the mediaKey changes we will change the key which causes cards to update\r\n          const key = mediaKey === item.mediaKey ? item.key : UmbId.new();\r\n\r\n          return { ...item, crops, mediaKey, focalPoint, key };\r\n        });\r\n\r\n        this.dispatchEvent(new UmbChangeEvent());\r\n      })\r\n      .observeRouteBuilder((routeBuilder) => {\r\n        this._routeBuilder = routeBuilder;\r\n      });\r\n\r\n    this.addValidator(\r\n      'valueMissing',\r\n      () => this.requiredMessage ?? UMB_VALIDATION_EMPTY_LOCALIZATION_KEY,\r\n      () => {\r\n        return !this.readonly && !!this.required && (!this.value || this.value.length === 0);\r\n      },\r\n    );\r\n\r\n    this.addValidator(\r\n      'rangeUnderflow',\r\n      () => this.minMessage,\r\n      () =>\r\n        !this.readonly &&\r\n        // Only if min is set:\r\n        !!this.min &&\r\n        // if the value is empty and not required, we should not validate the min:\r\n        !(this.value?.length === 0 && this.required == false) &&\r\n        // Validate the min:\r\n        (this.value?.length ?? 0) < this.min,\r\n    );\r\n    this.addValidator(\r\n      'rangeOverflow',\r\n      () => this.maxMessage,\r\n      () => !this.readonly && !!this.value && !!this.max && this.value?.length > this.max,\r\n    );\r\n  }\r\n\r\n  protected override getFormElement() {\r\n    return undefined;\r\n  }\r\n\r\n  async #populateCards() {\r\n    const mediaItems = this.#itemManager.getItems();\r\n\r\n    if (!mediaItems.length) {\r\n      this._cards = [];\r\n      return;\r\n    }\r\n    // Check if all media items is loaded.\r\n    // But notice, it would be nicer UX if we could show a loading state on the cards that are missing(loading) their items.\r\n    const missingCards = mediaItems.filter((item) => !this._cards.find((card) => card.unique === item.unique));\r\n    const removedCards = this._cards.filter((card) => !mediaItems.find((item) => card.unique === item.unique));\r\n    if (missingCards.length === 0 && removedCards.length === 0) return;\r\n\r\n    this._cards =\r\n      this.value?.map((item) => {\r\n        const media = mediaItems.find((x) => x.unique === item.mediaKey);\r\n        return {\r\n          unique: item.key,\r\n          media: item.mediaKey,\r\n          name: media?.name ?? '',\r\n          icon: media?.mediaType?.icon,\r\n          isTrashed: media?.isTrashed ?? false,\r\n        };\r\n      }) ?? [];\r\n  }\r\n\r\n  #pickableFilter: (item: UmbMediaItemModel) => boolean = (item) => {\r\n    if (this.allowedContentTypeIds && this.allowedContentTypeIds.length > 0) {\r\n      return this.allowedContentTypeIds.includes(item.mediaType.unique);\r\n    }\r\n    return true;\r\n  };\r\n\r\n  #addItems(uniques: string[]) {\r\n    if (!uniques.length) return;\r\n\r\n    const additions: Array<UmbMediaPickerPropertyValueEntry> = uniques.map((unique) => ({\r\n      key: UmbId.new(),\r\n      mediaKey: unique,\r\n      mediaTypeAlias: '',\r\n      crops: [],\r\n      focalPoint: null,\r\n    }));\r\n\r\n    this.value = [...(this.value ?? []), ...additions];\r\n    this.dispatchEvent(new UmbChangeEvent());\r\n  }\r\n\r\n  async #openPicker() {\r\n    const modalManager = await this.getContext(UMB_MODAL_MANAGER_CONTEXT);\r\n    const modalHandler = modalManager?.open(this, UMB_MEDIA_PICKER_MODAL, {\r\n      data: {\r\n        multiple: this.multiple,\r\n        startNode: this.startNode,\r\n        pickableFilter: this.#pickableFilter,\r\n      },\r\n      value: { selection: [] },\r\n    });\r\n\r\n    const data = await modalHandler?.onSubmit().catch(() => null);\r\n    if (!data) return;\r\n\r\n    const selection = data.selection.filter((x) => x !== null) as string[];\r\n    this.#addItems(selection);\r\n  }\r\n\r\n  async #onRemove(item: RichMediaCardModel) {\r\n    await umbConfirmModal(this, {\r\n      color: 'danger',\r\n      headline: `${this.localize.term('actions_remove')} ${item.name}?`,\r\n      content: `${this.localize.term('defaultdialogs_confirmremove')} ${item.name}?`,\r\n      confirmLabel: this.localize.term('actions_remove'),\r\n    });\r\n\r\n    this.value = this.value?.filter((x) => x.key !== item.unique);\r\n\r\n    this.dispatchEvent(new UmbChangeEvent());\r\n  }\r\n\r\n  async #onUploadCompleted(e: CustomEvent) {\r\n    const completed = e.detail as Array<UmbUploadableItem>;\r\n    const uploaded = completed.map((file) => file.unique);\r\n    this.#addItems(uploaded);\r\n  }\r\n  //#endregion\r\n\r\n  override render() {\r\n    return html`\r\n    ${this.#renderDropzone()}\r\n    <div class=\"container\">${this.#renderItems()} ${this.#renderAddButton()}</div>\r\n  `;\r\n  }\r\n\r\n  #renderDropzone() {\r\n    if (this.readonly) return nothing;\r\n    if (this._cards && this._cards.length >= this.max) return;\r\n    return html`<umb-dropzone ?multiple=${this.max > 1} @complete=${this.#onUploadCompleted}></umb-dropzone>`;\r\n  }\r\n\r\n  #renderItems() {\r\n    if (!this._cards.length) return;\r\n    return html`\r\n    ${repeat(\r\n      this._cards,\r\n      (item) => item.unique,\r\n      (item) => this.#renderItem(item),\r\n    )}\r\n  `;\r\n  }\r\n\r\n  #renderAddButton() {\r\n    if (this._cards && this._cards.length && !this.multiple) return;\r\n    if (this.readonly && this._cards.length > 0) {\r\n      return nothing;\r\n    } else {\r\n      return html`\r\n      <uui-button\r\n        id=\"btn-add\"\r\n        look=\"placeholder\"\r\n        @blur=${() => {\r\n          this.pristine = false;\r\n          this.checkValidity();\r\n        }}\r\n        @click=${this.#openPicker}\r\n        label=${this.localize.term('general_choose')}\r\n        ?disabled=${this.readonly}>\r\n        <uui-icon name=\"icon-add\"></uui-icon>\r\n        ${this.localize.term('general_choose')}\r\n      </uui-button>\r\n    `;\r\n    }\r\n  }\r\n\r\n  #renderItem(item: RichMediaCardModel) {\r\n    if (!item.unique) return nothing;\r\n    const href = this.readonly ? undefined : this._routeBuilder?.({ key: item.unique });\r\n    return html`\r\n    <uui-card-media id=${item.unique} name=${item.name} .href=${href} ?readonly=${this.readonly}>\r\n      <umb-imaging-thumbnail\r\n        unique=${item.media}\r\n        alt=${item.name}\r\n        icon=${item.icon ?? 'icon-picture'}></umb-imaging-thumbnail>\r\n      ${this.#renderIsTrashed(item)} ${this.#renderActions(item)}\r\n    </uui-card-media>\r\n  `;\r\n  }\r\n\r\n  #renderActions(item: RichMediaCardModel) {\r\n    if (this.readonly) return nothing;\r\n    return html`\r\n    <uui-action-bar slot=\"actions\">\r\n      <uui-button label=${this.localize.term('general_remove')} look=\"secondary\" @click=${() => this.#onRemove(item)}>\r\n        <uui-icon name=\"icon-trash\"></uui-icon>\r\n      </uui-button>\r\n    </uui-action-bar>\r\n  `;\r\n  }\r\n\r\n  #renderIsTrashed(item: RichMediaCardModel) {\r\n    if (!item.isTrashed) return;\r\n    return html`\r\n    <uui-tag size=\"s\" slot=\"tag\" color=\"danger\">\r\n      <umb-localize key=\"mediaPicker_trashed\">Trashed</umb-localize>\r\n    </uui-tag>\r\n  `;\r\n  }\r\n\r\n  static override styles = [\r\n    css`\r\n    :host {\r\n      position: relative;\r\n    }\r\n    .container {\r\n      display: grid;\r\n      grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));\r\n      grid-auto-rows: 150px;\r\n      gap: var(--uui-size-space-5);\r\n    }\r\n\r\n    #btn-add {\r\n      text-align: center;\r\n      height: 100%;\r\n    }\r\n\r\n    uui-icon {\r\n      display: block;\r\n      margin: 0 auto;\r\n    }\r\n\r\n    uui-card-media umb-icon {\r\n      font-size: var(--uui-size-8);\r\n    }\r\n\r\n    uui-card-media[drag-placeholder] {\r\n      opacity: 0.2;\r\n    }\r\n    img {\r\n      background-image: url('data:image/svg+xml;charset=utf-8,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"100\" height=\"100\" fill-opacity=\".1\"><path d=\"M50 0h50v50H50zM0 50h50v50H0z\"/></svg>');\r\n      background-size: 10px 10px;\r\n      background-repeat: repeat;\r\n    }\r\n  `,\r\n  ];\r\n}\r\n\r\nexport default WysiwgInputRichMediaElement;\r\n\r\ndeclare global {\r\n  interface HTMLElementTagNameMap {\r\n    [elementName]: WysiwgInputRichMediaElement;\r\n  }\r\n}\r\n","import {\r\n  UMB_MEDIA_ENTITY_TYPE,\r\n  UmbMediaPickerPropertyValueEntry,\r\n} from \"@umbraco-cms/backoffice/media\";\r\nimport {\r\n  css,\r\n  customElement,\r\n  html,\r\n  property,\r\n  state,\r\n} from \"@umbraco-cms/backoffice/external/lit\";\r\nimport { UmbLitElement } from \"@umbraco-cms/backoffice/lit-element\";\r\nimport { UMB_PROPERTY_CONTEXT } from \"@umbraco-cms/backoffice/property\";\r\nimport {\r\n  UmbPropertyEditorConfigCollection,\r\n  UmbPropertyEditorUiElement,\r\n  UmbPropertyValueChangeEvent,\r\n} from \"@umbraco-cms/backoffice/property-editor\";\r\nimport type { UmbTreeStartNode } from \"@umbraco-cms/backoffice/tree\";\r\nimport {\r\n  UMB_VALIDATION_EMPTY_LOCALIZATION_KEY,\r\n  UmbFormControlMixin,\r\n} from \"@umbraco-cms/backoffice/validation\";\r\n\r\nimport {\r\n  UUISelectElement,\r\n  UUISelectEvent,\r\n} from \"@umbraco-cms/backoffice/external/uui\";\r\nimport {\r\n  WysiwgCropModel,\r\n  WysiwgMediaPickerPropertyValueEntry,\r\n  WysiwgMediaPickerPropertyValues,\r\n} from \"./types\";\r\nimport { CropsData, CropsResponse, MediaTypeModel, MediaTypesResponse, WysiwgUmbracoCommunityExtensionsService } from \"../../api\";\r\nimport { UmbNumberRangeValueType } from \"@umbraco-cms/backoffice/models\";\r\nimport { WysiwgCroppedImageElement } from \"./wysiwg-cropped-image.element.js\";\r\n\r\nimport type { WysiwgInputRichMediaElement } from \"./wysiwg-input-rich-media.element.js\";\r\nimport './wysiwg-input-rich-media.element.js';\r\n\r\n/**\r\n * based on @element umb-property-editor-ui-media-picker\r\n */\r\n\r\nconst elementName = \"wysiwg-image-and-crop-picker\";\r\n@customElement(elementName)\r\nexport class WysiwgImageAndCropPickerElement\r\n  extends UmbFormControlMixin<WysiwgMediaPickerPropertyValues | undefined, typeof UmbLitElement, undefined>(UmbLitElement)\r\n  implements UmbPropertyEditorUiElement {\r\n\r\n  //#region properties, states, ctor, methods\r\n  //#region properties\r\n  public set config(config: UmbPropertyEditorConfigCollection | undefined) {\r\n    if (!config) return;\r\n\r\n    this._allowedMediaTypes = config.getValueByAlias<string>(\"filter\")?.split(\",\") ?? [];\r\n    if (this._allowedMediaTypes.length === 0) {\r\n      this.getMediaTypes();\r\n    }\r\n    this._focalPointEnabled = Boolean(config.getValueByAlias(\"enableLocalFocalPoint\"));\r\n    this._multiple = Boolean(config.getValueByAlias(\"multiple\"));\r\n\r\n    this._preselectedCrops = config?.getValueByAlias<Array<WysiwgCropModel>>(\"crops\") ?? [];\r\n\r\n    if (this._preselectedCrops.length > 0) {\r\n      const defaultCrop = this._preselectedCrops.find((item) => !!item.defaultCrop);\r\n      this._selectedCropAlias = this.value?.[0]?.selectedCropAlias ?? defaultCrop?.alias ?? \"\";\r\n      const options = this._preselectedCrops.map((item) => ({\r\n        name: item.label?.toString() ?? item.alias,\r\n        value: item.alias,\r\n        selected: item.alias === this._selectedCropAlias,\r\n      })) as Array<Option & { invalid?: boolean }>;\r\n      this._options = [\r\n        { name: \"\", value: \"\", },\r\n        ...options,\r\n      ];\r\n    }\r\n\r\n    this.getImageCropperCrops();\r\n\r\n    const startNodeId = config.getValueByAlias<string>(\"startNodeId\") ?? \"\";\r\n    this._startNode = startNodeId ? { unique: startNodeId, entityType: UMB_MEDIA_ENTITY_TYPE } : undefined;\r\n\r\n    const minMax = config.getValueByAlias<UmbNumberRangeValueType>('validationLimit');\r\n    this._min = minMax?.min ?? 0;\r\n    this._max = minMax?.max ?? Infinity;\r\n  }\r\n\r\n  /**\r\n   * Sets the input to mandatory, meaning validation will fail if the value is empty.\r\n   * @type {boolean}\r\n   */\r\n  @property({ type: Boolean })\r\n  mandatory?: boolean;\r\n\r\n  @property({ type: String })\r\n  mandatoryMessage = UMB_VALIDATION_EMPTY_LOCALIZATION_KEY;\r\n\r\n  /**\r\n   * Sets the input to readonly mode, meaning value cannot be changed but still able to read and select its content.\r\n   * @type {boolean}\r\n   * @attr\r\n   * @default false\r\n   */\r\n  @property({ type: Boolean, reflect: true })\r\n  readonly = false\r\n\r\n  //#endregion\r\n\r\n  //#region states\r\n  @state()\r\n  private _startNode?: UmbTreeStartNode;\r\n\r\n  @state()\r\n  private _focalPointEnabled: boolean = false;\r\n\r\n  @state()\r\n  private _preselectedCrops: Array<WysiwgCropModel> = [];\r\n\r\n  @state()\r\n  private _allowedMediaTypes: Array<string> = [];\r\n\r\n  @state()\r\n  private _multiple: boolean = false;\r\n\r\n  @state()\r\n  private _min: number = 0;\r\n\r\n  @state()\r\n  private _max: number = Infinity;\r\n\r\n  @state()\r\n  private _alias?: string;\r\n\r\n  @state()\r\n  private _variantId?: string;\r\n\r\n  // additions\r\n  @state()\r\n  private _selectedCropAlias: string = \"\";\r\n\r\n  @state()\r\n  private _options: Array<Option & { invalid?: boolean }> = [];\r\n\r\n  @state()\r\n  private _mediaTypes?: Array<MediaTypeModel> = [];\r\n\r\n  @state()\r\n  private _imgSrc: string = \"\";\r\n  @state()\r\n  private _prevImgSrc: string = \"\";\r\n  //#endregion\r\n\r\n  constructor() {\r\n    super();\r\n\r\n    this.consumeContext(UMB_PROPERTY_CONTEXT, (context) => {\r\n      this.observe(context.alias, (alias) => (this._alias = alias));\r\n      this.observe(context.variantId, (variantId) => (this._variantId = variantId?.toString() || \"invariant\"));\r\n    });\r\n  }\r\n\r\n  override firstUpdated() {\r\n    this.addFormControlElement(this.shadowRoot!.querySelector(\"wysiwg-input-rich-media\")!);\r\n    const cropSelect = this.shadowRoot?.querySelector<UUISelectElement>(\"umb-input-dropdown-list\");\r\n    if (cropSelect) {\r\n      this.addFormControlElement(this.shadowRoot!.querySelector(\"umb-input-dropdown-list\")!);\r\n    }\r\n  }\r\n\r\n  override focus(options?: FocusOptions) {\r\n    console.log(\"focus(options) options = \", options);\r\n    return this.shadowRoot?.querySelector<WysiwgInputRichMediaElement>(\"wysiwg-input-rich-media\")?.focus();\r\n  }\r\n\r\n  private async getMediaTypes() {\r\n    await this.apiMediaTypes().then((data) => {\r\n      if (data === \"error\") {\r\n        this._mediaTypes = [];\r\n        return;\r\n      } else if (data === \"no data\") {\r\n        this._mediaTypes = [];\r\n        return;\r\n      }\r\n      const mediaTypes = data as Array<MediaTypeModel>;\r\n\r\n      this._mediaTypes = mediaTypes;\r\n      const imageType = this._mediaTypes?.find((type) => type.alias.toLowerCase() === \"image\");\r\n      this._allowedMediaTypes = !imageType?.key ? [] : [imageType.key];\r\n    });\r\n  }\r\n\r\n  private async apiMediaTypes(): Promise<MediaTypesResponse | \"error\" | \"no data\"> {\r\n    const { data, error } = await WysiwgUmbracoCommunityExtensionsService.mediaTypes();\r\n    if (error) {\r\n      console.error(error);\r\n    }\r\n    if (data !== undefined) {\r\n      return data;\r\n    }\r\n    return \"no data\";\r\n  }\r\n\r\n  private async getImageCropperCrops(mediaKey?: string) {\r\n    if (!this._selectedCropAlias) { this._selectedCropAlias = this.value?.[0]?.selectedCropAlias ?? \"\"; }\r\n    await this.crops(mediaKey).then((data) => {\r\n      if (data === \"error\") {\r\n        this._preselectedCrops = [];\r\n        return;\r\n      } else if (data === \"no data\") {\r\n        this._preselectedCrops = [];\r\n        return;\r\n      }\r\n      const imageCrops = data as Array<WysiwgCropModel>;\r\n      var newOptions = imageCrops.map((item) => ({\r\n        name: `[${(item.label?.toString() ?? item.alias)}]`,\r\n        value: item.alias,\r\n        selected: item.alias === this._selectedCropAlias,\r\n      }));\r\n\r\n      this._options = [\r\n        ...this._options,\r\n        ...newOptions,\r\n      ];\r\n    });\r\n  }\r\n\r\n  private async crops(mediaKey?: string): Promise<CropsResponse | \"error\" | \"no data\"> {\r\n    const options: CropsData = {\r\n      query: {\r\n        mediaItemId: mediaKey ?? \"\",\r\n      },\r\n    };\r\n\r\n    const { data, error } =\r\n      await WysiwgUmbracoCommunityExtensionsService.crops(options);\r\n\r\n    if (error) {\r\n      console.error(error);\r\n      return \"error\";\r\n    }\r\n\r\n    if (data !== undefined) {\r\n      return data;\r\n    }\r\n\r\n    return \"no data\";\r\n  }\r\n\r\n  #onChangeImage(event: CustomEvent & { target: WysiwgInputRichMediaElement }) {\r\n    if (this._imgSrc !== this._prevImgSrc) {\r\n      console.debug(\"imgSrc changed\", this._imgSrc, this._prevImgSrc);\r\n      this._prevImgSrc = this._imgSrc;\r\n    }\r\n\r\n    const isEmpty = event.target.value?.length === 0;\r\n    const mediaItems: UmbMediaPickerPropertyValueEntry | undefined =\r\n      event.target.value?.find((item) => !!item.mediaKey) ?? undefined;\r\n    let newValue = isEmpty ? undefined : mediaItems;\r\n\r\n    const selectedCropAlias = this.value?.[0]?.selectedCropAlias ?? this._selectedCropAlias;\r\n\r\n    if (isEmpty) {\r\n      this._updateValue({\r\n        selectedCropAlias: selectedCropAlias,\r\n      }, true);\r\n    } else {\r\n      const crops = (newValue?.crops.length === 0) ? this._preselectedCrops : newValue?.crops;\r\n      this._updateValue({\r\n        key: newValue?.key,\r\n        mediaKey: newValue?.mediaKey,\r\n        mediaTypeAlias: newValue?.mediaTypeAlias,\r\n        focalPoint: newValue?.focalPoint,\r\n        crops: crops,\r\n        selectedCropAlias: selectedCropAlias,\r\n      } as UmbMediaPickerPropertyValueEntry);\r\n    }\r\n  }\r\n\r\n  #onChangeCrop(event: UUISelectEvent) {\r\n    const value = event.target.value as string;\r\n    this._selectedCropAlias = value;\r\n\r\n    this._updateValue({\r\n      selectedCropAlias: this._selectedCropAlias,\r\n    });\r\n  }\r\n\r\n  #onChangePreview(event: CustomEvent & { target: WysiwgCroppedImageElement }) {\r\n    if (event?.target?.value?.length > 0) {\r\n      this._updateValue({\r\n        cropUrl: event?.target?.value,\r\n      });\r\n    }\r\n  }\r\n\r\n  private _updateValue(fieldsToUpdate: Partial<WysiwgMediaPickerPropertyValueEntry>, deleteImage: boolean = false) {\r\n    const newValue: WysiwgMediaPickerPropertyValues = [];\r\n    if (!this.value || !this.value.length || deleteImage) {\r\n      const item = {\r\n        ...fieldsToUpdate,\r\n      } as WysiwgMediaPickerPropertyValueEntry;\r\n      newValue.push(item);\r\n    } else {\r\n      for (let i = 0; i < this.value.length; i++) {\r\n        const item = {\r\n          ...this.value[i],\r\n          ...fieldsToUpdate,\r\n        };\r\n        newValue.push(item);\r\n      }\r\n    }\r\n    this.value = newValue;\r\n    this.dispatchEvent(new UmbPropertyValueChangeEvent());\r\n  }\r\n\r\n  render() {\r\n    return html`\r\n    <div id=\"container\">\r\n      <div id=\"left\">\r\n        ${this.#renderEditImage()}\r\n      </div>\r\n      <div id=\"right\">\r\n        ${this.#renderPreviewImage()}\r\n        ${this.#renderDropdown()}\r\n      </div>\r\n    </div>`;\r\n  }\r\n\r\n  #renderPreviewImage() {\r\n    if (!this.value || !this.value.length || !this.value[0]?.mediaKey) { return; }\r\n\r\n    const media = this.value[0];\r\n\r\n    return html`<wysiwg-cropped-image .mediaItem=${media} @change=${this.#onChangePreview}></wysiwg-cropped-image>`;\r\n  }\r\n\r\n  #renderEditImage() {\r\n    return html`\r\n    <wysiwg-input-rich-media\r\n      .alias=${this._alias}\r\n      .allowedContentTypeIds=${this._allowedMediaTypes}\r\n      .focalPointEnabled=${this._focalPointEnabled}\r\n      .value=${this.value ?? []}\r\n      .max=${this._max}\r\n      .min=${this._min}\r\n      .preselectedCrops=${this._preselectedCrops}\r\n      .startNode=${this._startNode}\r\n      .variantId=${this._variantId}\r\n      .required=${this.mandatory}\r\n      .requiredMessage=${this.mandatoryMessage}\r\n      ?multiple=${this._multiple}\r\n      @change=${this.#onChangeImage}\r\n      ?readonly=${this.readonly}\r\n    >\r\n    </wysiwg-input-rich-media>\r\n  `;\r\n  }\r\n\r\n  #renderDropdown() {\r\n    const enabled = !!this.value?.length && !!this.value[0]?.mediaKey;\r\n    const label = \"crop-select\";\r\n\r\n    if (!this._options.length) return html`<uui-select label=${label}></uui-select>`;\r\n\r\n    return html`\r\n      <uui-select\r\n        label=${label}\r\n        .disabled=${!enabled}\r\n        .options=${this._options}\r\n        @change=${this.#onChangeCrop}\r\n        ?readonly=${this.readonly}\r\n      ></uui-select>\r\n    `;\r\n  }\r\n  //#endregion\r\n\r\n  static override readonly styles = [\r\n    UUISelectElement.styles,\r\n    css`\r\n      uui-select {\r\n        margin-top: 8px;\r\n      }\r\n\r\n      :host {\r\n        display: inline;\r\n      }\r\n\r\n      #container {\r\n        display: flex;\r\n        flex-wrap: wrap;\r\n        row-gap: 20px;\r\n        column-gap: 20px;\r\n        width: 100%;\r\n        min-width: 150px;\r\n        height: 100%;\r\n      }\r\n\r\n      #left, #right {\r\n        display: flex;\r\n        flex-direction: column;\r\n        position: relative;\r\n        width: 100%;\r\n        max-width: 200px;\r\n        min-width: 100px;\r\n      }\r\n      #left {\r\n        margin-right: 20px;\r\n      }\r\n    `,\r\n  ];\r\n}\r\n\r\nexport { WysiwgImageAndCropPickerElement as element };\r\n\r\ndeclare global {\r\n  interface HTMLElementTagNameMap {\r\n    [elementName]: WysiwgImageAndCropPickerElement;\r\n  }\r\n}\r\n"],"names":["_sorter","_focalPointEnabled","_readonly","_itemManager","_WysiwgInputRichMediaElement_instances","populateCards_fn","_pickableFilter","addItems_fn","openPicker_fn","onRemove_fn","onUploadCompleted_fn","renderDropzone_fn","renderItems_fn","renderAddButton_fn","renderItem_fn","renderActions_fn","renderIsTrashed_fn","elementName","WysiwgInputRichMediaElement","UmbFormControlMixin","UmbLitElement","__privateAdd","UmbSorterController","element","modelEntry","UmbSorterResolvePlacementAsGrid","model","UmbChangeEvent","UmbRepositoryItemsManager","UMB_MEDIA_ITEM_REPOSITORY_ALIAS","item","__privateGet","__privateMethod","UmbModalRouteRegistrationController","UMB_IMAGE_CROPPER_EDITOR_MODAL","params","key","_a","value","focalPoint","crops","mediaKey","UmbId","routeBuilder","UMB_VALIDATION_EMPTY_LOCALIZATION_KEY","_b","x","__privateSet","html","mediaItems","missingCards","card","removedCards","media","uniques","additions","unique","modalManager","UMB_MODAL_MANAGER_CONTEXT","modalHandler","UMB_MEDIA_PICKER_MODAL","data","selection","umbConfirmModal","uploaded","file","nothing","repeat","href","css","__decorateClass","property","state","customElement","_WysiwgImageAndCropPickerElement_instances","onChangeImage_fn","onChangeCrop_fn","onChangePreview_fn","renderPreviewImage_fn","renderEditImage_fn","renderDropdown_fn","WysiwgImageAndCropPickerElement","UMB_PROPERTY_CONTEXT","context","alias","variantId","config","defaultCrop","_c","options","startNodeId","UMB_MEDIA_ENTITY_TYPE","minMax","mediaTypes","imageType","type","error","WysiwgUmbracoCommunityExtensionsService","newOptions","fieldsToUpdate","deleteImage","newValue","i","UmbPropertyValueChangeEvent","event","isEmpty","selectedCropAlias","_d","enabled","label","UUISelectElement"],"mappings":"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"}