{"version":3,"file":"wysiwg-image-crop.element-DPB1PWCi.js","sources":["../../../Wysiwg/src/blocks/views/block-layout.view.ts","../../../Wysiwg/src/property-editors/picture/wysiwg-image-crop.element.ts","../../../Wysiwg/src/blocks/components/wysiwg-image-crop.element.ts"],"sourcesContent":["import { UmbTextStyles } from \"@umbraco-cms/backoffice/style\";\r\nimport {\r\n  html,\r\n  customElement,\r\n  LitElement,\r\n  property,\r\n  css,\r\n  nothing,\r\n  state,\r\n  styleMap,\r\n  StyleInfo,\r\n} from \"@umbraco-cms/backoffice/external/lit\";\r\nimport { UmbElementMixin } from \"@umbraco-cms/backoffice/element-api\";\r\nimport type { UmbBlockDataType } from \"@umbraco-cms/backoffice/block\";\r\nimport type {\r\n  UmbBlockEditorCustomViewConfiguration,\r\n  UmbBlockEditorCustomViewElement,\r\n} from \"@umbraco-cms/backoffice/block-custom-view\";\r\nimport {\r\n  UMB_PROPERTY_DATASET_CONTEXT,\r\n  UmbPropertyDatasetContext,\r\n  UmbPropertyValueDataPotentiallyWithEditorAlias,\r\n} from \"@umbraco-cms/backoffice/property\";\r\nimport { UmbBlockGridValueModel } from \"@umbraco-cms/backoffice/block-grid\";\r\nimport { BlockGridLayoutModel, MediaPickerValueModel } from \"../types\";\r\nimport { ImageUrlData, WysiwgUmbracoCommunityExtensionsService } from \"../..\";\r\n\r\n//this is based on a copy of\r\n// Umbraco-CMS\\src\\\r\n//   Umbraco.Web.UI.Client\\src\\packages\\\r\n//      block\\block-grid\\components\\block-grid-block\\block-grid-block.element.ts\r\n\r\nconst blockLayoutInlineStyleDefaults: StyleInfo = {\r\n  backgroundImage: \"none\",\r\n  backgroundPosition: \"inherit\",\r\n  backgroundRepeat: \"no-repeat\",\r\n  backgroundColor: \"transparent\",\r\n  padding: \"0\",\r\n}\r\nconst transparentBackgroundColor = \"#fff\";//work-a-round: color picker does not support transparent\r\n\r\nconst customElementName = \"wysiwg-block-layout-view\";\r\n@customElement(customElementName)\r\nexport class WysiwgBlockLayoutView\r\n  extends UmbElementMixin(LitElement)\r\n  implements UmbBlockEditorCustomViewElement {\r\n  //#region properties & ctor\r\n  @property({ attribute: false })\r\n  content?: UmbBlockDataType;\r\n\r\n  @property({ attribute: false })\r\n  label?: string;\r\n\r\n  @property({ type: String, reflect: false })\r\n  icon?: string;\r\n\r\n  @property({ attribute: false })\r\n  config?: UmbBlockEditorCustomViewConfiguration;\r\n\r\n  @property({ type: Boolean, reflect: true })\r\n  unpublished?: boolean;\r\n\r\n  @property({ attribute: false })\r\n  settings?: UmbBlockDataType;\r\n\r\n  private pageBackroundColor = blockLayoutInlineStyleDefaults.backgroundColor;\r\n\r\n  @state()\r\n  backgroundStyleMap: StyleInfo = blockLayoutInlineStyleDefaults;\r\n\r\n  private get backgroundStyles() {\r\n    return {\r\n      backgroundImage: this.backgroundStyleMap.backgroundImage,\r\n      backgroundRepeat: this.backgroundStyleMap.backgroundRepeat,\r\n      backgroundPosition: this.backgroundStyleMap.backgroundPosition,\r\n      backgroundColor: this.backgroundStyleMap.backgroundColor,\r\n      padding: this.backgroundStyleMap.padding,\r\n    } as StyleInfo;\r\n  }\r\n\r\n  private get backgroundStyleDefaults() {\r\n    return {\r\n      backgroundImage: blockLayoutInlineStyleDefaults.backgroundImage,\r\n      backgroundRepeat: blockLayoutInlineStyleDefaults.backgroundRepeat,\r\n      backgroundPosition: blockLayoutInlineStyleDefaults.backgroundPosition,\r\n      backgroundColor: blockLayoutInlineStyleDefaults.backgroundColor,\r\n      padding: blockLayoutInlineStyleDefaults.padding,\r\n    } as StyleInfo;\r\n  }\r\n  #datasetContext?: UmbPropertyDatasetContext;\r\n\r\n  constructor() {\r\n    super();\r\n    this.consumeContext(UMB_PROPERTY_DATASET_CONTEXT, async (context) =>\r\n      this.getSettings(context)\r\n    );\r\n  }\r\n\r\n  async getSettings(context: any) {\r\n    this.#datasetContext = context;\r\n    this.observe(\r\n      this.#datasetContext?.properties,\r\n      async (properties) => {\r\n        const pageProperties = properties as Array<UmbPropertyValueDataPotentiallyWithEditorAlias>;\r\n        if (pageProperties?.length) {\r\n          let pageBackgroundColor = pageProperties.find((v) => v.alias === \"pageBackgroundColor\")?.value as {\r\n            label: string;\r\n            value: string;\r\n          }\r\n          if (pageBackgroundColor?.value) {\r\n            this.pageBackroundColor = pageBackgroundColor.value;\r\n          }\r\n\r\n          const allGridValues = pageProperties\r\n            .filter((v) => v.editorAlias === \"Umbraco.BlockGrid\") as Array<UmbPropertyValueDataPotentiallyWithEditorAlias>;\r\n\r\n          const editSettingsPath = this.config?.editSettingsPath ?? \"\";\r\n          console.debug(\"editSettingsPath: \", editSettingsPath);\r\n\r\n          let thisGrid = allGridValues[0];\r\n          if (allGridValues.length > 1) {\r\n            for(let i = 0; i < allGridValues.length; i++) {\r\n              const grid = allGridValues[i];\r\n              if (grid.alias && (editSettingsPath.indexOf(grid.alias) >= 0)) {\r\n                thisGrid = grid;\r\n                break;\r\n              }\r\n            }\r\n          }\r\n          const gridValues = thisGrid.value as UmbBlockGridValueModel;\r\n          console.debug(\"thisGrid.alias: \", thisGrid.alias);\r\n\r\n          if (gridValues.settingsData?.length) {\r\n            const viewElement = this as UmbBlockEditorCustomViewElement;\r\n            const layout = gridValues.layout[\"Umbraco.BlockGrid\"]?.find(\r\n              (l) => l.contentKey === viewElement.contentKey\r\n            );\r\n            const setting = gridValues?.settingsData?.find(\r\n              (s) => s.key === layout?.settingsKey\r\n            );\r\n            const properties = setting?.values as BlockGridLayoutModel[] ?? [];\r\n            this.getBackgroudStyle(properties);\r\n            const backgroundImage = properties?.find((v) => v.alias === \"backgroundImage\")?.value as MediaPickerValueModel;\r\n            const mediaKey = backgroundImage?.length\r\n              ? backgroundImage[0].mediaKey\r\n              : \"\";\r\n            await this.#requestImageUrl(mediaKey)\r\n              .then((data) => {\r\n                if (data !== undefined && data !== \"error\") {\r\n                  this.getBackgroudImageStyle(data);\r\n                }\r\n              });\r\n          }\r\n        }\r\n      },\r\n      \"_observeProperties\"\r\n    );\r\n  }\r\n  //#endregion\r\n\r\n  getBackgroudStyle(properties: BlockGridLayoutModel[]) {\r\n    const inlineStyles = this.backgroundStyleDefaults;\r\n\r\n    if (properties?.length) {\r\n      const backgroundColor = (\r\n        (properties?.find((v) => v.alias === \"backgroundColor\")?.value ?? {}) as {\r\n          label: string;\r\n          value: string;\r\n        }\r\n      ).value;\r\n      const transparentBackground = backgroundColor === transparentBackgroundColor;\r\n      if (backgroundColor) {\r\n        inlineStyles.backgroundColor = transparentBackground ? \"transparent\" : backgroundColor;\r\n      }\r\n\r\n      let padding =\r\n        properties?.find((v) => v.alias === \"padding\")?.value;\r\n      if (!padding) {\r\n        padding = (backgroundColor && !transparentBackground) ? \"10px\" : \"0\";\r\n        console.debug(\"padding: \", padding);\r\n      }\r\n      inlineStyles.padding = `${padding}`;\r\n    }\r\n\r\n    this.backgroundStyleMap = inlineStyles;\r\n  }\r\n\r\n  getBackgroudImageStyle(imageUrl?: String) {\r\n    const inlineStyles = this.backgroundStyles;\r\n\r\n    const padding = inlineStyles.padding ?? blockLayoutInlineStyleDefaults.padding;\r\n    if (imageUrl) {\r\n      inlineStyles.backgroundImage = `url('${imageUrl}')`;\r\n      inlineStyles.backgroundPosition = \"inherit\";\r\n      inlineStyles.padding = padding === blockLayoutInlineStyleDefaults.padding\r\n        ? \"10px\"\r\n        : padding;\r\n    } else {\r\n      inlineStyles.backgroundImage = \"none\";\r\n      inlineStyles.backgroundPosition = \"-10000px\";\r\n    }\r\n\r\n    this.backgroundStyleMap = inlineStyles;\r\n  }\r\n\r\n  async #requestImageUrl(mediaItemId: string) {\r\n    if (!mediaItemId) {\r\n      return;\r\n    }\r\n    const options: ImageUrlData = {\r\n      query: {\r\n        mediaItemId,\r\n      },\r\n    };\r\n    const { data, error } =\r\n      await WysiwgUmbracoCommunityExtensionsService.imageUrl(options);\r\n\r\n    if (error) {\r\n      console.error(error);\r\n      return \"error\";\r\n    }\r\n\r\n    if (data !== undefined) {\r\n      return data;\r\n    }\r\n  }\r\n\r\n  override render() {\r\n    const pageStyles = { backgroundColor: this.pageBackroundColor } as Readonly<StyleInfo>;;\r\n    const styles = this.backgroundStyleMap as Readonly<StyleInfo>;\r\n\r\n    // console.debug(styles);\r\n\r\n    return html`<umb-ref-grid-block class=\"wysiwg\"\r\n      style=${styleMap(pageStyles)}\r\n      standalone\r\n      href=${(this.config?.showContentEdit\r\n        ? this.config?.editContentPath\r\n        : undefined) ?? \"\"}\r\n    >\r\n      <umb-icon slot=\"icon\" .name=${this.icon}></umb-icon>\r\n      <umb-ufm-render\r\n        slot=\"name\"\r\n        inline\r\n        .markdown=${this.label}\r\n        .value=${this.content}\r\n      ></umb-ufm-render>\r\n      ${this.unpublished\r\n        ? html`<uui-tag\r\n            slot=\"name\"\r\n            look=\"secondary\"\r\n            title=${this.localize.term(\"wysiwg_notExposedDescription\")}\r\n            ><umb-localize key=\"wysiwg_notExposedLabel\"></umb-localize\r\n          ></uui-tag>`\r\n        : nothing}\r\n      <umb-block-grid-areas-container\r\n        slot=\"areas\"\r\n        style=\"${styleMap(styles)}\"\r\n      ></umb-block-grid-areas-container>\r\n    </umb-ref-grid-block>`;\r\n  }\r\n\r\n  static override styles = [\r\n    UmbTextStyles,\r\n    css`\r\n      :host {\r\n        display: flex;\r\n        height: 100%;\r\n        box-sizing: border-box;\r\n      }\r\n      .left,\r\n      .right {\r\n        display: flexbox;\r\n      }\r\n    `,\r\n  ];\r\n}\r\n\r\nexport default WysiwgBlockLayoutView;\r\n\r\ndeclare global {\r\n  interface HTMLElementTagNameMap {\r\n    [customElementName]: WysiwgBlockLayoutView;\r\n  }\r\n}\r\n","import {\r\n  css,\r\n  customElement,\r\n  html,\r\n  property,\r\n  state,\r\n} from \"@umbraco-cms/backoffice/external/lit\";\r\nimport { UmbLitElement } from \"@umbraco-cms/backoffice/lit-element\";\r\nimport { UmbTextStyles } from \"@umbraco-cms/backoffice/style\";\r\nimport { V2CropUrlData, WysiwgUmbracoCommunityExtensionsService } from \"../..\";\r\nimport { WysiwgMediaPickerPropertyValueEntry } from \"../../property-editors/picture/types\";\r\nimport { UmbPropertyEditorUiElement, UmbPropertyValueChangeEvent } from \"@umbraco-cms/backoffice/property-editor\";\r\n\r\nconst elementName = \"wysiwg-cropped-image\";\r\n@customElement(elementName)\r\nexport class WysiwgCroppedImageElement extends UmbLitElement implements UmbPropertyEditorUiElement {\r\n  //#region Properties\r\n  @property({ type: String })\r\n  value: string = \"\";\r\n\r\n  @property({ type: Object })\r\n  mediaItem?: WysiwgMediaPickerPropertyValueEntry | null = null;\r\n\r\n  @property({ type: Number })\r\n  width = 1200;\r\n\r\n  @property()\r\n  icon = \"icon-picture\";\r\n\r\n  /**\r\n   * The `loading` state of the thumbnail.\r\n   * @enum {'lazy' | 'eager'}\r\n   * @default 'lazy'\r\n   */\r\n  @property()\r\n  loading: (typeof HTMLImageElement)[\"prototype\"][\"loading\"] = \"lazy\";\r\n  //#endregion\r\n\r\n  //#region state\r\n\r\n  @state()\r\n  private _isLoading = true;\r\n\r\n  //#endregion\r\n\r\n  private _prevImgSrc: string = \"\";\r\n\r\n  #intersectionObserver?: IntersectionObserver;\r\n\r\n  override render() {\r\n    const img = this.#renderImageCrop();\r\n    const loading = this.#renderLoading();\r\n    return html` ${img} ${loading} `;\r\n  }\r\n\r\n  override connectedCallback() {\r\n    super.connectedCallback();\r\n\r\n    this.loadImage();\r\n  }\r\n\r\n  override disconnectedCallback() {\r\n    super.disconnectedCallback();\r\n    this.#intersectionObserver?.disconnect();\r\n  }\r\n\r\n  override updated(changedProperties: Map<string | number | symbol, unknown>) {\r\n    super.updated(changedProperties);\r\n\r\n    if (changedProperties.has(\"mediaItem\")) {\r\n      this.loadImage();\r\n    }\r\n    if (changedProperties.has(\"value\")) {\r\n      if (this._prevImgSrc !== this.value) {\r\n        this.dispatchEvent(new UmbPropertyValueChangeEvent());\r\n        this._prevImgSrc = this.value;\r\n      }\r\n    }\r\n  }\r\n\r\n  private loadImage() {\r\n    if (this.loading === \"lazy\") {\r\n      this.#intersectionObserver = new IntersectionObserver((entries) => {\r\n        if (entries[0].isIntersecting) {\r\n          this.generateImageUrl(entries[0].boundingClientRect.width);\r\n          this.#intersectionObserver?.disconnect();\r\n        }\r\n      });\r\n      this.#intersectionObserver.observe(this);\r\n    } else {\r\n      this.generateImageUrl(this.width);\r\n    }\r\n  }\r\n\r\n  #renderLoading() {\r\n    if (this._isLoading) {\r\n      return html`<div id=\"loader\"><uui-loader></uui-loader></div>`;\r\n    }\r\n  }\r\n\r\n  #renderImageCrop() {\r\n    try {\r\n      if (!this.value) {\r\n        return html`<div id=\"icon\" part=\"img\"></div>`;\r\n      } else {\r\n        return html`<img\r\n          id=\"figure-image\"\r\n          part=\"img\"\r\n          src=\"${this.value ?? \"\"}\"\r\n          alt=\"${this.mediaItem?.mediaKey ?? \"\"}\"\r\n          loading=\"${this.loading}\"\r\n          draggable=\"false\"\r\n        />`;\r\n      }\r\n    } catch (e) {\r\n      console.error(\"wysiwg-image-crop.renderImageCrop error\", e);\r\n    }\r\n  }\r\n\r\n  private async requestCropUrl(width: number): Promise<string | undefined> {\r\n    if (!this.mediaItem?.mediaKey) {\r\n      return;\r\n    }\r\n    const cropAlias = this.mediaItem.selectedCropAlias?.toLowerCase() ?? \"\";\r\n    const crop = this.mediaItem.crops?.find((c) => c.alias === cropAlias);\r\n    const selectedCrop = !crop\r\n      ? \"\"\r\n      : JSON.stringify(crop);\r\n    const selectedFocalPoint = !this.mediaItem.focalPoint\r\n      ? \"\"\r\n      : JSON.stringify(this.mediaItem.focalPoint);\r\n    const options: V2CropUrlData = {\r\n      query: {\r\n        mediaItemId: this.mediaItem.mediaKey,\r\n        cropAlias: cropAlias,\r\n        width,\r\n        selectedCrop: selectedCrop,\r\n        selectedFocalPoint: selectedFocalPoint\r\n      },\r\n    };\r\n\r\n    const { data, error } =\r\n      await WysiwgUmbracoCommunityExtensionsService.v2CropUrl(options);\r\n\r\n    this._isLoading = false;\r\n\r\n    if (error) {\r\n      console.error(error);\r\n      return \"error\";\r\n    }\r\n\r\n    if (data !== undefined) {\r\n      return data;\r\n    }\r\n\r\n    return \"no data\";\r\n  }\r\n\r\n  private async generateImageUrl(width: number) {\r\n    await this.requestCropUrl(width).then((data) => {\r\n      if (data === \"error\") {\r\n        this.value = \"\";\r\n        return;\r\n      } else if (data === \"no data\") {\r\n        this.value = \"\";\r\n        return;\r\n      }\r\n      this.value = data ?? \"\";\r\n    });\r\n  }\r\n\r\n  static override styles = [\r\n    UmbTextStyles,\r\n    css`\r\n      :host {\r\n        display: block;\r\n        position: relative;\r\n        overflow: hidden;\r\n        justify-content: center;\r\n        align-items: center;\r\n      }\r\n\r\n      #loader {\r\n        display: flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n        height: 100%;\r\n        width: 100%;\r\n      }\r\n\r\n      /* ::part(img) {\r\n        display: block;\r\n        width: 100%;\r\n        height: auto;\r\n        overflow: visible;\r\n\r\n        background-image: url('data:image/svg+xml;charset=utf-8,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"100\" height=\"100\" fill-opacity=\".1\"><path d=\"M50 0h50v50H50zM0 50h50v50H0z\"/></svg>');\r\n        background-size: 10px 10px;\r\n        background-repeat: repeat;\r\n      } */\r\n      img {\r\n        display: flex;\r\n        width: 100%;\r\n        height: auto;\r\n      }\r\n\r\n      #icon {\r\n        width: 100%;\r\n        height: 100%;\r\n        font-size: var(--uui-size-8);\r\n      }\r\n    `,\r\n  ];\r\n}\r\n\r\ndeclare global {\r\n  interface HTMLElementTagNameMap {\r\n    [elementName]: WysiwgCroppedImageElement;\r\n  }\r\n}\r\n","import {\r\n  css,\r\n  customElement,\r\n  html,\r\n  property,\r\n  state,\r\n} from \"@umbraco-cms/backoffice/external/lit\";\r\nimport { UmbLitElement } from \"@umbraco-cms/backoffice/lit-element\";\r\nimport { UmbTextStyles } from \"@umbraco-cms/backoffice/style\";\r\nimport { CropUrlData, WysiwgUmbracoCommunityExtensionsService } from \"../..\";\r\n\r\nconst elementName = \"wysiwg-image-crop\";\r\n@customElement(elementName)\r\nexport class WysiwgBlocksImageCropElement extends UmbLitElement {\r\n  //#region Properties\r\n\r\n  @property({ type: String })\r\n  mediaKey?: string;\r\n\r\n  @property({ type: String })\r\n  alt?: string;\r\n\r\n  @property({ type: String })\r\n  cropAlias? = \"\";\r\n\r\n  @property({ type: Number })\r\n  width = 1200;\r\n\r\n  @property()\r\n  icon = \"icon-picture\";\r\n\r\n  /**\r\n   * The `loading` state of the thumbnail.\r\n   * @enum {'lazy' | 'eager'}\r\n   * @default 'lazy'\r\n   */\r\n  @property()\r\n  loading: (typeof HTMLImageElement)[\"prototype\"][\"loading\"] = \"lazy\";\r\n  //#endregion\r\n\r\n  //#region state\r\n  @state()\r\n  private _isLoading = true;\r\n\r\n  @state()\r\n  private _imageUrl: string | undefined = \"\";\r\n\r\n  //#endregion\r\n\r\n  #intersectionObserver?: IntersectionObserver;\r\n\r\n  override render() {\r\n    //console.debug(\"wysiwg-image-crop.render\", this._imageUrl, this._isLoading);\r\n\r\n    const img = this.#renderImageCrop();\r\n    const loading = this.#renderLoading();\r\n    //console.debug(\"wysiwg-image-crop.render img: \", img);\r\n    //console.debug(\"wysiwg-image-crop.render loading: \", loading);\r\n    return html` ${img} ${loading} `;\r\n  }\r\n\r\n  override connectedCallback() {\r\n    super.connectedCallback();\r\n    //console.debug(\"wysiwg-image-crop.connectedCallback\");\r\n\r\n    this.loadImage();\r\n  }\r\n\r\n  override disconnectedCallback() {\r\n    //console.debug(\"wysiwg-image-crop.disconnectedCallback\");\r\n\r\n    super.disconnectedCallback();\r\n    this.#intersectionObserver?.disconnect();\r\n  }\r\n\r\n  override updated(changedProperties: Map<string | number | symbol, unknown>) {\r\n    super.updated(changedProperties);\r\n\r\n    if (\r\n      changedProperties.has(\"mediaKey\") ||\r\n      changedProperties.has(\"cropAlias\")\r\n    ) {\r\n      this.loadImage();\r\n    } else if (changedProperties.has(\"_imageUrl\")) {\r\n      //console.debug(\"wysiwg-image-crop.updated\", this._imageUrl);\r\n    }\r\n  }\r\n\r\n  private loadImage() {\r\n    if (this.loading === \"lazy\") {\r\n      this.#intersectionObserver = new IntersectionObserver((entries) => {\r\n        if (entries[0].isIntersecting) {\r\n          this.generateImageUrl(entries[0].boundingClientRect.width);\r\n          this.#intersectionObserver?.disconnect();\r\n        }\r\n      });\r\n      this.#intersectionObserver.observe(this);\r\n    } else {\r\n      this.generateImageUrl(this.width);\r\n    }\r\n  }\r\n\r\n  #renderLoading() {\r\n    if (this._isLoading) {\r\n      return html`<div id=\"loader\"><uui-loader></uui-loader></div>`;\r\n    }\r\n  }\r\n\r\n  #renderImageCrop() {\r\n    try {\r\n      if (!this._imageUrl) {\r\n        return html`<div id=\"icon\" part=\"img\"></div>`;\r\n      } else {\r\n        return html`<img\r\n          id=\"figure-image\"\r\n          part=\"img\"\r\n          src=\"${this._imageUrl ?? \"\"}\"\r\n          alt=\"${this.alt ?? \"\"}\"\r\n          loading=\"${this.loading}\"\r\n          draggable=\"false\"\r\n        />`;\r\n      }\r\n    } catch (e) {\r\n      console.error(\"wysiwg-image-crop.renderImageCrop error\", e);\r\n    }\r\n  }\r\n\r\n  private async requestCropUrl(width: number): Promise<string | undefined> {\r\n    if (!this.mediaKey) {\r\n      return;\r\n    }\r\n    const options: CropUrlData = {\r\n      query: {\r\n        mediaItemId: this.mediaKey,\r\n        cropAlias: this.cropAlias,\r\n        width,\r\n      },\r\n    };\r\n\r\n    const { data, error } =\r\n      await WysiwgUmbracoCommunityExtensionsService.cropUrl(options);\r\n\r\n    this._isLoading = false;\r\n\r\n    if (error) {\r\n      console.error(error);\r\n      return \"error\";\r\n    }\r\n\r\n    if (data !== undefined) {\r\n      return data;\r\n    }\r\n\r\n    return \"no data\";\r\n  }\r\n\r\n  private async generateImageUrl(width: number) {\r\n    await this.requestCropUrl(width).then((data) => {\r\n      if (data === \"error\") {\r\n        this._imageUrl = undefined;\r\n        return;\r\n      } else if (data === \"no data\") {\r\n        this._imageUrl = undefined;\r\n        return;\r\n      }\r\n      this._imageUrl = data;\r\n    });\r\n  }\r\n\r\n  static override styles = [\r\n    UmbTextStyles,\r\n    css`\r\n      :host {\r\n        display: block;\r\n        position: relative;\r\n        overflow: hidden;\r\n        justify-content: center;\r\n        align-items: center;\r\n      }\r\n\r\n      #loader {\r\n        display: flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n        height: 100%;\r\n        width: 100%;\r\n      }\r\n\r\n      ::part(img) {\r\n        display: block;\r\n        width: 100%;\r\n        height: auto;\r\n        overflow: visible;\r\n\r\n        background-image: url('data:image/svg+xml;charset=utf-8,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"100\" height=\"100\" fill-opacity=\".1\"><path d=\"M50 0h50v50H50zM0 50h50v50H0z\"/></svg>');\r\n        background-size: 10px 10px;\r\n        background-repeat: repeat;\r\n      }\r\n      img {\r\n        width: 100%;\r\n        height: auto;\r\n      }\r\n\r\n      #icon {\r\n        width: 100%;\r\n        height: 100%;\r\n        font-size: var(--uui-size-8);\r\n      }\r\n    `,\r\n  ];\r\n}\r\n\r\ndeclare global {\r\n  interface HTMLElementTagNameMap {\r\n    [elementName]: WysiwgBlocksImageCropElement;\r\n  }\r\n}\r\n"],"names":["_datasetContext","_WysiwgBlockLayoutView_instances","requestImageUrl_fn","blockLayoutInlineStyleDefaults","transparentBackgroundColor","customElementName","WysiwgBlockLayoutView","UmbElementMixin","LitElement","__privateAdd","UMB_PROPERTY_DATASET_CONTEXT","context","__privateSet","__privateGet","properties","pageProperties","pageBackgroundColor","_a","v","allGridValues","editSettingsPath","_b","thisGrid","i","grid","gridValues","_c","viewElement","layout","_d","l","setting","_e","s","backgroundImage","mediaKey","__privateMethod","data","inlineStyles","backgroundColor","transparentBackground","padding","imageUrl","pageStyles","styles","html","styleMap","nothing","mediaItemId","options","error","WysiwgUmbracoCommunityExtensionsService","UmbTextStyles","css","__decorateClass","property","state","customElement","WysiwgBlockLayoutView$1","_intersectionObserver","_WysiwgCroppedImageElement_instances","renderLoading_fn","renderImageCrop_fn","elementName","WysiwgCroppedImageElement","UmbLitElement","img","loading","changedProperties","UmbPropertyValueChangeEvent","entries","width","cropAlias","crop","c","selectedCrop","selectedFocalPoint","e","_WysiwgBlocksImageCropElement_instances","WysiwgBlocksImageCropElement"],"mappings":";;;;;;;;;;;;;;;;;;;;;2XAAAA,GAAAC,GAAAC;AAgCA,MAAMC,IAA4C;AAAA,EAChD,iBAAiB;AAAA,EACjB,oBAAoB;AAAA,EACpB,kBAAkB;AAAA,EAClB,iBAAiB;AAAA,EACjB,SAAS;AACX,GACMC,KAA6B,QAE7BC,KAAoB;AAEnB,IAAMC,IAAN,cACGC,GAAgBC,EAAU,EACS;AAAA,EA8C3C,cAAc;AACN,UAAA,GAjDHC,EAAA,MAAAR,CAAA,GAsBL,KAAQ,qBAAqBE,EAA+B,iBAG5B,KAAA,qBAAAA,GAqBhCM,EAAA,MAAAT,CAAA,GAIO,KAAA;AAAA,MAAeU;AAAA,MAA8B,OAAOC,MACvD,KAAK,YAAYA,CAAO;AAAA,IAC1B;AAAA,EAAA;AAAA,EAzBF,IAAY,mBAAmB;AACtB,WAAA;AAAA,MACL,iBAAiB,KAAK,mBAAmB;AAAA,MACzC,kBAAkB,KAAK,mBAAmB;AAAA,MAC1C,oBAAoB,KAAK,mBAAmB;AAAA,MAC5C,iBAAiB,KAAK,mBAAmB;AAAA,MACzC,SAAS,KAAK,mBAAmB;AAAA,IACnC;AAAA,EAAA;AAAA,EAGF,IAAY,0BAA0B;AAC7B,WAAA;AAAA,MACL,iBAAiBR,EAA+B;AAAA,MAChD,kBAAkBA,EAA+B;AAAA,MACjD,oBAAoBA,EAA+B;AAAA,MACnD,iBAAiBA,EAA+B;AAAA,MAChD,SAASA,EAA+B;AAAA,IAC1C;AAAA,EAAA;AAAA,EAWF,MAAM,YAAYQ,GAAc;;AAC9BC,IAAAA,GAAA,MAAKZ,GAAkBW,CAAA,GAClB,KAAA;AAAA,OACHE,IAAAA,SAAKb,CAAiB,MAAtBa,gBAAAA,EAAsB;AAAA,MACtB,OAAOC,MAAe;;AACpB,cAAMC,IAAiBD;AACvB,YAAIC,KAAA,QAAAA,EAAgB,QAAQ;AACtB,cAAAC,KAAsBC,IAAAF,EAAe,KAAK,CAACG,MAAMA,EAAE,UAAU,qBAAqB,MAA5D,gBAAAD,EAA+D;AAIzF,UAAID,KAAA,QAAAA,EAAqB,UACvB,KAAK,qBAAqBA,EAAoB;AAGhD,gBAAMG,IAAgBJ,EACnB,OAAO,CAACG,MAAMA,EAAE,gBAAgB,mBAAmB,GAEhDE,MAAmBC,IAAA,KAAK,WAAL,gBAAAA,EAAa,qBAAoB;AAClD,kBAAA,MAAM,sBAAsBD,CAAgB;AAEhD,cAAAE,IAAWH,EAAc,CAAC;AAC1B,cAAAA,EAAc,SAAS;AACzB,qBAAQI,IAAI,GAAGA,IAAIJ,EAAc,QAAQI,KAAK;AACtC,oBAAAC,IAAOL,EAAcI,CAAC;AAC5B,kBAAIC,EAAK,SAAUJ,EAAiB,QAAQI,EAAK,KAAK,KAAK,GAAI;AAClD,gBAAAF,IAAAE;AACX;AAAA,cAAA;AAAA,YACF;AAGJ,gBAAMC,IAAaH,EAAS;AAGxB,cAFI,QAAA,MAAM,oBAAoBA,EAAS,KAAK,IAE5CI,IAAAD,EAAW,iBAAX,QAAAC,EAAyB,QAAQ;AACnC,kBAAMC,IAAc,MACdC,KAASC,IAAAJ,EAAW,OAAO,mBAAmB,MAArC,gBAAAI,EAAwC;AAAA,cACrD,CAACC,MAAMA,EAAE,eAAeH,EAAY;AAAA,eAEhCI,KAAUC,IAAAP,KAAA,gBAAAA,EAAY,iBAAZ,gBAAAO,EAA0B;AAAA,cACxC,CAACC,MAAMA,EAAE,SAAQL,KAAA,gBAAAA,EAAQ;AAAA,eAErBd,KAAaiB,KAAA,gBAAAA,EAAS,WAAoC,CAAC;AACjE,iBAAK,kBAAkBjB,CAAU;AAC3B,kBAAAoB,KAAkBpB,IAAAA,KAAAA,gBAAAA,EAAY,KAAK,CAACI,MAAMA,EAAE,UAAU,uBAApCJ,gBAAAA,EAAwD,OAC1EqB,KAAWD,KAAA,QAAAA,EAAiB,SAC9BA,EAAgB,CAAC,EAAE,WACnB;AACJ,kBAAME,SAAKnC,GAALC,EAAA,EAAA,KAAA,MAAsBiC,EACzB,EAAA,KAAK,CAACE,MAAS;AACV,cAAAA,MAAS,UAAaA,MAAS,WACjC,KAAK,uBAAuBA,CAAI;AAAA,YAClC,CACD;AAAA,UAAA;AAAA,QACL;AAAA,MAEJ;AAAA,MACA;AAAA,IACF;AAAA,EAAA;AAAA;AAAA,EAIF,kBAAkBvB,GAAoC;;AACpD,UAAMwB,IAAe,KAAK;AAE1B,QAAIxB,KAAA,QAAAA,EAAY,QAAQ;AAChB,YAAAyB,OACHtB,IAAAH,KAAA,gBAAAA,EAAY,KAAK,CAACI,MAAMA,EAAE,UAAU,uBAApC,gBAAAD,EAAwD,UAAS,CAIlE,GAAA,OACIuB,IAAwBD,MAAoBnC;AAClD,MAAImC,MACWD,EAAA,kBAAkBE,IAAwB,gBAAgBD;AAGrE,UAAAE,KACFpB,IAAAP,KAAA,gBAAAA,EAAY,KAAK,CAACI,MAAMA,EAAE,UAAU,eAApC,gBAAAG,EAAgD;AAClD,MAAKoB,MACQA,IAAAF,KAAmB,CAACC,IAAyB,SAAS,KACzD,QAAA,MAAM,aAAaC,CAAO,IAEvBH,EAAA,UAAU,GAAGG,CAAO;AAAA,IAAA;AAGnC,SAAK,qBAAqBH;AAAA,EAAA;AAAA,EAG5B,uBAAuBI,GAAmB;AACxC,UAAMJ,IAAe,KAAK,kBAEpBG,IAAUH,EAAa,WAAWnC,EAA+B;AACvE,IAAIuC,KACWJ,EAAA,kBAAkB,QAAQI,CAAQ,MAC/CJ,EAAa,qBAAqB,WAClCA,EAAa,UAAUG,MAAYtC,EAA+B,UAC9D,SACAsC,MAEJH,EAAa,kBAAkB,QAC/BA,EAAa,qBAAqB,aAGpC,KAAK,qBAAqBA;AAAA,EAAA;AAAA,EAyBnB,SAAS;;AAChB,UAAMK,IAAa,EAAE,iBAAiB,KAAK,mBAAmB,GACxDC,IAAS,KAAK;AAIb,WAAAC;AAAA,cACGC,EAASH,CAAU,CAAC;AAAA;AAAA,eAEpB1B,IAAA,KAAK,WAAL,QAAAA,EAAa,mBACjBI,IAAA,KAAK,WAAL,gBAAAA,EAAa,kBACb,WAAc,EAAE;AAAA;AAAA,oCAEU,KAAK,IAAI;AAAA;AAAA;AAAA;AAAA,oBAIzB,KAAK,KAAK;AAAA,iBACb,KAAK,OAAO;AAAA;AAAA,QAErB,KAAK,cACHwB;AAAA;AAAA;AAAA,oBAGU,KAAK,SAAS,KAAK,8BAA8B,CAAC;AAAA;AAAA,yBAG5DE,EAAO;AAAA;AAAA;AAAA,iBAGAD,EAASF,CAAM,CAAC;AAAA;AAAA;AAAA,EAAA;AAmBjC;AA3LE5C,IAAA,oBAAA,QAAA;AA9CKC,IAAA,oBAAA,QAAA;AAkKCC,KAAgB,eAAC8C,GAAqB;AAC1C,MAAI,CAACA;AACH;AAEF,QAAMC,IAAwB;AAAA,IAC5B,OAAO;AAAA,MACL,aAAAD;AAAA,IAAA;AAAA,EAEJ,GACM,EAAE,MAAAX,GAAM,OAAAa,EAAA,IACZ,MAAMC,EAAwC,SAASF,CAAO;AAEhE,MAAIC;AACF,mBAAQ,MAAMA,CAAK,GACZ;AAGT,MAAIb,MAAS;AACJ,WAAAA;AAEX;AAtLW/B,EA2NK,SAAS;AAAA,EACvB8C;AAAA,EACAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWF;AAnOAC,EAAA;AAAA,EADCC,EAAS,EAAE,WAAW,GAAO,CAAA;AAAA,GAJnBjD,EAKX,WAAA,WAAA,CAAA;AAGAgD,EAAA;AAAA,EADCC,EAAS,EAAE,WAAW,GAAO,CAAA;AAAA,GAPnBjD,EAQX,WAAA,SAAA,CAAA;AAGAgD,EAAA;AAAA,EADCC,EAAS,EAAE,MAAM,QAAQ,SAAS,GAAO,CAAA;AAAA,GAV/BjD,EAWX,WAAA,QAAA,CAAA;AAGAgD,EAAA;AAAA,EADCC,EAAS,EAAE,WAAW,GAAO,CAAA;AAAA,GAbnBjD,EAcX,WAAA,UAAA,CAAA;AAGAgD,EAAA;AAAA,EADCC,EAAS,EAAE,MAAM,SAAS,SAAS,GAAM,CAAA;AAAA,GAhB/BjD,EAiBX,WAAA,eAAA,CAAA;AAGAgD,EAAA;AAAA,EADCC,EAAS,EAAE,WAAW,GAAO,CAAA;AAAA,GAnBnBjD,EAoBX,WAAA,YAAA,CAAA;AAKAgD,EAAA;AAAA,EADCE,EAAM;AAAA,GAxBIlD,EAyBX,WAAA,sBAAA,CAAA;AAzBWA,IAANgD,EAAA;AAAA,EADNG,EAAcpD,EAAiB;AAAA,GACnBC,CAAA;AA2Ob,MAAAoD,KAAepD;;;;;;;;;;;;;2XCtRfqD,GAAAC,GAAAC,IAAAC;AAaA,MAAMC,KAAc;AAEP,IAAAC,IAAN,cAAwCC,EAAoD;AAAA,EAA5F,cAAA;AAAA,UAAA,GAAA,SAAA,GAAAxD,EAAA,MAAAmD,CAAA,GAGW,KAAA,QAAA,IAGyC,KAAA,YAAA,MAGjD,KAAA,QAAA,MAGD,KAAA,OAAA,gBAQsD,KAAA,UAAA,QAM7D,KAAQ,aAAa,IAIrB,KAAQ,cAAsB,IAE9BnD,EAAA,MAAAkD,CAAA;AAAA,EAAA;AAAA,EAES,SAAS;AACV,UAAAO,IAAM9B,QAAKwB,GAALE,EAAA,EAAA,KAAA,IAAA,GACNK,IAAU/B,QAAKwB,GAALC,EAAA,EAAA,KAAA,IAAA;AACT,WAAAhB,KAAQqB,CAAG,IAAIC,CAAO;AAAA,EAAA;AAAA,EAGtB,oBAAoB;AAC3B,UAAM,kBAAkB,GAExB,KAAK,UAAU;AAAA,EAAA;AAAA,EAGR,uBAAuB;;AAC9B,UAAM,qBAAqB,IAC3BtD,IAAAA,EAAA,MAAK8C,OAAL9C,QAAAA,EAA4B;AAAA,EAAW;AAAA,EAGhC,QAAQuD,GAA2D;AAC1E,UAAM,QAAQA,CAAiB,GAE3BA,EAAkB,IAAI,WAAW,KACnC,KAAK,UAAU,GAEbA,EAAkB,IAAI,OAAO,KAC3B,KAAK,gBAAgB,KAAK,UACvB,KAAA,cAAc,IAAIC,IAA6B,GACpD,KAAK,cAAc,KAAK;AAAA,EAE5B;AAAA,EAGM,YAAY;AACd,IAAA,KAAK,YAAY,UACnBzD,GAAA,MAAK+C,GAAwB,IAAI,qBAAqB,CAACW,MAAY;;AAC7D,MAAAA,EAAQ,CAAC,EAAE,mBACb,KAAK,iBAAiBA,EAAQ,CAAC,EAAE,mBAAmB,KAAK,IACzDzD,IAAAA,EAAA,MAAK8C,OAAL9C,QAAAA,EAA4B;AAAA,IAC9B,CACD,CAAA,GACIA,EAAA,MAAA8C,CAAA,EAAsB,QAAQ,IAAI,KAElC,KAAA,iBAAiB,KAAK,KAAK;AAAA,EAClC;AAAA,EA4BF,MAAc,eAAeY,GAA4C;;AACnE,QAAA,GAACtD,IAAA,KAAK,cAAL,QAAAA,EAAgB;AACnB;AAEF,UAAMuD,MAAYnD,IAAA,KAAK,UAAU,sBAAf,gBAAAA,EAAkC,kBAAiB,IAC/DoD,KAAO/C,IAAA,KAAK,UAAU,UAAf,gBAAAA,EAAsB,KAAK,CAACgD,MAAMA,EAAE,UAAUF,IACrDG,IAAgBF,IAElB,KAAK,UAAUA,CAAI,IADnB,IAEEG,IAAsB,KAAK,UAAU,aAEvC,KAAK,UAAU,KAAK,UAAU,UAAU,IADxC,IAEE3B,IAAyB;AAAA,MAC7B,OAAO;AAAA,QACL,aAAa,KAAK,UAAU;AAAA,QAC5B,WAAAuB;AAAA,QACA,OAAAD;AAAA,QACA,cAAAI;AAAA,QACA,oBAAAC;AAAA,MAAA;AAAA,IAEJ,GAEM,EAAE,MAAAvC,GAAM,OAAAa,EAAA,IACZ,MAAMC,EAAwC,UAAUF,CAAO;AAIjE,WAFA,KAAK,aAAa,IAEdC,KACF,QAAQ,MAAMA,CAAK,GACZ,WAGLb,MAAS,SACJA,IAGF;AAAA,EAAA;AAAA,EAGT,MAAc,iBAAiBkC,GAAe;AAC5C,UAAM,KAAK,eAAeA,CAAK,EAAE,KAAK,CAAClC,MAAS;AAC9C,UAAIA,MAAS,SAAS;AACpB,aAAK,QAAQ;AACb;AAAA,MAAA,WACSA,MAAS,WAAW;AAC7B,aAAK,QAAQ;AACb;AAAA,MAAA;AAEF,WAAK,QAAQA,KAAQ;AAAA,IAAA,CACtB;AAAA,EAAA;AA6CL;AAtKEsB,IAAA,oBAAA,QAAA;AAhCKC,IAAA,oBAAA,QAAA;AA+ELC,KAAc,WAAG;AACf,MAAI,KAAK;AACA,WAAAhB;AAEX;AAEAiB,KAAgB,WAAG;;AACb,MAAA;AACE,WAAC,KAAK,QAGDjB;AAAA;AAAA;AAAA,iBAGE,KAAK,SAAS,EAAE;AAAA,mBAChB5B,IAAA,KAAK,cAAL,gBAAAA,EAAgB,aAAY,EAAE;AAAA,qBAC1B,KAAK,OAAO;AAAA;AAAA,cAPlB4B;AAAA,WAWFgC,GAAG;AACF,YAAA,MAAM,2CAA2CA,CAAC;AAAA,EAAA;AAE9D;AAtGWb,EA4JK,SAAS;AAAA,EACvBZ;AAAA,EACAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAuCF;AAlMAC,EAAA;AAAA,EADCC,EAAS,EAAE,MAAM,OAAQ,CAAA;AAAA,GAFfS,EAGX,WAAA,SAAA,CAAA;AAGAV,EAAA;AAAA,EADCC,EAAS,EAAE,MAAM,OAAQ,CAAA;AAAA,GALfS,EAMX,WAAA,aAAA,CAAA;AAGAV,EAAA;AAAA,EADCC,EAAS,EAAE,MAAM,OAAQ,CAAA;AAAA,GARfS,EASX,WAAA,SAAA,CAAA;AAGAV,EAAA;AAAA,EADCC,EAAS;AAAA,GAXCS,EAYX,WAAA,QAAA,CAAA;AAQAV,EAAA;AAAA,EADCC,EAAS;AAAA,GAnBCS,EAoBX,WAAA,WAAA,CAAA;AAMQV,EAAA;AAAA,EADPE,EAAM;AAAA,GAzBIQ,EA0BH,WAAA,cAAA,CAAA;AA1BGA,IAANV,EAAA;AAAA,EADNG,EAAcM,EAAW;AAAA,GACbC,CAAA;;;;;;;2XCfbL,GAAAmB,GAAAjB,IAAAC;AAWA,MAAMC,KAAc;AAEP,IAAAgB,IAAN,cAA2Cd,EAAc;AAAA,EAAzD,cAAA;AAAA,UAAA,GAAA,SAAA,GAAAxD,EAAA,MAAAqE,CAAA,GAUQ,KAAA,YAAA,IAGL,KAAA,QAAA,MAGD,KAAA,OAAA,gBAQsD,KAAA,UAAA,QAK7D,KAAQ,aAAa,IAGrB,KAAQ,YAAgC,IAIxCrE,EAAA,MAAAkD,CAAA;AAAA,EAAA;AAAA,EAES,SAAS;AAGV,UAAAO,IAAM9B,QAAK0C,GAALhB,EAAA,EAAA,KAAA,IAAA,GACNK,IAAU/B,QAAK0C,GAALjB,EAAA,EAAA,KAAA,IAAA;AAGT,WAAAhB,KAAQqB,CAAG,IAAIC,CAAO;AAAA,EAAA;AAAA,EAGtB,oBAAoB;AAC3B,UAAM,kBAAkB,GAGxB,KAAK,UAAU;AAAA,EAAA;AAAA,EAGR,uBAAuB;;AAG9B,UAAM,qBAAqB,IAC3BlD,IAAAJ,EAAA,MAAK8C,OAAL,QAAA1C,EAA4B;AAAA,EAAW;AAAA,EAGhC,QAAQmD,GAA2D;AAC1E,UAAM,QAAQA,CAAiB,GAG7BA,EAAkB,IAAI,UAAU,KAChCA,EAAkB,IAAI,WAAW,IAEjC,KAAK,UAAU,IACNA,EAAkB,IAAI,WAAW;AAAA,EAE5C;AAAA,EAGM,YAAY;AACd,IAAA,KAAK,YAAY,UACnBxD,GAAA,MAAK+C,GAAwB,IAAI,qBAAqB,CAACW,MAAY;;AAC7D,MAAAA,EAAQ,CAAC,EAAE,mBACb,KAAK,iBAAiBA,EAAQ,CAAC,EAAE,mBAAmB,KAAK,IACzDrD,IAAAJ,EAAA,MAAK8C,OAAL,QAAA1C,EAA4B;AAAA,IAC9B,CACD,CAAA,GACIJ,EAAA,MAAA8C,CAAA,EAAsB,QAAQ,IAAI,KAElC,KAAA,iBAAiB,KAAK,KAAK;AAAA,EAClC;AAAA,EA4BF,MAAc,eAAeY,GAA4C;AACnE,QAAA,CAAC,KAAK;AACR;AAEF,UAAMtB,IAAuB;AAAA,MAC3B,OAAO;AAAA,QACL,aAAa,KAAK;AAAA,QAClB,WAAW,KAAK;AAAA,QAChB,OAAAsB;AAAA,MAAA;AAAA,IAEJ,GAEM,EAAE,MAAAlC,GAAM,OAAAa,EAAA,IACZ,MAAMC,EAAwC,QAAQF,CAAO;AAI/D,WAFA,KAAK,aAAa,IAEdC,KACF,QAAQ,MAAMA,CAAK,GACZ,WAGLb,MAAS,SACJA,IAGF;AAAA,EAAA;AAAA,EAGT,MAAc,iBAAiBkC,GAAe;AAC5C,UAAM,KAAK,eAAeA,CAAK,EAAE,KAAK,CAAClC,MAAS;AAC9C,UAAIA,MAAS,SAAS;AACpB,aAAK,YAAY;AACjB;AAAA,MAAA,WACSA,MAAS,WAAW;AAC7B,aAAK,YAAY;AACjB;AAAA,MAAA;AAEF,WAAK,YAAYA;AAAA,IAAA,CAClB;AAAA,EAAA;AA4CL;AAjKEsB,IAAA,oBAAA,QAAA;AApCKmB,IAAA,oBAAA,QAAA;AAyFLjB,KAAc,WAAG;AACf,MAAI,KAAK;AACA,WAAAhB;AAEX;AAEAiB,KAAgB,WAAG;AACb,MAAA;AACE,WAAC,KAAK,YAGDjB;AAAA;AAAA;AAAA,iBAGE,KAAK,aAAa,EAAE;AAAA,iBACpB,KAAK,OAAO,EAAE;AAAA,qBACV,KAAK,OAAO;AAAA;AAAA,cAPlBA;AAAA,WAWF,GAAG;AACF,YAAA,MAAM,2CAA2C,CAAC;AAAA,EAAA;AAE9D;AAhHWkC,EA4JK,SAAS;AAAA,EACvB3B;AAAA,EACAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAsCF;AAhMAC,EAAA;AAAA,EADCC,EAAS,EAAE,MAAM,OAAQ,CAAA;AAAA,GAHfwB,EAIX,WAAA,YAAA,CAAA;AAGAzB,EAAA;AAAA,EADCC,EAAS,EAAE,MAAM,OAAQ,CAAA;AAAA,GANfwB,EAOX,WAAA,OAAA,CAAA;AAGAzB,EAAA;AAAA,EADCC,EAAS,EAAE,MAAM,OAAQ,CAAA;AAAA,GATfwB,EAUX,WAAA,aAAA,CAAA;AAGAzB,EAAA;AAAA,EADCC,EAAS,EAAE,MAAM,OAAQ,CAAA;AAAA,GAZfwB,EAaX,WAAA,SAAA,CAAA;AAGAzB,EAAA;AAAA,EADCC,EAAS;AAAA,GAfCwB,EAgBX,WAAA,QAAA,CAAA;AAQAzB,EAAA;AAAA,EADCC,EAAS;AAAA,GAvBCwB,EAwBX,WAAA,WAAA,CAAA;AAKQzB,EAAA;AAAA,EADPE,EAAM;AAAA,GA5BIuB,EA6BH,WAAA,cAAA,CAAA;AAGAzB,EAAA;AAAA,EADPE,EAAM;AAAA,GA/BIuB,EAgCH,WAAA,aAAA,CAAA;AAhCGA,IAANzB,EAAA;AAAA,EADNG,EAAcM,EAAW;AAAA,GACbgB,CAAA;"}