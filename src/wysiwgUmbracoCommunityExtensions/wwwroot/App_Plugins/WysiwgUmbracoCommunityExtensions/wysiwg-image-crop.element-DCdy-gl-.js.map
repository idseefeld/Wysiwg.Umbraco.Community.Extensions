{"version":3,"file":"wysiwg-image-crop.element-DCdy-gl-.js","sources":["../../../Wysiwg/src/blocks/views/block-layout.view.ts","../../../Wysiwg/src/property-editors/picture/wysiwg-cropped-image.element.ts","../../../Wysiwg/src/blocks/components/wysiwg-image-crop.element.ts"],"sourcesContent":["import { UmbTextStyles } from \"@umbraco-cms/backoffice/style\";\r\nimport {\r\n  html,\r\n  customElement,\r\n  property,\r\n  css,\r\n  nothing,\r\n  state,\r\n  styleMap,\r\n  StyleInfo,\r\n} from \"@umbraco-cms/backoffice/external/lit\";\r\nimport type {\r\n  UmbBlockEditorCustomViewElement,\r\n} from \"@umbraco-cms/backoffice/block-custom-view\";\r\nimport {\r\n  UmbPropertyValueDataPotentiallyWithEditorAlias,\r\n} from \"@umbraco-cms/backoffice/property\";\r\nimport { UmbBlockGridValueModel } from \"@umbraco-cms/backoffice/block-grid\";\r\nimport { BlockGridLayoutModel, MediaPickerValueModel } from \"../types\";\r\nimport { ImageUrlData, WysiwgUmbracoCommunityExtensionsService } from \"../..\";\r\nimport WysiwgBaseBlockEditorCustomViewElement from \"./wysiwg-base-block-editor-custom.view\";\r\n\r\n//this is based on a copy of\r\n// Umbraco-CMS\\src\\\r\n//   Umbraco.Web.UI.Client\\src\\packages\\\r\n//      block\\block-grid\\components\\block-grid-block\\block-grid-block.element.ts\r\n\r\nconst blockLayoutInlineStyleDefaults: StyleInfo = {\r\n  backgroundImage: \"none\",\r\n  backgroundPosition: \"inherit\",\r\n  backgroundRepeat: \"no-repeat\",\r\n  backgroundColor: \"transparent\",\r\n  padding: \"0\",\r\n}\r\n\r\nconst customElementName = \"wysiwg-block-layout-view\";\r\n@customElement(customElementName)\r\nexport class WysiwgBlockLayoutView\r\n  extends WysiwgBaseBlockEditorCustomViewElement {\r\n\r\n  @property({ attribute: false })\r\n  label?: string;\r\n\r\n  @property({ type: String, reflect: false })\r\n  icon?: string;\r\n\r\n  @property({ type: Boolean, reflect: true })\r\n  unpublished?: boolean;\r\n\r\n  @state()\r\n  private pageBackroundColor = blockLayoutInlineStyleDefaults.backgroundColor;\r\n\r\n  @state()\r\n  backgroundStyleMap: StyleInfo = blockLayoutInlineStyleDefaults;\r\n\r\n  private get backgroundStyles() {\r\n    return {\r\n      backgroundImage: this.backgroundStyleMap.backgroundImage,\r\n      backgroundRepeat: this.backgroundStyleMap.backgroundRepeat,\r\n      backgroundPosition: this.backgroundStyleMap.backgroundPosition,\r\n      backgroundColor: this.backgroundStyleMap.backgroundColor,\r\n      padding: this.backgroundStyleMap.padding,\r\n    } as StyleInfo;\r\n  }\r\n\r\n  private get backgroundStyleDefaults() {\r\n    return {\r\n      backgroundImage: blockLayoutInlineStyleDefaults.backgroundImage,\r\n      backgroundRepeat: blockLayoutInlineStyleDefaults.backgroundRepeat,\r\n      backgroundPosition: blockLayoutInlineStyleDefaults.backgroundPosition,\r\n      backgroundColor: blockLayoutInlineStyleDefaults.backgroundColor,\r\n      padding: blockLayoutInlineStyleDefaults.padding,\r\n    } as StyleInfo;\r\n  }\r\n\r\n  override async prozessSettings(gridValues: UmbBlockGridValueModel) {\r\n    if (gridValues.settingsData?.length) {\r\n      const viewElement = this as UmbBlockEditorCustomViewElement;\r\n      const layout = gridValues.layout[\"Umbraco.BlockGrid\"]?.find(\r\n        (l) => l.contentKey === viewElement.contentKey\r\n      );\r\n      const setting = gridValues?.settingsData?.find(\r\n        (s) => s.key === layout?.settingsKey\r\n      );\r\n      const properties = setting?.values as BlockGridLayoutModel[] ?? [];\r\n      this.getBackgroudStyle(properties);\r\n      const backgroundImage = properties?.find((v) => v.alias === \"backgroundImage\")?.value as MediaPickerValueModel;\r\n      const mediaKey = backgroundImage?.length\r\n        ? backgroundImage[0].mediaKey\r\n        : \"\";\r\n      await this.#requestImageUrl(mediaKey)\r\n        .then((data) => {\r\n          if (data !== undefined && data !== \"error\") {\r\n            this.getBackgroudImageStyle(data);\r\n          }\r\n        });\r\n    }\r\n  }\r\n\r\n  override async lastStepObservingProperties(pageProperties: Array<UmbPropertyValueDataPotentiallyWithEditorAlias>) {\r\n    if (!pageProperties) return;\r\n\r\n    let pageBackgroundColor = pageProperties.find((v) => v.alias === \"pageBackgroundColor\")?.value as {\r\n      label: string;\r\n      value: string;\r\n    }\r\n    if (pageBackgroundColor?.value) {\r\n      this.pageBackroundColor = pageBackgroundColor.value;\r\n    }\r\n  }\r\n\r\n  getBackgroudStyle(properties: BlockGridLayoutModel[]) {\r\n    const inlineStyles = this.backgroundStyleDefaults;\r\n\r\n    if (properties?.length) {\r\n      const backgroundColor = (\r\n        (properties?.find((v) => v.alias === \"backgroundColor\")?.value ?? {}) as {\r\n          label: string;\r\n          value: string;\r\n        }\r\n      ).value;\r\n      const transparentBackground = this.isTransparentColor(backgroundColor);\r\n      if (backgroundColor) {\r\n        inlineStyles.backgroundColor = transparentBackground ? \"transparent\" : backgroundColor;\r\n      }\r\n\r\n      let padding =\r\n        properties?.find((v) => v.alias === \"padding\")?.value;\r\n      if (!padding) {\r\n        padding = (backgroundColor && !transparentBackground) ? \"10px\" : \"0\";\r\n        console.debug(\"padding: \", padding);\r\n      }\r\n      inlineStyles.padding = `${padding}`;\r\n    }\r\n\r\n    this.backgroundStyleMap = inlineStyles;\r\n  }\r\n\r\n  getBackgroudImageStyle(imageUrl?: String) {\r\n    const inlineStyles = this.backgroundStyles;\r\n\r\n    const padding = inlineStyles.padding ?? blockLayoutInlineStyleDefaults.padding;\r\n    if (imageUrl) {\r\n      inlineStyles.backgroundImage = `url('${imageUrl}')`;\r\n      inlineStyles.backgroundPosition = \"inherit\";\r\n      inlineStyles.padding = padding === blockLayoutInlineStyleDefaults.padding\r\n        ? \"10px\"\r\n        : padding;\r\n    } else {\r\n      inlineStyles.backgroundImage = \"none\";\r\n      inlineStyles.backgroundPosition = \"-10000px\";\r\n    }\r\n\r\n    this.backgroundStyleMap = inlineStyles;\r\n  }\r\n\r\n  async #requestImageUrl(mediaItemId: string) {\r\n    if (!mediaItemId) {\r\n      return;\r\n    }\r\n    const options: ImageUrlData = {\r\n      query: {\r\n        mediaItemId,\r\n      },\r\n    };\r\n    const { data, error } =\r\n      await WysiwgUmbracoCommunityExtensionsService.imageUrl(options);\r\n\r\n    if (error) {\r\n      console.error(error);\r\n      return \"error\";\r\n    }\r\n\r\n    if (data !== undefined) {\r\n      return data;\r\n    }\r\n  }\r\n\r\n  override render() {\r\n    const pageStyles = { backgroundColor: this.pageBackroundColor } as Readonly<StyleInfo>;;\r\n    const styles = this.backgroundStyleMap as Readonly<StyleInfo>;\r\n\r\n    return html`<umb-ref-grid-block class=\"wysiwg\"\r\n      style=${styleMap(pageStyles)}\r\n      standalone\r\n      href=${(this.config?.showContentEdit\r\n        ? this.config?.editContentPath\r\n        : undefined) ?? \"\"}\r\n    >\r\n      <umb-icon slot=\"icon\" .name=${this.icon}></umb-icon>\r\n      <umb-ufm-render\r\n        slot=\"name\"\r\n        inline\r\n        .markdown=${this.label}\r\n        .value=${this.content}\r\n      ></umb-ufm-render>\r\n      ${this.unpublished\r\n        ? html`<uui-tag\r\n            slot=\"name\"\r\n            look=\"secondary\"\r\n            title=${this.localize.term(\"wysiwg_notExposedDescription\")}\r\n            ><umb-localize key=\"wysiwg_notExposedLabel\"></umb-localize\r\n          ></uui-tag>`\r\n        : nothing}\r\n      <umb-block-grid-areas-container\r\n        slot=\"areas\"\r\n        style=\"${styleMap(styles)}\"\r\n      ></umb-block-grid-areas-container>\r\n    </umb-ref-grid-block>`;\r\n  }\r\n\r\n  static override styles = [\r\n    UmbTextStyles,\r\n    css`\r\n      :host {\r\n        display: flex;\r\n        height: 100%;\r\n        box-sizing: border-box;\r\n      }\r\n      .left,\r\n      .right {\r\n        display: flexbox;\r\n      }\r\n    `,\r\n  ];\r\n}\r\n\r\nexport default WysiwgBlockLayoutView;\r\n\r\ndeclare global {\r\n  interface HTMLElementTagNameMap {\r\n    [customElementName]: WysiwgBlockLayoutView;\r\n  }\r\n}\r\n","import {\r\n  css,\r\n  customElement,\r\n  html,\r\n  property,\r\n  state,\r\n} from \"@umbraco-cms/backoffice/external/lit\";\r\nimport { UmbLitElement } from \"@umbraco-cms/backoffice/lit-element\";\r\nimport { UmbTextStyles } from \"@umbraco-cms/backoffice/style\";\r\nimport { V2CropUrlData, WysiwgUmbracoCommunityExtensionsService } from \"../..\";\r\nimport { WysiwgMediaPickerPropertyValueEntry } from \"./types\";\r\nimport { UmbPropertyEditorUiElement, UmbPropertyValueChangeEvent } from \"@umbraco-cms/backoffice/property-editor\";\r\n\r\nconst elementName = \"wysiwg-cropped-image\";\r\n@customElement(elementName)\r\nexport class WysiwgCroppedImageElement extends UmbLitElement implements UmbPropertyEditorUiElement {\r\n  //#region Properties\r\n  @property({ type: String })\r\n  value: string = \"\";\r\n\r\n  @property({ type: Object })\r\n  mediaItem?: WysiwgMediaPickerPropertyValueEntry | null = null;\r\n\r\n  @property({ type: Number })\r\n  width = 1200;\r\n\r\n  @property()\r\n  icon = \"icon-picture\";\r\n\r\n  /**\r\n   * The `loading` state of the thumbnail.\r\n   * @enum {'lazy' | 'eager'}\r\n   * @default 'lazy'\r\n   */\r\n  @property()\r\n  loading: (typeof HTMLImageElement)[\"prototype\"][\"loading\"] = \"lazy\";\r\n  //#endregion\r\n\r\n  //#region state\r\n\r\n  @state()\r\n  private _isLoading = true;\r\n\r\n  //#endregion\r\n\r\n  private _prevImgSrc: string = \"\";\r\n\r\n  #intersectionObserver?: IntersectionObserver;\r\n\r\n  override render() {\r\n    const img = this.#renderImageCrop();\r\n    const loading = this.#renderLoading();\r\n    return html` ${img} ${loading} `;\r\n  }\r\n\r\n  override connectedCallback() {\r\n    super.connectedCallback();\r\n\r\n    this.loadImage();\r\n  }\r\n\r\n  override disconnectedCallback() {\r\n    super.disconnectedCallback();\r\n    this.#intersectionObserver?.disconnect();\r\n  }\r\n\r\n  override updated(changedProperties: Map<string | number | symbol, unknown>) {\r\n    super.updated(changedProperties);\r\n\r\n    if (changedProperties.has(\"mediaItem\")) {\r\n      this.loadImage();\r\n    }\r\n    if (changedProperties.has(\"value\")) {\r\n      if (this._prevImgSrc !== this.value) {\r\n        this.dispatchEvent(new UmbPropertyValueChangeEvent());\r\n        this._prevImgSrc = this.value;\r\n      }\r\n    }\r\n  }\r\n\r\n  private loadImage() {\r\n    if (this.loading === \"lazy\") {\r\n      this.#intersectionObserver = new IntersectionObserver((entries) => {\r\n        if (entries[0].isIntersecting) {\r\n          this.generateImageUrl(entries[0].boundingClientRect.width);\r\n          this.#intersectionObserver?.disconnect();\r\n        }\r\n      });\r\n      this.#intersectionObserver.observe(this);\r\n    } else {\r\n      this.generateImageUrl(this.width);\r\n    }\r\n  }\r\n\r\n  #renderLoading() {\r\n    if (this._isLoading) {\r\n      return html`<div id=\"loader\"><uui-loader></uui-loader></div>`;\r\n    }\r\n  }\r\n\r\n  #renderImageCrop() {\r\n    try {\r\n      if (!this.value) {\r\n        return html`<div id=\"icon\" part=\"img\"></div>`;\r\n      } else {\r\n        return html`<img\r\n          id=\"figure-image\"\r\n          part=\"img\"\r\n          src=\"${this.value ?? \"\"}\"\r\n          alt=\"${this.mediaItem?.mediaKey ?? \"\"}\"\r\n          loading=\"${this.loading}\"\r\n          draggable=\"false\"\r\n        />`;\r\n      }\r\n    } catch (e) {\r\n      console.error(\"wysiwg-image-crop.renderImageCrop error\", e);\r\n    }\r\n  }\r\n\r\n  private async requestCropUrl(width: number): Promise<string | undefined> {\r\n    if (!this.mediaItem?.mediaKey) {\r\n      return;\r\n    }\r\n    const cropAlias = this.mediaItem.selectedCropAlias?.toLowerCase() ?? \"\";\r\n    const crop = this.mediaItem.crops?.find((c) => c.alias === cropAlias);\r\n    const selectedCrop = !crop\r\n      ? \"\"\r\n      : JSON.stringify(crop);\r\n    const selectedFocalPoint = !this.mediaItem.focalPoint\r\n      ? \"\"\r\n      : JSON.stringify(this.mediaItem.focalPoint);\r\n    const options: V2CropUrlData = {\r\n      query: {\r\n        mediaItemId: this.mediaItem.mediaKey,\r\n        cropAlias: cropAlias,\r\n        width,\r\n        selectedCrop: selectedCrop,\r\n        selectedFocalPoint: selectedFocalPoint\r\n      },\r\n    };\r\n\r\n    const { data, error } =\r\n      await WysiwgUmbracoCommunityExtensionsService.v2CropUrl(options);\r\n\r\n    this._isLoading = false;\r\n\r\n    if (error) {\r\n      console.error(error);\r\n      return \"error\";\r\n    }\r\n\r\n    if (data !== undefined) {\r\n      return data;\r\n    }\r\n\r\n    return \"no data\";\r\n  }\r\n\r\n  private async generateImageUrl(width: number) {\r\n    await this.requestCropUrl(width).then((data) => {\r\n      if (data === \"error\") {\r\n        this.value = \"\";\r\n        return;\r\n      } else if (data === \"no data\") {\r\n        this.value = \"\";\r\n        return;\r\n      }\r\n      this.value = data ?? \"\";\r\n    });\r\n  }\r\n\r\n  static override styles = [\r\n    UmbTextStyles,\r\n    css`\r\n      :host {\r\n        display: block;\r\n        position: relative;\r\n        overflow: hidden;\r\n        justify-content: center;\r\n        align-items: center;\r\n      }\r\n\r\n      #loader {\r\n        display: flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n        height: 100%;\r\n        width: 100%;\r\n      }\r\n\r\n      /* ::part(img) {\r\n        display: block;\r\n        width: 100%;\r\n        height: auto;\r\n        overflow: visible;\r\n\r\n        background-image: url('data:image/svg+xml;charset=utf-8,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"100\" height=\"100\" fill-opacity=\".1\"><path d=\"M50 0h50v50H50zM0 50h50v50H0z\"/></svg>');\r\n        background-size: 10px 10px;\r\n        background-repeat: repeat;\r\n      } */\r\n      img {\r\n        display: flex;\r\n        width: 100%;\r\n        height: auto;\r\n      }\r\n\r\n      #icon {\r\n        width: 100%;\r\n        height: 100%;\r\n        font-size: var(--uui-size-8);\r\n      }\r\n    `,\r\n  ];\r\n}\r\n\r\ndeclare global {\r\n  interface HTMLElementTagNameMap {\r\n    [elementName]: WysiwgCroppedImageElement;\r\n  }\r\n}\r\n","import {\r\n  css,\r\n  customElement,\r\n  html,\r\n  property,\r\n  state,\r\n} from \"@umbraco-cms/backoffice/external/lit\";\r\nimport { UmbLitElement } from \"@umbraco-cms/backoffice/lit-element\";\r\nimport { UmbTextStyles } from \"@umbraco-cms/backoffice/style\";\r\nimport { CropUrlData, WysiwgUmbracoCommunityExtensionsService } from \"../..\";\r\n\r\nconst elementName = \"wysiwg-image-crop\";\r\n@customElement(elementName)\r\nexport class WysiwgBlocksImageCropElement extends UmbLitElement {\r\n  //#region Properties\r\n\r\n  @property({ type: String })\r\n  mediaKey?: string;\r\n\r\n  @property({ type: String })\r\n  alt?: string;\r\n\r\n  @property({ type: String })\r\n  cropAlias? = \"\";\r\n\r\n  @property({ type: Number })\r\n  width = 1200;\r\n\r\n  @property()\r\n  icon = \"icon-picture\";\r\n\r\n  /**\r\n   * The `loading` state of the thumbnail.\r\n   * @enum {'lazy' | 'eager'}\r\n   * @default 'lazy'\r\n   */\r\n  @property()\r\n  loading: (typeof HTMLImageElement)[\"prototype\"][\"loading\"] = \"lazy\";\r\n  //#endregion\r\n\r\n  //#region state\r\n  @state()\r\n  private _isLoading = true;\r\n\r\n  @state()\r\n  private _imageUrl: string | undefined = \"\";\r\n\r\n  //#endregion\r\n\r\n  #intersectionObserver?: IntersectionObserver;\r\n\r\n  override connectedCallback() {\r\n    super.connectedCallback();\r\n\r\n    this.loadImage();\r\n  }\r\n\r\n  override disconnectedCallback() {\r\n\r\n    super.disconnectedCallback();\r\n    this.#intersectionObserver?.disconnect();\r\n  }\r\n\r\n  override updated(changedProperties: Map<string | number | symbol, unknown>) {\r\n    super.updated(changedProperties);\r\n\r\n    if (\r\n      changedProperties.has(\"mediaKey\") ||\r\n      changedProperties.has(\"cropAlias\")\r\n    ) {\r\n      this.loadImage();\r\n    } else if (changedProperties.has(\"_imageUrl\")) {\r\n    }\r\n  }\r\n\r\n  private loadImage() {\r\n    if (this.loading === \"lazy\") {\r\n      this.#intersectionObserver = new IntersectionObserver((entries) => {\r\n        if (entries[0].isIntersecting) {\r\n          this.generateImageUrl(entries[0].boundingClientRect.width);\r\n          this.#intersectionObserver?.disconnect();\r\n        }\r\n      });\r\n      this.#intersectionObserver.observe(this);\r\n    } else {\r\n      this.generateImageUrl(this.width);\r\n    }\r\n  }\r\n\r\n  #renderLoading() {\r\n    if (this._isLoading) {\r\n      return html`<div id=\"loader\"><uui-loader></uui-loader></div>`;\r\n    }\r\n  }\r\n\r\n  #renderImageCrop() {\r\n    try {\r\n      if (!this._imageUrl) {\r\n        return html`<div id=\"icon\" part=\"img\"></div>`;\r\n      } else {\r\n        return html`<img\r\n          id=\"figure-image\"\r\n          part=\"img\"\r\n          src=\"${this._imageUrl ?? \"\"}\"\r\n          alt=\"${this.alt ?? \"\"}\"\r\n          loading=\"${this.loading}\"\r\n          draggable=\"false\"\r\n        />`;\r\n      }\r\n    } catch (e) {\r\n      console.error(\"wysiwg-image-crop.renderImageCrop error\", e);\r\n    }\r\n  }\r\n\r\n  private async requestCropUrl(width: number): Promise<string | undefined> {\r\n    if (!this.mediaKey) {\r\n      return;\r\n    }\r\n    const options: CropUrlData = {\r\n      query: {\r\n        mediaItemId: this.mediaKey,\r\n        cropAlias: this.cropAlias,\r\n        width,\r\n      },\r\n    };\r\n\r\n    const { data, error } =\r\n      await WysiwgUmbracoCommunityExtensionsService.cropUrl(options);\r\n\r\n    this._isLoading = false;\r\n\r\n    if (error) {\r\n      console.error(error);\r\n      return \"error\";\r\n    }\r\n\r\n    if (data !== undefined) {\r\n      return data;\r\n    }\r\n\r\n    return \"no data\";\r\n  }\r\n\r\n  private async generateImageUrl(width: number) {\r\n    await this.requestCropUrl(width).then((data) => {\r\n      if (data === \"error\") {\r\n        this._imageUrl = undefined;\r\n        return;\r\n      } else if (data === \"no data\") {\r\n        this._imageUrl = undefined;\r\n        return;\r\n      }\r\n      this._imageUrl = data;\r\n    });\r\n  }\r\n\r\n  override render() {\r\n    const img = this.#renderImageCrop();\r\n    const loading = this.#renderLoading();\r\n    return html` ${img} ${loading} `;\r\n  }\r\n\r\n  static override styles = [\r\n    UmbTextStyles,\r\n    css`\r\n      :host {\r\n        display: block;\r\n        position: relative;\r\n        overflow: hidden;\r\n        justify-content: center;\r\n        align-items: center;\r\n      }\r\n\r\n      #loader {\r\n        display: flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n        height: 100%;\r\n        width: 100%;\r\n      }\r\n\r\n      ::part(img) {\r\n        display: block;\r\n        width: 100%;\r\n        height: auto;\r\n        overflow: visible;\r\n\r\n        background-image: url('data:image/svg+xml;charset=utf-8,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"100\" height=\"100\" fill-opacity=\".1\"><path d=\"M50 0h50v50H50zM0 50h50v50H0z\"/></svg>');\r\n        background-size: 10px 10px;\r\n        background-repeat: repeat;\r\n      }\r\n      img {\r\n        width: 100%;\r\n        height: auto;\r\n      }\r\n\r\n      #icon {\r\n        width: 100%;\r\n        height: 100%;\r\n        font-size: var(--uui-size-8);\r\n      }\r\n    `,\r\n  ];\r\n}\r\n\r\ndeclare global {\r\n  interface HTMLElementTagNameMap {\r\n    [elementName]: WysiwgBlocksImageCropElement;\r\n  }\r\n}\r\n"],"names":["_WysiwgBlockLayoutView_instances","requestImageUrl_fn","blockLayoutInlineStyleDefaults","customElementName","WysiwgBlockLayoutView","WysiwgBaseBlockEditorCustomViewElement","__privateAdd","gridValues","_a","viewElement","layout","_b","setting","_c","s","properties","backgroundImage","_d","v","mediaKey","__privateMethod","data","pageProperties","pageBackgroundColor","inlineStyles","backgroundColor","transparentBackground","padding","imageUrl","pageStyles","styles","html","styleMap","nothing","mediaItemId","options","error","WysiwgUmbracoCommunityExtensionsService","UmbTextStyles","css","__decorateClass","property","state","customElement","WysiwgBlockLayoutView$1","_intersectionObserver","_WysiwgCroppedImageElement_instances","renderLoading_fn","renderImageCrop_fn","elementName","WysiwgCroppedImageElement","UmbLitElement","img","loading","__privateGet","changedProperties","UmbPropertyValueChangeEvent","__privateSet","entries","width","cropAlias","crop","c","selectedCrop","selectedFocalPoint","e","_WysiwgBlocksImageCropElement_instances","WysiwgBlocksImageCropElement"],"mappings":";;;;;;;;;;;;;;;;;;;;kPAAAA,GAAAC;AA2BA,MAAMC,IAA4C;AAAA,EAChD,iBAAiB;AAAA,EACjB,oBAAoB;AAAA,EACpB,kBAAkB;AAAA,EAClB,iBAAiB;AAAA,EACjB,SAAS;AACX,GAEMC,KAAoB;AAEb,IAAAC,IAAN,cACGC,EAAuC;AAAA,EAD1C,cAAA;AAAA,UAAA,GAAA,SAAA,GAAAC,GAAA,MAAAN,CAAA,GAaL,KAAQ,qBAAqBE,EAA+B,iBAG5B,KAAA,qBAAAA;AAAA,EAAA;AAAA,EAEhC,IAAY,mBAAmB;AACtB,WAAA;AAAA,MACL,iBAAiB,KAAK,mBAAmB;AAAA,MACzC,kBAAkB,KAAK,mBAAmB;AAAA,MAC1C,oBAAoB,KAAK,mBAAmB;AAAA,MAC5C,iBAAiB,KAAK,mBAAmB;AAAA,MACzC,SAAS,KAAK,mBAAmB;AAAA,IACnC;AAAA,EAAA;AAAA,EAGF,IAAY,0BAA0B;AAC7B,WAAA;AAAA,MACL,iBAAiBA,EAA+B;AAAA,MAChD,kBAAkBA,EAA+B;AAAA,MACjD,oBAAoBA,EAA+B;AAAA,MACnD,iBAAiBA,EAA+B;AAAA,MAChD,SAASA,EAA+B;AAAA,IAC1C;AAAA,EAAA;AAAA,EAGF,MAAe,gBAAgBK,GAAoC;;AAC7D,SAAAC,IAAAD,EAAW,iBAAX,QAAAC,EAAyB,QAAQ;AACnC,YAAMC,IAAc,MACdC,KAASC,IAAAJ,EAAW,OAAO,mBAAmB,MAArC,gBAAAI,EAAwC;AAAA,QACrD,CAAC,MAAM,EAAE,eAAeF,EAAY;AAAA,SAEhCG,KAAUC,IAAAN,KAAA,gBAAAA,EAAY,iBAAZ,gBAAAM,EAA0B;AAAA,QACxC,CAACC,MAAMA,EAAE,SAAQJ,KAAA,gBAAAA,EAAQ;AAAA,SAErBK,KAAaH,KAAA,gBAAAA,EAAS,WAAoC,CAAC;AACjE,WAAK,kBAAkBG,CAAU;AAC3B,YAAAC,KAAkBC,IAAAF,KAAA,gBAAAA,EAAY,KAAK,CAACG,MAAMA,EAAE,UAAU,uBAApC,gBAAAD,EAAwD,OAC1EE,IAAWH,KAAA,QAAAA,EAAiB,SAC9BA,EAAgB,CAAC,EAAE,WACnB;AACJ,YAAMI,SAAKpB,GAALC,CAAA,EAAA,KAAA,MAAsBkB,CACzB,EAAA,KAAK,CAACE,MAAS;AACV,QAAAA,MAAS,UAAaA,MAAS,WACjC,KAAK,uBAAuBA,CAAI;AAAA,MAClC,CACD;AAAA,IAAA;AAAA,EACL;AAAA,EAGF,MAAe,4BAA4BC,GAAuE;;AAChH,QAAI,CAACA,EAAgB;AAEjB,QAAAC,KAAsBf,IAAAc,EAAe,KAAK,CAACJ,MAAMA,EAAE,UAAU,qBAAqB,MAA5D,gBAAAV,EAA+D;AAIzF,IAAIe,KAAA,QAAAA,EAAqB,UACvB,KAAK,qBAAqBA,EAAoB;AAAA,EAChD;AAAA,EAGF,kBAAkBR,GAAoC;;AACpD,UAAMS,IAAe,KAAK;AAE1B,QAAIT,KAAA,QAAAA,EAAY,QAAQ;AAChB,YAAAU,OACHjB,IAAAO,KAAA,gBAAAA,EAAY,KAAK,CAACG,MAAMA,EAAE,UAAU,uBAApC,gBAAAV,EAAwD,UAAS,CAIlE,GAAA,OACIkB,IAAwB,KAAK,mBAAmBD,CAAe;AACrE,MAAIA,MACWD,EAAA,kBAAkBE,IAAwB,gBAAgBD;AAGrE,UAAAE,KACFhB,IAAAI,KAAA,gBAAAA,EAAY,KAAK,CAACG,MAAMA,EAAE,UAAU,eAApC,gBAAAP,EAAgD;AAClD,MAAKgB,MACQA,IAAAF,KAAmB,CAACC,IAAyB,SAAS,KACzD,QAAA,MAAM,aAAaC,CAAO,IAEvBH,EAAA,UAAU,GAAGG,CAAO;AAAA,IAAA;AAGnC,SAAK,qBAAqBH;AAAA,EAAA;AAAA,EAG5B,uBAAuBI,GAAmB;AACxC,UAAMJ,IAAe,KAAK,kBAEpBG,IAAUH,EAAa,WAAWtB,EAA+B;AACvE,IAAI0B,KACWJ,EAAA,kBAAkB,QAAQI,CAAQ,MAC/CJ,EAAa,qBAAqB,WAClCA,EAAa,UAAUG,MAAYzB,EAA+B,UAC9D,SACAyB,MAEJH,EAAa,kBAAkB,QAC/BA,EAAa,qBAAqB,aAGpC,KAAK,qBAAqBA;AAAA,EAAA;AAAA,EAyBnB,SAAS;;AAChB,UAAMK,IAAa,EAAE,iBAAiB,KAAK,mBAAmB,GACxDC,IAAS,KAAK;AAEb,WAAAC;AAAA,cACGC,EAASH,CAAU,CAAC;AAAA;AAAA,eAEpBrB,IAAA,KAAK,WAAL,QAAAA,EAAa,mBACjBG,IAAA,KAAK,WAAL,gBAAAA,EAAa,kBACb,WAAc,EAAE;AAAA;AAAA,oCAEU,KAAK,IAAI;AAAA;AAAA;AAAA;AAAA,oBAIzB,KAAK,KAAK;AAAA,iBACb,KAAK,OAAO;AAAA;AAAA,QAErB,KAAK,cACHoB;AAAA;AAAA;AAAA,oBAGU,KAAK,SAAS,KAAK,8BAA8B,CAAC;AAAA;AAAA,yBAG5DE,CAAO;AAAA;AAAA;AAAA,iBAGAD,EAASF,CAAM,CAAC;AAAA;AAAA;AAAA,EAAA;AAmBjC;AA5LO9B,IAAA,oBAAA,QAAA;AAuHCC,IAAgB,eAACiC,GAAqB;AAC1C,MAAI,CAACA;AACH;AAEF,QAAMC,IAAwB;AAAA,IAC5B,OAAO;AAAA,MACL,aAAAD;AAAA,IAAA;AAAA,EAEJ,GACM,EAAE,MAAAb,GAAM,OAAAe,EAAA,IACZ,MAAMC,EAAwC,SAASF,CAAO;AAEhE,MAAIC;AACF,mBAAQ,MAAMA,CAAK,GACZ;AAGT,MAAIf,MAAS;AACJ,WAAAA;AAEX;AA3IWjB,EA8KK,SAAS;AAAA,EACvBkC;AAAA,EACAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWF;AAvLAC,EAAA;AAAA,EADCC,EAAS,EAAE,WAAW,GAAO,CAAA;AAAA,GAHnBrC,EAIX,WAAA,SAAA,CAAA;AAGAoC,EAAA;AAAA,EADCC,EAAS,EAAE,MAAM,QAAQ,SAAS,GAAO,CAAA;AAAA,GAN/BrC,EAOX,WAAA,QAAA,CAAA;AAGAoC,EAAA;AAAA,EADCC,EAAS,EAAE,MAAM,SAAS,SAAS,GAAM,CAAA;AAAA,GAT/BrC,EAUX,WAAA,eAAA,CAAA;AAGQoC,EAAA;AAAA,EADPE,EAAM;AAAA,GAZItC,EAaH,WAAA,sBAAA,CAAA;AAGRoC,EAAA;AAAA,EADCE,EAAM;AAAA,GAfItC,EAgBX,WAAA,sBAAA,CAAA;AAhBWA,IAANoC,EAAA;AAAA,EADNG,EAAcxC,EAAiB;AAAA,GACnBC,CAAA;AA8Lb,MAAAwC,KAAexC;;;;;;;;;;;;;yXCnOfyC,GAAAC,GAAAC,GAAAC;AAaA,MAAMC,KAAc;AAEP,IAAAC,IAAN,cAAwCC,EAAoD;AAAA,EAA5F,cAAA;AAAA,UAAA,GAAA,SAAA,GAAA7C,EAAA,MAAAwC,CAAA,GAGW,KAAA,QAAA,IAGyC,KAAA,YAAA,MAGjD,KAAA,QAAA,MAGD,KAAA,OAAA,gBAQsD,KAAA,UAAA,QAM7D,KAAQ,aAAa,IAIrB,KAAQ,cAAsB,IAE9BxC,EAAA,MAAAuC,CAAA;AAAA,EAAA;AAAA,EAES,SAAS;AACV,UAAAO,IAAMhC,QAAK0B,GAALE,CAAA,EAAA,KAAA,IAAA,GACNK,IAAUjC,QAAK0B,GAALC,CAAA,EAAA,KAAA,IAAA;AACT,WAAAhB,KAAQqB,CAAG,IAAIC,CAAO;AAAA,EAAA;AAAA,EAGtB,oBAAoB;AAC3B,UAAM,kBAAkB,GAExB,KAAK,UAAU;AAAA,EAAA;AAAA,EAGR,uBAAuB;;AAC9B,UAAM,qBAAqB,IAC3BC,IAAAA,EAAA,MAAKT,OAALS,QAAAA,EAA4B;AAAA,EAAW;AAAA,EAGhC,QAAQC,GAA2D;AAC1E,UAAM,QAAQA,CAAiB,GAE3BA,EAAkB,IAAI,WAAW,KACnC,KAAK,UAAU,GAEbA,EAAkB,IAAI,OAAO,KAC3B,KAAK,gBAAgB,KAAK,UACvB,KAAA,cAAc,IAAIC,GAA6B,GACpD,KAAK,cAAc,KAAK;AAAA,EAE5B;AAAA,EAGM,YAAY;AACd,IAAA,KAAK,YAAY,UACnBC,GAAA,MAAKZ,GAAwB,IAAI,qBAAqB,CAACa,MAAY;;AAC7D,MAAAA,EAAQ,CAAC,EAAE,mBACb,KAAK,iBAAiBA,EAAQ,CAAC,EAAE,mBAAmB,KAAK,IACzDJ,IAAAA,EAAA,MAAKT,OAALS,QAAAA,EAA4B;AAAA,IAC9B,CACD,CAAA,GACIA,EAAA,MAAAT,CAAA,EAAsB,QAAQ,IAAI,KAElC,KAAA,iBAAiB,KAAK,KAAK;AAAA,EAClC;AAAA,EA4BF,MAAc,eAAec,GAA4C;;AACnE,QAAA,GAACnD,IAAA,KAAK,cAAL,QAAAA,EAAgB;AACnB;AAEF,UAAMoD,MAAYjD,IAAA,KAAK,UAAU,sBAAf,gBAAAA,EAAkC,kBAAiB,IAC/DkD,KAAOhD,IAAA,KAAK,UAAU,UAAf,gBAAAA,EAAsB,KAAK,CAACiD,MAAMA,EAAE,UAAUF,IACrDG,IAAgBF,IAElB,KAAK,UAAUA,CAAI,IADnB,IAEEG,IAAsB,KAAK,UAAU,aAEvC,KAAK,UAAU,KAAK,UAAU,UAAU,IADxC,IAEE7B,IAAyB;AAAA,MAC7B,OAAO;AAAA,QACL,aAAa,KAAK,UAAU;AAAA,QAC5B,WAAAyB;AAAA,QACA,OAAAD;AAAA,QACA,cAAAI;AAAA,QACA,oBAAAC;AAAA,MAAA;AAAA,IAEJ,GAEM,EAAE,MAAA3C,GAAM,OAAAe,EAAA,IACZ,MAAMC,EAAwC,UAAUF,CAAO;AAIjE,WAFA,KAAK,aAAa,IAEdC,KACF,QAAQ,MAAMA,CAAK,GACZ,WAGLf,MAAS,SACJA,IAGF;AAAA,EAAA;AAAA,EAGT,MAAc,iBAAiBsC,GAAe;AAC5C,UAAM,KAAK,eAAeA,CAAK,EAAE,KAAK,CAACtC,MAAS;AAC9C,UAAIA,MAAS,SAAS;AACpB,aAAK,QAAQ;AACb;AAAA,MAAA,WACSA,MAAS,WAAW;AAC7B,aAAK,QAAQ;AACb;AAAA,MAAA;AAEF,WAAK,QAAQA,KAAQ;AAAA,IAAA,CACtB;AAAA,EAAA;AA6CL;AAtKEwB,IAAA,oBAAA,QAAA;AAhCKC,IAAA,oBAAA,QAAA;AA+ELC,IAAc,WAAG;AACf,MAAI,KAAK;AACA,WAAAhB;AAEX;AAEAiB,IAAgB,WAAG;;AACb,MAAA;AACE,WAAC,KAAK,QAGDjB;AAAA;AAAA;AAAA,iBAGE,KAAK,SAAS,EAAE;AAAA,mBAChBvB,IAAA,KAAK,cAAL,gBAAAA,EAAgB,aAAY,EAAE;AAAA,qBAC1B,KAAK,OAAO;AAAA;AAAA,cAPlBuB;AAAA,WAWFkC,GAAG;AACF,YAAA,MAAM,2CAA2CA,CAAC;AAAA,EAAA;AAE9D;AAtGWf,EA4JK,SAAS;AAAA,EACvBZ;AAAA,EACAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAuCF;AAlMAC,EAAA;AAAA,EADCC,EAAS,EAAE,MAAM,OAAQ,CAAA;AAAA,GAFfS,EAGX,WAAA,SAAA,CAAA;AAGAV,EAAA;AAAA,EADCC,EAAS,EAAE,MAAM,OAAQ,CAAA;AAAA,GALfS,EAMX,WAAA,aAAA,CAAA;AAGAV,EAAA;AAAA,EADCC,EAAS,EAAE,MAAM,OAAQ,CAAA;AAAA,GARfS,EASX,WAAA,SAAA,CAAA;AAGAV,EAAA;AAAA,EADCC,EAAS;AAAA,GAXCS,EAYX,WAAA,QAAA,CAAA;AAQAV,EAAA;AAAA,EADCC,EAAS;AAAA,GAnBCS,EAoBX,WAAA,WAAA,CAAA;AAMQV,EAAA;AAAA,EADPE,EAAM;AAAA,GAzBIQ,EA0BH,WAAA,cAAA,CAAA;AA1BGA,IAANV,EAAA;AAAA,EADNG,EAAcM,EAAW;AAAA,GACbC,CAAA;;;;;;;yXCfbL,GAAAqB,GAAAnB,GAAAC;AAWA,MAAMC,KAAc;AAEP,IAAAkB,IAAN,cAA2ChB,EAAc;AAAA,EAAzD,cAAA;AAAA,UAAA,GAAA,SAAA,GAAA7C,EAAA,MAAA4D,CAAA,GAUQ,KAAA,YAAA,IAGL,KAAA,QAAA,MAGD,KAAA,OAAA,gBAQsD,KAAA,UAAA,QAK7D,KAAQ,aAAa,IAGrB,KAAQ,YAAgC,IAIxC5D,EAAA,MAAAuC,CAAA;AAAA,EAAA;AAAA,EAES,oBAAoB;AAC3B,UAAM,kBAAkB,GAExB,KAAK,UAAU;AAAA,EAAA;AAAA,EAGR,uBAAuB;;AAE9B,UAAM,qBAAqB,IAC3BrC,IAAA8C,EAAA,MAAKT,OAAL,QAAArC,EAA4B;AAAA,EAAW;AAAA,EAGhC,QAAQ+C,GAA2D;AAC1E,UAAM,QAAQA,CAAiB,GAG7BA,EAAkB,IAAI,UAAU,KAChCA,EAAkB,IAAI,WAAW,IAEjC,KAAK,UAAU,IACNA,EAAkB,IAAI,WAAW;AAAA,EAC5C;AAAA,EAGM,YAAY;AACd,IAAA,KAAK,YAAY,UACnBE,GAAA,MAAKZ,GAAwB,IAAI,qBAAqB,CAACa,MAAY;;AAC7D,MAAAA,EAAQ,CAAC,EAAE,mBACb,KAAK,iBAAiBA,EAAQ,CAAC,EAAE,mBAAmB,KAAK,IACzDlD,IAAA8C,EAAA,MAAKT,OAAL,QAAArC,EAA4B;AAAA,IAC9B,CACD,CAAA,GACI8C,EAAA,MAAAT,CAAA,EAAsB,QAAQ,IAAI,KAElC,KAAA,iBAAiB,KAAK,KAAK;AAAA,EAClC;AAAA,EA4BF,MAAc,eAAec,GAA4C;AACnE,QAAA,CAAC,KAAK;AACR;AAEF,UAAMxB,IAAuB;AAAA,MAC3B,OAAO;AAAA,QACL,aAAa,KAAK;AAAA,QAClB,WAAW,KAAK;AAAA,QAChB,OAAAwB;AAAA,MAAA;AAAA,IAEJ,GAEM,EAAE,MAAAtC,GAAM,OAAAe,EAAA,IACZ,MAAMC,EAAwC,QAAQF,CAAO;AAI/D,WAFA,KAAK,aAAa,IAEdC,KACF,QAAQ,MAAMA,CAAK,GACZ,WAGLf,MAAS,SACJA,IAGF;AAAA,EAAA;AAAA,EAGT,MAAc,iBAAiBsC,GAAe;AAC5C,UAAM,KAAK,eAAeA,CAAK,EAAE,KAAK,CAACtC,MAAS;AAC9C,UAAIA,MAAS,SAAS;AACpB,aAAK,YAAY;AACjB;AAAA,MAAA,WACSA,MAAS,WAAW;AAC7B,aAAK,YAAY;AACjB;AAAA,MAAA;AAEF,WAAK,YAAYA;AAAA,IAAA,CAClB;AAAA,EAAA;AAAA,EAGM,SAAS;AACV,UAAA+B,IAAMhC,QAAK8C,GAALlB,CAAA,EAAA,KAAA,IAAA,GACNK,IAAUjC,QAAK8C,GAALnB,CAAA,EAAA,KAAA,IAAA;AACT,WAAAhB,KAAQqB,CAAG,IAAIC,CAAO;AAAA,EAAA;AA4CjC;AA1JER,IAAA,oBAAA,QAAA;AApCKqB,IAAA,oBAAA,QAAA;AA4ELnB,IAAc,WAAG;AACf,MAAI,KAAK;AACA,WAAAhB;AAEX;AAEAiB,IAAgB,WAAG;AACb,MAAA;AACE,WAAC,KAAK,YAGDjB;AAAA;AAAA;AAAA,iBAGE,KAAK,aAAa,EAAE;AAAA,iBACpB,KAAK,OAAO,EAAE;AAAA,qBACV,KAAK,OAAO;AAAA;AAAA,cAPlBA;AAAA,WAWF,GAAG;AACF,YAAA,MAAM,2CAA2C,CAAC;AAAA,EAAA;AAE9D;AAnGWoC,EAqJK,SAAS;AAAA,EACvB7B;AAAA,EACAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAsCF;AAzLAC,EAAA;AAAA,EADCC,EAAS,EAAE,MAAM,OAAQ,CAAA;AAAA,GAHf0B,EAIX,WAAA,YAAA,CAAA;AAGA3B,EAAA;AAAA,EADCC,EAAS,EAAE,MAAM,OAAQ,CAAA;AAAA,GANf0B,EAOX,WAAA,OAAA,CAAA;AAGA3B,EAAA;AAAA,EADCC,EAAS,EAAE,MAAM,OAAQ,CAAA;AAAA,GATf0B,EAUX,WAAA,aAAA,CAAA;AAGA3B,EAAA;AAAA,EADCC,EAAS,EAAE,MAAM,OAAQ,CAAA;AAAA,GAZf0B,EAaX,WAAA,SAAA,CAAA;AAGA3B,EAAA;AAAA,EADCC,EAAS;AAAA,GAfC0B,EAgBX,WAAA,QAAA,CAAA;AAQA3B,EAAA;AAAA,EADCC,EAAS;AAAA,GAvBC0B,EAwBX,WAAA,WAAA,CAAA;AAKQ3B,EAAA;AAAA,EADPE,EAAM;AAAA,GA5BIyB,EA6BH,WAAA,cAAA,CAAA;AAGA3B,EAAA;AAAA,EADPE,EAAM;AAAA,GA/BIyB,EAgCH,WAAA,aAAA,CAAA;AAhCGA,IAAN3B,EAAA;AAAA,EADNG,EAAcM,EAAW;AAAA,GACbkB,CAAA;"}