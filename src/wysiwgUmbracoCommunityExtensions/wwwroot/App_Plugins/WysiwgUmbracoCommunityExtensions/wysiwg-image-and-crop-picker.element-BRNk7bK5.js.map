{"version":3,"file":"wysiwg-image-and-crop-picker.element-BRNk7bK5.js","sources":["../../../Wysiwg/src/property-editors/picture/wysiwg-image-and-crop-picker.element.ts"],"sourcesContent":["import {\r\n  UMB_MEDIA_ENTITY_TYPE,\r\n  UmbInputRichMediaElement,\r\n  UmbMediaPickerPropertyValueEntry,\r\n} from \"@umbraco-cms/backoffice/media\";\r\nimport {\r\n  css,\r\n  customElement,\r\n  html,\r\n  property,\r\n  state,\r\n} from \"@umbraco-cms/backoffice/external/lit\";\r\nimport { UmbLitElement } from \"@umbraco-cms/backoffice/lit-element\";\r\nimport { UMB_PROPERTY_CONTEXT } from \"@umbraco-cms/backoffice/property\";\r\nimport {\r\n  UmbPropertyEditorConfigCollection,\r\n  UmbPropertyEditorUiElement,\r\n  UmbPropertyValueChangeEvent,\r\n} from \"@umbraco-cms/backoffice/property-editor\";\r\nimport type { UmbTreeStartNode } from \"@umbraco-cms/backoffice/tree\";\r\nimport {\r\n  UMB_VALIDATION_EMPTY_LOCALIZATION_KEY,\r\n  UmbFormControlMixin,\r\n} from \"@umbraco-cms/backoffice/validation\";\r\n\r\nimport {\r\n  UUISelectElement,\r\n  UUISelectEvent,\r\n} from \"@umbraco-cms/backoffice/external/uui\";\r\nimport {\r\n  WysiwgCropModel,\r\n  WysiwgMediaPickerPropertyValueEntry,\r\n  WysiwgMediaPickerPropertyValues,\r\n} from \"./types\";\r\nimport { CropsData, CropsResponse, MediaTypeModel, MediaTypesResponse, WysiwgUmbracoCommunityExtensionsService } from \"../../api\";\r\nimport { UmbNumberRangeValueType } from \"@umbraco-cms/backoffice/models\";\r\nimport { WysiwgCroppedImageElement } from \"./wysiwg-image-crop.element\";\r\n/**\r\n * based on @element umb-property-editor-ui-media-picker\r\n */\r\n\r\nconst elementName = \"wysiwg-image-and-crop-picker\";\r\n@customElement(elementName)\r\nexport class WysiwgImageAndCropPickerElement\r\n  extends UmbFormControlMixin<WysiwgMediaPickerPropertyValues | undefined, typeof UmbLitElement, undefined>(UmbLitElement)\r\n  implements UmbPropertyEditorUiElement {\r\n\r\n  //#region properties, states, ctor, methods\r\n  //#region properties\r\n  public set config(config: UmbPropertyEditorConfigCollection | undefined) {\r\n    if (!config) return;\r\n\r\n    this._allowedMediaTypes = config.getValueByAlias<string>(\"filter\")?.split(\",\") ?? [];\r\n    if (this._allowedMediaTypes.length === 0) {\r\n      this.getMediaTypes();\r\n    }\r\n    this._focalPointEnabled = Boolean(config.getValueByAlias(\"enableLocalFocalPoint\"));\r\n    this._multiple = Boolean(config.getValueByAlias(\"multiple\"));\r\n\r\n    this._preselectedCrops = config?.getValueByAlias<Array<WysiwgCropModel>>(\"crops\") ?? [];\r\n\r\n    if (this._preselectedCrops.length > 0) {\r\n      const defaultCrop = this._preselectedCrops.find((item) => !!item.defaultCrop);\r\n      this._selectedCropAlias = this.value?.[0]?.selectedCropAlias ?? defaultCrop?.alias ?? \"\";\r\n      const options = this._preselectedCrops.map((item) => ({\r\n        name: item.label?.toString() ?? item.alias,\r\n        value: item.alias,\r\n        selected: item.alias === this._selectedCropAlias,\r\n      })) as Array<Option & { invalid?: boolean }>;\r\n      this._options = [\r\n        { name: \"\", value: \"\", },\r\n        ...options,\r\n      ];\r\n    }\r\n\r\n    this.getImageCropperCrops();\r\n\r\n    const startNodeId = config.getValueByAlias<string>(\"startNodeId\") ?? \"\";\r\n    this._startNode = startNodeId ? { unique: startNodeId, entityType: UMB_MEDIA_ENTITY_TYPE } : undefined;\r\n\r\n    const minMax = config.getValueByAlias<UmbNumberRangeValueType>('validationLimit');\r\n    this._min = minMax?.min ?? 0;\r\n    this._max = minMax?.max ?? Infinity;\r\n  }\r\n\r\n  /**\r\n   * Sets the input to mandatory, meaning validation will fail if the value is empty.\r\n   * @type {boolean}\r\n   */\r\n  @property({ type: Boolean })\r\n  mandatory?: boolean;\r\n\r\n  @property({ type: String })\r\n  mandatoryMessage = UMB_VALIDATION_EMPTY_LOCALIZATION_KEY;\r\n\r\n  /**\r\n   * Sets the input to readonly mode, meaning value cannot be changed but still able to read and select its content.\r\n   * @type {boolean}\r\n   * @attr\r\n   * @default false\r\n   */\r\n  @property({ type: Boolean, reflect: true })\r\n  readonly = false\r\n\r\n  //#endregion\r\n\r\n  //#region states\r\n  @state()\r\n  private _startNode?: UmbTreeStartNode;\r\n\r\n  @state()\r\n  private _focalPointEnabled: boolean = false;\r\n\r\n  @state()\r\n  private _preselectedCrops: Array<WysiwgCropModel> = [];\r\n\r\n  @state()\r\n  private _allowedMediaTypes: Array<string> = [];\r\n\r\n  @state()\r\n  private _multiple: boolean = false;\r\n\r\n  @state()\r\n  private _min: number = 0;\r\n\r\n  @state()\r\n  private _max: number = Infinity;\r\n\r\n  @state()\r\n  private _alias?: string;\r\n\r\n  @state()\r\n  private _variantId?: string;\r\n\r\n  // additions\r\n  @state()\r\n  private _selectedCropAlias: string = \"\";\r\n\r\n  @state()\r\n  private _options: Array<Option & { invalid?: boolean }> = [];\r\n\r\n  @state()\r\n  private _mediaTypes?: Array<MediaTypeModel> = [];\r\n\r\n  @state()\r\n  private _imgSrc: string = \"\";\r\n  @state()\r\n  private _prevImgSrc: string = \"\";\r\n  //#endregion\r\n\r\n  constructor() {\r\n    super();\r\n\r\n    this.consumeContext(UMB_PROPERTY_CONTEXT, (context) => {\r\n      this.observe(context.alias, (alias) => (this._alias = alias));\r\n      this.observe(context.variantId, (variantId) => (this._variantId = variantId?.toString() || \"invariant\"));\r\n    });\r\n  }\r\n\r\n  override firstUpdated() {\r\n    this.addFormControlElement(this.shadowRoot!.querySelector(\"umb-input-rich-media\")!);\r\n    const cropSelect = this.shadowRoot?.querySelector<UUISelectElement>(\"umb-input-dropdown-list\");\r\n    if (cropSelect) {\r\n      this.addFormControlElement(this.shadowRoot!.querySelector(\"umb-input-dropdown-list\")!);\r\n    }\r\n  }\r\n\r\n  override focus(options?: FocusOptions) {\r\n    console.log(\"focus(options) options = \", options);\r\n    return this.shadowRoot?.querySelector<UmbInputRichMediaElement>(\"umb-input-rich-media\")?.focus();\r\n  }\r\n\r\n  private async getMediaTypes() {\r\n    await this.apiMediaTypes().then((data) => {\r\n      if (data === \"error\") {\r\n        this._mediaTypes = [];\r\n        return;\r\n      } else if (data === \"no data\") {\r\n        this._mediaTypes = [];\r\n        return;\r\n      }\r\n      const mediaTypes = data as Array<MediaTypeModel>;\r\n\r\n      this._mediaTypes = mediaTypes;\r\n      const imageType = this._mediaTypes?.find((type) => type.alias.toLowerCase() === \"image\");\r\n      this._allowedMediaTypes = !imageType?.key ? [] : [imageType.key];\r\n    });\r\n  }\r\n\r\n  private async apiMediaTypes(): Promise<MediaTypesResponse | \"error\" | \"no data\"> {\r\n    const { data, error } = await WysiwgUmbracoCommunityExtensionsService.mediaTypes();\r\n    if (error) {\r\n      console.error(error);\r\n    }\r\n    if (data !== undefined) {\r\n      return data;\r\n    }\r\n    return \"no data\";\r\n  }\r\n\r\n  private async getImageCropperCrops(mediaKey?: string) {\r\n    if (!this._selectedCropAlias) { this._selectedCropAlias = this.value?.[0]?.selectedCropAlias ?? \"\"; }\r\n    await this.crops(mediaKey).then((data) => {\r\n      if (data === \"error\") {\r\n        this._preselectedCrops = [];\r\n        return;\r\n      } else if (data === \"no data\") {\r\n        this._preselectedCrops = [];\r\n        return;\r\n      }\r\n      const imageCrops = data as Array<WysiwgCropModel>;\r\n      var newOptions = imageCrops.map((item) => ({\r\n        name: `[${(item.label?.toString() ?? item.alias)}]`,\r\n        value: item.alias,\r\n        selected: item.alias === this._selectedCropAlias,\r\n      }));\r\n\r\n      this._options = [\r\n        ...this._options,\r\n        ...newOptions,\r\n      ];\r\n    });\r\n  }\r\n\r\n  private async crops(mediaKey?: string): Promise<CropsResponse | \"error\" | \"no data\"> {\r\n    const options: CropsData = {\r\n      query: {\r\n        mediaItemId: mediaKey ?? \"\",\r\n      },\r\n    };\r\n\r\n    const { data, error } =\r\n      await WysiwgUmbracoCommunityExtensionsService.crops(options);\r\n\r\n    if (error) {\r\n      console.error(error);\r\n      return \"error\";\r\n    }\r\n\r\n    if (data !== undefined) {\r\n      return data;\r\n    }\r\n\r\n    return \"no data\";\r\n  }\r\n\r\n  #onChangeImage(event: CustomEvent & { target: UmbInputRichMediaElement }) {\r\n    if (this._imgSrc !== this._prevImgSrc) {\r\n      console.debug(\"imgSrc changed\", this._imgSrc, this._prevImgSrc);\r\n      this._prevImgSrc = this._imgSrc;\r\n    }\r\n\r\n    const isEmpty = event.target.value?.length === 0;\r\n    const mediaItems: UmbMediaPickerPropertyValueEntry | undefined =\r\n      event.target.value?.find((item) => !!item.mediaKey) ?? undefined;\r\n    let newValue = isEmpty ? undefined : mediaItems;\r\n\r\n    const selectedCropAlias = this.value?.[0]?.selectedCropAlias ?? this._selectedCropAlias;\r\n\r\n    if (isEmpty) {\r\n      this._updateValue({\r\n        selectedCropAlias: selectedCropAlias,\r\n      }, true);\r\n    } else {\r\n      const crops = (newValue?.crops.length === 0) ? this._preselectedCrops : newValue?.crops;\r\n      this._updateValue({\r\n        key: newValue?.key,\r\n        mediaKey: newValue?.mediaKey,\r\n        mediaTypeAlias: newValue?.mediaTypeAlias,\r\n        focalPoint: newValue?.focalPoint,\r\n        crops: crops,\r\n        selectedCropAlias: selectedCropAlias,\r\n      } as UmbMediaPickerPropertyValueEntry);\r\n    }\r\n  }\r\n\r\n  #onChangeCrop(event: UUISelectEvent) {\r\n    const value = event.target.value as string;\r\n    this._selectedCropAlias = value;\r\n\r\n    this._updateValue({\r\n      selectedCropAlias: this._selectedCropAlias,\r\n    });\r\n  }\r\n\r\n  #onChangePreview(event: CustomEvent & { target: WysiwgCroppedImageElement }) {\r\n    if (event?.target?.value?.length > 0) {\r\n\r\n      console.log(\"onChangePreview\", event?.target?.value);\r\n      this._updateValue({\r\n        cropUrl: event?.target?.value,\r\n      });\r\n    }\r\n  }\r\n\r\n  private _updateValue(fieldsToUpdate: Partial<WysiwgMediaPickerPropertyValueEntry>, deleteImage: boolean = false) {\r\n    const newValue: WysiwgMediaPickerPropertyValues = [];\r\n    if (!this.value || !this.value.length || deleteImage) {\r\n      const item = {\r\n        ...fieldsToUpdate,\r\n      } as WysiwgMediaPickerPropertyValueEntry;\r\n      newValue.push(item);\r\n    } else {\r\n      for (let i = 0; i < this.value.length; i++) {\r\n        const item = {\r\n          ...this.value[i],\r\n          ...fieldsToUpdate,\r\n        };\r\n        newValue.push(item);\r\n      }\r\n    }\r\n    this.value = newValue;\r\n    this.dispatchEvent(new UmbPropertyValueChangeEvent());\r\n  }\r\n\r\n  render() {\r\n    return html`\r\n    <div id=\"container\">\r\n      <div id=\"left\">\r\n        ${this.#renderEditImage()}\r\n      </div>\r\n      <div id=\"right\">\r\n        ${this.#renderPreviewImage()}\r\n        ${this.#renderDropdown()}\r\n      </div>\r\n    </div>`;\r\n  }\r\n\r\n  #renderPreviewImage() {\r\n    if (!this.value || !this.value.length || !this.value[0]?.mediaKey) { return; }\r\n\r\n    const media = this.value[0];\r\n\r\n    return html`<wysiwg-cropped-image .mediaItem=${media} @change=${this.#onChangePreview}></wysiwg-cropped-image>`;\r\n  }\r\n\r\n  #renderEditImage() {\r\n    return html`\r\n    <umb-input-rich-media\r\n      .alias=${this._alias}\r\n      .allowedContentTypeIds=${this._allowedMediaTypes}\r\n      .focalPointEnabled=${this._focalPointEnabled}\r\n      .value=${this.value ?? []}\r\n      .max=${this._max}\r\n      .min=${this._min}\r\n      .preselectedCrops=${this._preselectedCrops}\r\n      .startNode=${this._startNode}\r\n      .variantId=${this._variantId}\r\n      .required=${this.mandatory}\r\n      .requiredMessage=${this.mandatoryMessage}\r\n      ?multiple=${this._multiple}\r\n      @change=${this.#onChangeImage}\r\n      ?readonly=${this.readonly}\r\n    >\r\n    </umb-input-rich-media>\r\n  `;\r\n  }\r\n\r\n  #renderDropdown() {\r\n    const enabled = !!this.value?.length && !!this.value[0]?.mediaKey;\r\n    const label = \"crop-select\";\r\n\r\n    if (!this._options.length) return html`<uui-select label=${label}></uui-select>`;\r\n\r\n    return html`\r\n      <uui-select\r\n        label=${label}\r\n        .disabled=${!enabled}\r\n        .options=${this._options}\r\n        @change=${this.#onChangeCrop}\r\n        ?readonly=${this.readonly}\r\n      ></uui-select>\r\n    `;\r\n  }\r\n  //#endregion\r\n\r\n  static override readonly styles = [\r\n    UUISelectElement.styles,\r\n    css`\r\n      uui-select {\r\n        margin-top: 8px;\r\n      }\r\n\r\n      :host {\r\n        display: inline;\r\n      }\r\n\r\n      #container {\r\n        display: flex;\r\n        flex-wrap: wrap;\r\n        row-gap: 20px;\r\n        column-gap: 20px;\r\n        width: 100%;\r\n        min-width: 150px;\r\n        height: 100%;\r\n      }\r\n\r\n      #left, #right {\r\n        display: flex;\r\n        flex-direction: column;\r\n        position: relative;\r\n        width: 100%;\r\n        max-width: 200px;\r\n        min-width: 100px;\r\n      }\r\n      #left {\r\n        margin-right: 20px;\r\n      }\r\n    `,\r\n  ];\r\n}\r\n\r\nexport { WysiwgImageAndCropPickerElement as element };\r\n\r\ndeclare global {\r\n  interface HTMLElementTagNameMap {\r\n    [elementName]: WysiwgImageAndCropPickerElement;\r\n  }\r\n}\r\n"],"names":["_WysiwgImageAndCropPickerElement_instances","onChangeImage_fn","onChangeCrop_fn","onChangePreview_fn","renderPreviewImage_fn","renderEditImage_fn","renderDropdown_fn","elementName","WysiwgImageAndCropPickerElement","UmbFormControlMixin","UmbLitElement","__privateAdd","UMB_VALIDATION_EMPTY_LOCALIZATION_KEY","UMB_PROPERTY_CONTEXT","context","alias","variantId","config","_a","defaultCrop","item","_c","_b","options","startNodeId","UMB_MEDIA_ENTITY_TYPE","minMax","data","mediaTypes","imageType","type","error","WysiwgUmbracoCommunityExtensionsService","mediaKey","newOptions","fieldsToUpdate","deleteImage","newValue","UmbPropertyValueChangeEvent","html","__privateMethod","event","isEmpty","mediaItems","selectedCropAlias","_d","crops","value","media","enabled","label","UUISelectElement","css","__decorateClass","property","state","customElement"],"mappings":"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"}